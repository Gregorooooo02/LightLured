// Made with Amplify Shader Editor v1.9.6.3
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "BOXOPHOBIC/The Visual Engine/Geometry/General Subsurface Lit (Lite)"
{
	Properties
	{
		[HideInInspector]_motion_highlight_color("_motion_highlight_color", Vector) = (0,0,0,0)
		[HideInInspector]_IsVersion("_IsVersion", Float) = 2030
		[HideInInspector]_IsTVEShader("_IsTVEShader", Float) = 1
		[HideInInspector]_IsShared("_IsShared", Float) = 0
		[HideInInspector]_IsIdentifier("_IsIdentifier", Float) = 0
		[HideInInspector]_IsCollected("_IsCollected", Float) = 0
		[HideInInspector]_IsConverted("_IsConverted", Float) = 0
		[HideInInspector]_IsCustomShader("_IsCustomShader", Float) = 0
		[HideInInspector]_HasDefaultTextures("_HasDefaultTextures", Float) = 0
		[HideInInspector]_MainTex("Legacy MainTex", 2D) = "white" {}
		[HideInInspector]_BumpMap("Legacy BumpMap", 2D) = "white" {}
		[HideInInspector]_Cutoff("Legacy Cutoff", Float) = 0.5
		[HideInInspector]_Color("Legacy Color", Color) = (0,0,0,0)
		[StyledCategory(Render Settings, true, 0, 10)]_RenderCategory("[ Render Category ]", Float) = 1
		[Enum(Opaque,0,Transparent,1)]_RenderMode("Render Mode", Float) = 0
		[Enum(Off,0,On,1)]_RenderZWrite("Render ZWrite", Float) = 1
		[Enum(Both,0,Back,1,Front,2)]_RenderCull("Render Faces", Float) = 2
		[HideInInspector]_render_normal("_render_normal", Vector) = (1,1,1,0)
		[HideInInspector]_RenderQueue("Render Queue", Float) = 0
		[HideInInspector]_RenderPriority("Render Priority", Float) = 0
		[HideInInspector]_RenderBakeGI("Render BakeGI", Float) = 0
		[Enum(Off,0,On,1)]_RenderSSR("Render SSR", Float) = 0
		[Enum(Off,0,On,1)]_RenderDecals("Render Decals", Float) = 0
		[Enum(Auto,0,Off,1,On,2)]_RenderMotion("Render Motion", Float) = 0
		[Enum(Flip,0,Mirror,1,Same,2)]_RenderNormal("Render Normals", Float) = 0
		[Enum(Off,0,On,1)]_RenderSpecular("Render Specular", Float) = 1
		[Enum(Off,0,On,1)]_RenderShadow("Render Shadows", Float) = 1
		[Enum(Default,0,Point ,1,Low,2,Medium,3,High,4)]_RenderFilter("Render Filtering", Float) = 0
		[Enum(Off,0,On,1)]_RenderClip("Render Clipping", Float) = 0
		[StyledSpace(10)]_RenderEnd("[ Render End ]", Float) = 1
		[StyledCategory(Noise Settings, true, 0, 10)]_NoiseCategory("[ Noise Category ]", Float) = 1
		[NoScaleOffset][StyledTextureSingleLine]_NoiseTex3D("Noise Mask 3D", 3D) = "white" {}
		[StyledSpace(10)]_NoiseEnd("[ Noise End ]", Float) = 1
		[StyledCategory(Object Settings, true, 0, 10)]_ObjectCategory("[ Object Category ]", Float) = 1
		[Enum(Legacy,0,Standard,1)]_ObjectModelMode("Object Model Mode", Float) = 1
		[Enum(Off,0,Baked,1,Procedural,2)]_ObjectPivotMode("Object Pivots Mode", Float) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ObjectPhaseMode("Object Phase Mask", Float) = 0
		_ObjectHeightValue("Object Height Value", Range( 0 , 40)) = 1
		_ObjectRadiusValue("Object Radius Value", Range( 0 , 40)) = 1
		[HideInInspector]_object_phase_mode("_object_phase_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_ObjectEnd("[ Object End ]", Float) = 1
		[StyledCategory(Global Settings, true, 0, 10)]_GlobalCategory("[ Global Category ]", Float) = 1
		[StyledMessage(Warning, Global Elements and Layers are only available with The Visual Engine Core package., 0, 0)]_GlobalLiteInfo("# Global Lite Info", Float) = 0
		[StyledSpace(10)]_GlobalEnd("[ Global End ]", Float) = 1
		[StyledCategory(Main Settings, true, 0, 10)]_MainCategory("[Main Category ]", Float) = 1
		[StyledTextureSingleLine]_MainAlbedoTex("Main Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_MainNormalTex("Main Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_MainShaderTex("Main Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_MainSampleMode("Main Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_MainCoordMode("Main UV Mode", Float) = 0
		[StyledVector(9)]_MainCoordValue("Main UV Value", Vector) = (1,1,0,0)
		[HideInInspector]_main_coord_value("_main_coord_value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_MainColorMode("Main Color", Float) = 0
		[HDR]_MainColor("Main Color", Color) = (1,1,1,1)
		[HDR]_MainColorTwo("Main ColorB", Color) = (1,1,1,1)
		_MainAlphaClipValue("Main Alpha", Range( 0 , 1)) = 0.5
		_MainAlbedoValue("Main Albedo", Range( 0 , 1)) = 1
		_MainNormalValue("Main Normal", Range( -8 , 8)) = 1
		_MainMetallicValue("Main Metallic", Range( 0 , 1)) = 0
		_MainOcclusionValue("Main Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_MainMultiRemap("Main Multi Mask", Vector) = (0,0,0,0)
		_MainSmoothnessValue("Main Smoothness", Range( 0 , 1)) = 0
		[StyledSpace(10)]_MainEnd("[Main End ]", Float) = 1
		[StyledCategory(Layer Settings, true, 0, 10)]_LayerCategory("[ Layer Category ]", Float) = 1
		_SecondIntensityValue("Layer Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_SecondBakeMode("Layer Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_SecondAlbedoTex("Layer Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_SecondNormalTex("Layer Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_SecondShaderTex("Layer Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_SecondSampleMode("Layer Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondCoordMode("Layer UV Mode", Float) = 0
		[StyledVector(9)]_SecondCoordValue("Layer UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_SecondColorMode("Layer Color", Float) = 0
		[HDR]_SecondColor("Layer Color", Color) = (1,1,1,1)
		[HDR]_SecondColorTwo("Layer ColorB", Color) = (1,1,1,1)
		_SecondAlphaClipValue("Layer Alpha", Range( 0 , 1)) = 0.5
		_SecondAlbedoValue("Layer Albedo", Range( 0 , 1)) = 1
		_SecondNormalValue("Layer Normal", Range( -8 , 8)) = 1
		_SecondMetallicValue("Layer Metallic", Range( 0 , 1)) = 0
		_SecondOcclusionValue("Layer Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondMultiRemap("Layer Multi Mask", Vector) = (0,0,0,0)
		_SecondSmoothnessValue("Layer Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_SecondBlendIntensityValue("Layer Blend Intensity", Range( 0 , 1)) = 1
		_SecondBlendAlbedoValue("Layer Blend Albedos", Range( 0 , 1)) = 0
		_SecondBlendNormalValue("Layer Blend Normals", Range( 0 , 1)) = 0
		_SecondBlendShaderValue("Layer Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_SecondMaskTex("Layer Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_SecondMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_SecondMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_SecondMaskValue("Layer TexB Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_SecondMaskRemap("Layer TexB Mask", Vector) = (0,1,0,0)
		_SecondProjValue("Layer ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondProjRemap("Layer ProjY Mask", Vector) = (0,1,0,0)
		_SecondMeshValue("Layer Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_SecondMeshMode("Layer Mesh Mask", Float) = 2
		[StyledRemapSlider]_SecondMeshRemap("Layer Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_SecondBlendRemap("Layer Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_SecondElementMode("Use Coat Globals / Elements", Float) = 0
		[StyledSpace(10)]_LayerEnd("[ Layer End ]", Float) = 1
		[HideInInspector]_second_coord_value("_second_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_second_vert_mode("_second_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_second_mask_coord_value("_second_mask_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Detail Settings, true, 0, 10)]_DetailCategory("[ Detail Category ]", Float) = 1
		_ThirdIntensityValue("Detail Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_ThirdBakeMode("Detail Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_ThirdAlbedoTex("Detail Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_ThirdNormalTex("Detail Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_ThirdShaderTex("Detail Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_ThirdSampleMode("Detail Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdCoordMode("Detail UV Mode", Float) = 0
		[StyledVector(9)]_ThirdCoordValue("Detail UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_ThirdColorMode("Detail Color", Float) = 0
		[HDR]_ThirdColor("Detail Color", Color) = (1,1,1,1)
		[HDR]_ThirdColorTwo("Detail ColorB", Color) = (1,1,1,1)
		_ThirdAlphaClipValue("Detail Alpha", Range( 0 , 1)) = 0.5
		_ThirdAlbedoValue("Detail Albedo", Range( 0 , 1)) = 1
		_ThirdNormalValue("Detail Normal", Range( -8 , 8)) = 1
		_ThirdMetallicValue("Detail Metallic", Range( 0 , 1)) = 0
		_ThirdOcclusionValue("Detail Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdMultiRemap("Detail Multi Mask", Vector) = (0,0,0,0)
		_ThirdSmoothnessValue("Detail Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_ThirdBlendIntensityValue("Detail Blend Intensity", Range( 0 , 1)) = 1
		_ThirdBlendAlbedoValue("Detail Blend Albedos", Range( 0 , 1)) = 0
		_ThirdBlendNormalValue("Detail Blend Normals", Range( 0 , 1)) = 0
		_ThirdBlendShaderValue("Detail Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_ThirdMaskTex("Detail Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_ThirdMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_ThirdMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_ThirdMaskValue("Detail TexG Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_ThirdMaskRemap("Detail TexG Mask", Vector) = (0,1,0,0)
		_ThirdProjValue("Detail ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdProjRemap("Detail ProjY Mask", Vector) = (0,1,0,0)
		_ThirdMeshValue("Detail Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ThirdMeshMode("Detail Mesh Mask", Float) = 1
		[StyledRemapSlider]_ThirdMeshRemap("Detail Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_ThirdBlendRemap("Detail Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_ThirdElementMode("Use Coat Globals / Elements", Float) = 0
		[HideInInspector]_third_coord_value("_third_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_third_vert_mode("_third_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_third_mask_coord_value("_third_mask_coord_value", Vector) = (1,1,0,0)
		[StyledSpace(10)]_DetailEnd("[ Detail End ]", Float) = 1
		[StyledCategory(Occlusion Settings, true, 0, 10)]_OcclusionCategory("[ Occlusion Category ]", Float) = 1
		_OcclusionIntensityValue("Occlusion Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_OcclusionBakeMode("Occlusion Baking", Float) = 1
		[HDR]_OcclusionColorOne("Occlusion ColorA", Color) = (1,1,1,1)
		[HDR]_OcclusionColorTwo("Occlusion ColorB", Color) = (0.25,0.25,0.25,1)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)][Space(10)]_OcclusionMeshMode("Occlusion Mesh Mask", Float) = 1
		[StyledRemapSlider]_OcclusionMeshRemap("Occlusion Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_OcclusionEnd("[ Occlusion End ]", Float) = 1
		[HideInInspector]_occlusion_vert_mode("_occlusion_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Gradient Settings, true, 0, 10)]_GradientCategory("[ Gradient Category ]", Float) = 1
		_GradientIntensityValue("Gradient Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_GradientBakeMode("Gradient Baking", Float) = 1
		[HDR]_GradientColorOne("Gradient ColorA", Color) = (1,0.6135602,0,1)
		[HDR]_GradientColorTwo("Gradient ColorB", Color) = (0.754717,0.0389044,0.03203986,1)
		[Space(10)]_GradientMultiValue("Gradient Multi Mask", Range( 0 , 1)) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_GradientMeshMode("Gradient Mesh Mask", Float) = 3
		[StyledRemapSlider]_GradientMeshRemap("Gradient Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_GradientEnd("[ Gradient End ]", Float) = 1
		[HideInInspector]_gradient_vert_mode("_gradient_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Variation Settings, true, 0, 10)]_VariationCategory("[ Variation Category ]", Float) = 1
		[StyledMessage(Warning, The Variation feature is only available with The Visual Engine Core package., 0, 10)]_VariationLiteInfo("# Variation Lite Info", Float) = 0
		[StyledColoring]_VariationColoring("# Variation Coloring", Color) = (1,1,1,0.6)
		_VariationIntensityValue("Variation Intensity", Range( 0 , 1)) = 0
		[HDR]_VariationColorOne("Variation ColorA", Color) = (0.4573758,0.6226415,0.2144001,1)
		[HDR]_VariationColorTwo("Variation ColorB", Color) = (0.7450981,0.5238863,0.1098039,1)
		[Space(10)]_VariationMultiValue("Variation Multi Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_VariationNoiseRemap("Variation Noise Mask", Vector) = (0,1,0,0)
		_VariationNoiseTillingValue("Variation Noise Tilling", Range( 0 , 40)) = 1
		_VariationNoisePivotsValue1("Variation Noise Pivots", Range( 0 , 1)) = 0
		[StyledSpace(10)]_VariationEnd("[ Variation End ]", Float) = 1
		[StyledCategory(Tinting Settings, true, 0, 10)]_TintingCategory("[ Tinting Category ]", Float) = 1
		[StyledMessage(Warning, The Tinting feature is only available with The Visual Engine Core package., 0, 10)]_TintingLiteInfo("# Tinting Lite Info", Float) = 0
		[StyledColoring]_TintingColoring("# Tinting Coloring", Color) = (1,1,1,0.6)
		_TintingIntensityValue("Tinting Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_TintingBakeMode("Tinting Baking", Float) = 0
		_TintingGrayValue("Tinting Gray", Range( 0 , 1)) = 1
		[HDR][Gamma]_TintingColor("Tinting Color", Color) = (1,1,1,1)
		[StyledSpace(10)]_TintingSpace("[ Tinting Space ]", Float) = 1
		_TintingMultiValue("Tinting Multi Mask", Range( 0 , 1)) = 1
		_TintingLumaValue("Tinting Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_TintingLumaRemap("Tinting Luma Mask", Vector) = (0,1,0,0)
		_TintingMeshValue("Tinting Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_TintingMeshMode("Tinting Mesh Mask", Float) = 3
		[StyledRemapSlider]_TintingMeshRemap("Tinting Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_TintingBlendRemap("Tinting Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_TintingElementMode("Use Paint Globals / Elements", Float) = 1
		[StyledSpace(10)]_TintingEnd("[ Tinting End]", Float) = 1
		[StyledCategory(Dryness Settings, true, 0, 10)]_DrynessCategory("[ Dryness Category ]", Float) = 1
		[StyledMessage(Warning, The Dryness feature is only available with The Visual Engine Core package., 0, 10)]_DrynessLiteInfo("# Dryness Lite Info", Float) = 0
		[StyledColoring]_DrynessColoring("# Dryness Coloring", Color) = (1,1,1,0.6)
		_DrynessIntensityValue("Dryness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_DrynessBakeMode("Dryness Baking", Float) = 0
		_DrynessGrayValue("Dryness Gray", Range( 0 , 1)) = 1
		_DrynessShiftValue("Dryness Shift", Range( 0 , 1)) = 0
		[HDR][Gamma]_DrynessColor("Dryness Color", Color) = (1,0.7083712,0.495283,1)
		_DrynessSubsurfaceValue("Dryness Subsurface", Range( 0 , 1)) = 0.5
		_DrynessSmoothnessValue("Dryness Smoothness", Range( 0 , 1)) = 0.5
		[StyledSpace(10)]_DrynessSpace("[ Dryness Space ]", Float) = 1
		_DrynessMultiValue("Dryness Multi Mask", Range( 0 , 1)) = 1
		_DrynessLumaValue("Dryness Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_DrynessLumaRemap("Dryness Luma Mask", Vector) = (0,1,0,0)
		_DrynessMeshValue("Dryness Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_DrynessMeshMode("Dryness Mesh Mask", Float) = 3
		[StyledRemapSlider]_DrynessMeshRemap("Dryness Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_DrynessBlendRemap("Dryness Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_DrynessElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_DrynessEnd("[ Dryness End ]", Float) = 1
		[StyledCategory(Overlay Settings, true, 0, 10)]_OverlayCategory("[ Overlay Category ]", Float) = 1
		[StyledMessage(Warning, The Overlay Glitter feature is only available with The Visual Engine Core package., 0, 10)]_OverlayLiteInfo("# Overlay Lite Info", Float) = 0
		_OverlayIntensityValue("Overlay Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_OverlayBakeMode("Overlay Baking", Float) = 0
		[Enum(Off,0,On,1)]_OverlayTextureMode("Overlay Maps", Float) = 0
		[Space(10)][StyledTextureSingleLine]_OverlayAlbedoTex("Overlay Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_OverlayNormalTex("Overlay Normal", 2D) = "bump" {}
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochastic Triplanar,3)][Space(10)]_OverlaySampleMode("Overlay Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_OverlayCoordMode("Overlay UV Mode", Float) = 0
		[StyledVector(9)]_OverlayCoordValue("Overlay UV Value", Vector) = (1,1,0,0)
		[HDR]_OverlayColor("Overlay Color", Color) = (0.2815503,0.4009458,0.5377358,1)
		_OverlayNormalValue("Overlay Normal", Range( -8 , 8)) = 1
		_OverlaySubsurfaceValue("Overlay Subsurface", Range( 0 , 1)) = 0.5
		_OverlaySmoothnessValue("Overlay Smoothness", Range( 0 , 1)) = 0.5
		[StyledColoring]_OverlayColoringOn("# Overlay Coloring On", Color) = (1,1,1,0.6)
		[Space(10)][StyledTextureSingleLine]_OverlayGlitterTex("Overlay Glitter", 2D) = "black" {}
		[Space(10)]_OverlayGlitterIntensityValue("Overlay Glitter Intensity", Range( 0 , 1)) = 1
		[HDR]_OverlayGlitterColor("Overlay Glitter Color", Color) = (0.7215686,1.913725,2.996078,1)
		_OverlayGlitterTillingValue("Overlay Glitter Tilling", Range( 0 , 10)) = 2
		_OverlayGlitterDistValue("Overlay Glitter Fade", Range( 0 , 200)) = 100
		[StyledColoring]_OverlayColoringOff("# Overlay Coloring Off", Color) = (1,1,1,1)
		[StyledSpace(10)]_OverlaySpace("[ Overlay Space ]", Float) = 1
		[StyledTextureSingleLine]_OverlayMaskTex("Overlay Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)]_OverlayMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_OverlayMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_OverlayMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_OverlayMaskValue("Overlay TexB Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_OverlayMaskRemap("Overlay TexB Mask", Vector) = (0,1,0,0)
		_OverlayLumaValue("Overlay Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_OverlayLumaRemap("Overlay Luma Mask", Vector) = (0,1,0,0)
		_OverlayProjValue("Overlay ProjY Mask", Range( 0 , 1)) = 0.5
		[StyledRemapSlider]_OverlayProjRemap("Overlay ProjY Mask", Vector) = (0,1,0,0)
		_OverlayMeshValue("Overlay Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_OverlayMeshMode("Overlay Mesh Mask", Float) = 1
		[StyledRemapSlider]_OverlayMeshRemap("Overlay Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_OverlayBlendRemap1("Overlay Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_OverlayElementMode("Use Atmo Globals / Elements", Float) = 1
		[HideInInspector]_overlay_vert_mode("_overlay_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_overlay_coord_value("_overlay_coord_value", Vector) = (1,1,0,0)
		[StyledSpace(10)]_OverlayEnd("[ Overlay End ]", Float) = 1
		[HideInInspector]_overlay_mask_coord_value("_overlay_mask_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Wetness Settings, true, 0, 10)]_WetnessCategory("[ Wetness Category ]", Float) = 1
		[StyledMessage(Warning, The Wetness feature is only available with The Visual Engine Core package., 0, 10)]_WetnessLiteInfo("# Wetness Lite Info", Float) = 0
		[StyledColoring]_WetnessColoring("# Wetness Coloring", Color) = (1,1,1,0.6)
		_WetnessIntensityValue("Wetness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_WetnessBakeMode("Wetness Baking", Float) = 0
		_WetnessContrastValue("Wetness Contrast", Range( 0 , 1)) = 0.2
		_WetnessSmoothnessValue("Wetness Smoothness", Range( 0 , 1)) = 0.8
		[Space(10)]_WetnessWaterIntensityValue("Wetness Water Intensity", Range( 0 , 1)) = 0
		[HDR]_WetnessWaterColor("Wetness Water Color", Color) = (0.5420078,0.7924528,0.6068289,1)
		_WetnessWaterBaseValue("Wetness Water Base Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_WetnessWaterBlendRemap("Wetness Water Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledTextureSingleLine]_WetnessDropsTex("Wetness Drops", 2D) = "white" {}
		[Space(10)]_WetnessDropsIntensityValue("Wetness Drops Intensity", Range( 0 , 1)) = 1
		_WetnessDropsNormalValue("Wetness Drops Normal", Range( 0 , 1)) = 1
		_WetnessDropsTillingValue("Wetness Drops Tilling", Range( 0 , 10)) = 1
		_WetnessDropsDistValue("Wetness Drops Fade", Range( 0 , 40)) = 10
		[Space(10)][StyledToggle]_WetnessElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_WetnessEnd("[ Wetness End ]", Float) = 1
		[StyledCategory(Cutout Settings, true, 0, 10)]_CutoutCategory("[ Cutout Category ]", Float) = 1
		[StyledMessage(Warning, The Cutout feature is only available with The Visual Engine Core package., 0, 10)]_CutoutLiteInfo("# Cutout Lite Info", Float) = 0
		[StyledColoring]_CutoutColoring("# Cutout Coloring", Color) = (1,1,1,0.6)
		_CutoutIntensityValue("Cutout Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_CutoutBakeMode("Cutout Baking", Float) = 0
		[StyledSpace(10)]_CutoutSpace("[ Cutout Space ]", Float) = 1
		_CutoutMultiValue("Cutout Multi Mask", Range( 0 , 1)) = 1
		_CutoutAlphaValue("Cutout Alpha Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_CutoutMeshMode("Cutout Mesh Mask", Float) = 0
		_CutoutMeshValue("Cutout Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_CutoutMeshRemap("Cutout Mesh Mask", Vector) = (0,1,0,0)
		_CutoutNoiseValue("Cutout Noise Mask", Range( 0 , 1)) = 1
		_CutoutNoiseTillingValue("Cutout Noise Tilling", Range( 0 , 40)) = 1
		[Space(10)][StyledToggle]_CutoutElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_CutoutEnd("[ Cutout End ]", Float) = 1
		[StyledCategory(Dither Settings, true, 0, 10)]_DitherCategory("[ Dither Category ]", Float) = 1
		[StyledMessage(Warning, The Dither feature is only available with The Visual Engine Core package., 0, 10)]_DitherLiteInfo("# Dither Lite Info", Float) = 0
		[StyledColoring]_DitherColoring("# Dither Coloring", Color) = (1,1,1,0.6)
		_DitherConstantValue("Dither Constant", Range( 0 , 1)) = 0
		_DitherDistanceValue("Dither Distance", Range( 0 , 1)) = 0
		_DitherDistanceMinValue("Dither Distance Start", Range( 0 , 1000)) = 0
		_DitherDistanceMaxValue("Dither Distance Limit", Range( 0 , 1000)) = 0
		_DitherProximityValue("Dither Proximity", Range( 0 , 1)) = 0
		_DitherProximityDistValue("Dither Proximity Fade", Range( 0 , 40)) = 1
		_DitherGlancingValue("Dither Glancing", Range( 0 , 1)) = 0
		_DitherGlancingAngleValue("Dither Glanging Angle", Range( 0 , 8)) = 1
		[Space(10)]_DitherMultiValue("Dither Multi Mask", Range( 0 , 1)) = 1
		_DitherNoiseTillingValue("Dither Noise Tilling", Range( 0 , 40)) = 1
		[StyledSpace(10)]_DitherEnd("[ Dither End ]", Float) = 1
		[StyledCategory(Emissive Settings, true, 0, 10)]_EmissiveCategory("[ Emissive Category ]", Float) = 1
		_EmissiveIntensityValue("Emissive Intensity", Range( 0 , 1)) = 0
		[Enum(None,0,Any,1,Baked,2,Realtime,3)]_EmissiveFlagMode("Emissive GI Mode", Float) = 0
		[HDR]_EmissiveColor("Emissive Color", Color) = (1,1,1,1)
		[Enum(Nits,0,EV100,1)]_EmissivePowerMode("Emissive Power", Float) = 0
		_EmissivePowerValue("Emissive Power", Float) = 1
		[Space(10)][StyledTextureSingleLine]_EmissiveMaskTex("Emissive Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)]_EmissiveSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_EmissiveCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_EmissiveCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_EmissiveMaskValue("Emissive TexR Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_EmissiveMaskRemap("Emissive TexR Mask", Vector) = (0,1,0,0)
		_EmissiveMeshValue("Emissive Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_EmissiveMeshMode("Emissive Mesh Mask", Float) = 0
		[StyledRemapSlider]_EmissiveMeshRemap("Emissive Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_EmissiveElementMode("Use Glow Globals / Elements", Float) = 0
		[StyledSpace(10)]_EmissiveEnd("[ Emissive End ]", Float) = 1
		[HideInInspector]_emissive_power_value("_emissive_power_value", Float) = 1
		[HideInInspector]_emissive_vert_mode("_emissive_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_emissive_coord_value("_emissive_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Subsurface Settings, true, 0, 10)]_SubsurfaceCategory("[ Subsurface Category ]", Float) = 1
		[DiffusionProfile]_SubsurfaceDiffusion("Subsurface Diffusion", Float) = 0
		[HideInInspector]_SubsurfaceDiffusion_Asset("Subsurface Diffusion", Vector) = (0,0,0,0)
		[StyledSpace(10)]_SubsurfaceSpace("# SubsurfaceSpace", Float) = 0
		_SubsurfaceIntensityValue("Subsurface Intensity", Range( 0 , 1)) = 0
		[HDR]_SubsurfaceColor("Subsurface Color", Color) = (1,1,1,1)
		_SubsurfaceScatteringValue("Subsurface Power", Range( 0 , 16)) = 2
		_SubsurfaceAngleValue("Subsurface Angle", Range( 1 , 16)) = 8
		_SubsurfaceDirectValue("Subsurface Direct", Range( 0 , 1)) = 1
		_SubsurfaceNormalValue("Subsurface Normal", Range( 0 , 1)) = 0
		_SubsurfaceAmbientValue("Subsurface Ambient", Range( 0 , 1)) = 0.2
		_SubsurfaceShadowValue("Subsurface Shadow", Range( 0 , 1)) = 1
		[Space(10)]_SubsurfaceMultiValue("Subsurface Multi Mask", Range( 0 , 1)) = 1
		[Space(10)][StyledToggle]_SubsurfaceElementMode("Use Glow Globals / Elements", Float) = 0
		[StyledSpace(10)]_SubsurfaceEnd("[ Subsurface End ]", Float) = 1
		[StyledCategory(Perspective Settings, true, 0, 10)]_PerspectiveCategory("[ Perspective Category ]", Float) = 1
		[StyledMessage(Warning, The Perspective feature is only available with The Visual Engine Core package., 0, 10)]_PerspectiveLiteInfo("# Perspective Lite Info", Float) = 0
		[StyledColoring]_PerspectiveColoring("# Perspective Coloring", Color) = (1,1,1,0.6)
		_PerspectiveIntensityValue("Perspective Intensity", Range( 0 , 8)) = 0
		_PerspectiveAngleValue("Perspective Angle", Range( 0 , 8)) = 1
		[StyledSpace(10)]_PerspectiveEnd("[ Perspective End ]", Float) = 1
		[StyledCategory(Size Fade Settings, true, 0, 10)]_SizeFadeCategory("[ Size Fade Category ]", Float) = 1
		[StyledMessage(Warning, The Size Fade feature is only available with The Visual Engine Core package., 0, 10)]_SizeFadeLiteInfo("# SizeFade Lite Info", Float) = 0
		[StyledColoring]_SizeFadeColoring("# SizeFade Coloring", Color) = (1,1,1,0.6)
		_SizeFadeIntensityValue("Size Fade Intensity", Range( 0 , 1)) = 0
		[Enum(All Axis,0,Y Axis,1)]_SizeFadeScaleMode("Size Fade Mode", Float) = 0
		_SizeFadeScaleValue("Size Fade Scale", Range( 0 , 1)) = 1
		_SizeFadeDistMinValue("Size Fade Start", Range( 0 , 1000)) = 0
		_SizeFadeDistMaxValue("Size Fade Limit", Range( 0 , 1000)) = 0
		[Space(10)][StyledToggle]_SizeFadeElementMode("Use Form Globals / Elements", Float) = 0
		[StyledSpace(10)]_SizeFadeEnd("[ Size Fade End ]", Float) = 1
		[StyledCategory(Motion Settings, true, 0, 10)]_MotionWindCategory("[ Motion Wind Category ]", Float) = 1
		[NoScaleOffset][StyledTextureSingleLine]_MotionNoiseTex("Motion Texture", 2D) = "white" {}
		[Space(10)]_MotionHighlightValue("Motion Waves Intensity", Range( 0 , 1)) = 0
		[HDR]_MotionHighlightColor("Motion Waves Color", Color) = (1,1,1,1)
		[Space(10)]_MotionBaseIntensityValue("Motion LayerA Intensity", Range( 0 , 8)) = 0
		_MotionBasePivotValue("Motion LayerA Pivots", Range( 0 , 1)) = 0.8
		_MotionBasePhaseValue("Motion LayerA Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionBaseMaskMode("Motion LayerA Anim Mask", Float) = 3
		[StyledRemapSlider]_MotionBaseMaskRemap("Motion LayerA Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionSmallIntensityValue("Motion LayerB Intensity", Range( 0 , 8)) = 0
		_MotionSmallPivotValue("Motion LayerB Pivots", Range( 0 , 1)) = 0.6
		_MotionSmallPhaseValue("Motion LayerB Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionSmallMaskMode("Motion LayerB Anim Mask", Float) = 1
		[StyledRemapSlider]_MotionSmallMaskRemap("Motion LayerB Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionTinyIntensityValue("Motion Flutter Intensity", Range( 0 , 8)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionTinyMaskMode("Motion Flutter Anim Mask", Float) = 2
		[StyledRemapSlider]_MotionTinyMaskRemap("Motion Flutter Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionIntensityValue("Motion Wind Intensity", Range( 0 , 1)) = 1
		_MotionDelayValue("Motion Wind Delay", Range( 0 , 1)) = 0
		_MotionTillingValue("Motion Wind Tilling", Range( 0 , 40)) = 5
		_MotionDistValue("Motion Wind Flutter Fade", Range( 0 , 200)) = 100
		_MotionFrontValue("Motion Wind Planar Mask", Range( 0 , 1)) = 0.5
		[Space(10)][StyledToggle]_MotionWindElementMode("Use Wind Elements", Float) = 0
		[StyledSpace(10)]_MotionWindEnd("[ Motion Wind End ]", Float) = 1
		[StyledCategory(Interaction Settings, true, 0, 10)]_MotionInteractionCategory("[ Motion Interaction Category ]", Float) = 1
		[StyledMessage(Warning, The Interaction feature is only available with The Visual Engine Core package., 0, 10)]_InteractionLiteInfo("# Interaction Lite Info", Float) = 0
		[StyledColoring]_InteractionColoring("# Interaction Coloring", Color) = (1,1,1,0.6)
		_MotionPushIntensityValue("Interaction Intensity", Range( 0 , 8)) = 0
		_MotionPushPivotValue("Interaction Pivots", Range( 0 , 1)) = 1
		_MotionPushPhaseValue("Interaction Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionPushMaskMode("Interaction Anim Mask", Float) = 3
		[StyledRemapSlider]_MotionPushMaskRemap("Interaction Anim Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_MotionPushElementMode("Use Push Elements", Float) = 1
		[HideInInspector]_motion_base_mask_mode("_motion_base_mask_mode", Float) = 0
		[HideInInspector]_motion_base_vert_mode("_motion_base_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_base_proc_mode("_motion_base_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_mask_mode("_motion_small_mask_mode", Float) = 0
		[HideInInspector]_motion_small_vert_mode("_motion_small_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_proc_mode("_motion_small_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_mask_mode("_motion_tiny_mask_mode", Float) = 0
		[HideInInspector]_motion_tiny_vert_mode("_motion_tiny_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_proc_mode("_motion_tiny_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_global_wind_layer_value("_global_wind_layer_value", Float) = 0
		[StyledSpace(10)]_MotionInteractionEnd("[ Motion Interaction End ]", Float) = 1
		[StyledCategory(Normal Settings, true, 0, 10)]_NormalCategory("[ Normal Category ]", Float) = 1
		[StyledMessage(Warning, Computing normals from vertex transform is only available with The Visual Engine Core package., 0, 10)]_NormalLiteInfo("# Normal Lite Info", Float) = 0
		_NormalFlattenValue("Normal Flattening", Range( 0 , 1)) = 0
		_NormalSphereValue("Normal Spherical", Range( 0 , 1)) = 0
		[StyledVector(18)]_NormalSphereOffsetValue("Normal Spherical Offset", Vector) = (0,0,0,0)
		[StyledColoring]_NormalColoringStart("# Normal Coloring Start", Color) = (1,1,1,0.6)
		_NormalComputeValue("Normal Compute", Range( 0 , 1)) = 0
		[StyledColoring]_NormalColoringEnd("# Normal Coloring End", Color) = (1,1,1,1)
		[Space(10)]_NormalMeshValue("Normal Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_NormalMeshMode("Normal Mesh Mask", Float) = 2
		[StyledRemapSlider]_NormalMeshRemap("Normal Mesh Mask", Vector) = (0,1,0,0)
		[HideInInspector]_normal_vert_mode("_normal_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_NormalEnd("[ Normal End ]", Float) = 1
		[HideInInspector]_render_cull("_render_cull", Float) = 0
		[HideInInspector]_render_src("_render_src", Float) = 5
		[HideInInspector]_render_dst("_render_dst", Float) = 10
		[HideInInspector]_render_zw("_render_zw", Float) = 1
		[HideInInspector]_render_coverage("_render_coverage", Float) = 0
		[HideInInspector]_IsLiteShader("_IsLiteShader", Float) = 1
		[HideInInspector]_IsGeneralShader("_IsGeneralShader", Float) = 1
		[HideInInspector]_IsSubsurfaceShader("_IsSubsurfaceShader", Float) = 1
		[HideInInspector] _texcoord( "", 2D ) = "white" {}

		//_TransmissionShadow( "Transmission Shadow", Range( 0, 1 ) ) = 0.5
		_TransStrength( "Strength", Range( 0, 50 ) ) = 1
		_TransNormal( "Normal Distortion", Range( 0, 1 ) ) = 0.5
		_TransScattering( "Scattering", Range( 1, 50 ) ) = 2
		_TransDirect( "Direct", Range( 0, 1 ) ) = 0.9
		_TransAmbient( "Ambient", Range( 0, 1 ) ) = 0.1
		_TransShadow( "Shadow", Range( 0, 1 ) ) = 0.5
		//_TessPhongStrength( "Tess Phong Strength", Range( 0, 1 ) ) = 0.5
		//_TessValue( "Tess Max Tessellation", Range( 1, 32 ) ) = 16
		//_TessMin( "Tess Min Distance", Float ) = 10
		//_TessMax( "Tess Max Distance", Float ) = 25
		//_TessEdgeLength ( "Tess Edge length", Range( 2, 50 ) ) = 16
		//_TessMaxDisp( "Tess Max Displacement", Float ) = 25
		//[ToggleOff] _SpecularHighlights("Specular Highlights", Float) = 1.0
		//[ToggleOff] _GlossyReflections("Reflections", Float) = 1.0
	}

	SubShader
	{
		
		Tags { "RenderType"="Opaque" "Queue"="Geometry" "DisableBatching"="False" }
	LOD 0

		Cull [_render_cull]
		AlphaToMask Off
		ZWrite [_render_zw]
		ZTest LEqual
		ColorMask RGBA
		
		Blend Off
		

		CGINCLUDE
		#pragma target 4.5

		float4 FixedTess( float tessValue )
		{
			return tessValue;
		}

		float CalcDistanceTessFactor (float4 vertex, float minDist, float maxDist, float tess, float4x4 o2w, float3 cameraPos )
		{
			float3 wpos = mul(o2w,vertex).xyz;
			float dist = distance (wpos, cameraPos);
			float f = clamp(1.0 - (dist - minDist) / (maxDist - minDist), 0.01, 1.0) * tess;
			return f;
		}

		float4 CalcTriEdgeTessFactors (float3 triVertexFactors)
		{
			float4 tess;
			tess.x = 0.5 * (triVertexFactors.y + triVertexFactors.z);
			tess.y = 0.5 * (triVertexFactors.x + triVertexFactors.z);
			tess.z = 0.5 * (triVertexFactors.x + triVertexFactors.y);
			tess.w = (triVertexFactors.x + triVertexFactors.y + triVertexFactors.z) / 3.0f;
			return tess;
		}

		float CalcEdgeTessFactor (float3 wpos0, float3 wpos1, float edgeLen, float3 cameraPos, float4 scParams )
		{
			float dist = distance (0.5 * (wpos0+wpos1), cameraPos);
			float len = distance(wpos0, wpos1);
			float f = max(len * scParams.y / (edgeLen * dist), 1.0);
			return f;
		}

		float DistanceFromPlane (float3 pos, float4 plane)
		{
			float d = dot (float4(pos,1.0f), plane);
			return d;
		}

		bool WorldViewFrustumCull (float3 wpos0, float3 wpos1, float3 wpos2, float cullEps, float4 planes[6] )
		{
			float4 planeTest;
			planeTest.x = (( DistanceFromPlane(wpos0, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[0]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.y = (( DistanceFromPlane(wpos0, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[1]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.z = (( DistanceFromPlane(wpos0, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[2]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.w = (( DistanceFromPlane(wpos0, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos1, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlane(wpos2, planes[3]) > -cullEps) ? 1.0f : 0.0f );
			return !all (planeTest);
		}

		float4 DistanceBasedTess( float4 v0, float4 v1, float4 v2, float tess, float minDist, float maxDist, float4x4 o2w, float3 cameraPos )
		{
			float3 f;
			f.x = CalcDistanceTessFactor (v0,minDist,maxDist,tess,o2w,cameraPos);
			f.y = CalcDistanceTessFactor (v1,minDist,maxDist,tess,o2w,cameraPos);
			f.z = CalcDistanceTessFactor (v2,minDist,maxDist,tess,o2w,cameraPos);

			return CalcTriEdgeTessFactors (f);
		}

		float4 EdgeLengthBasedTess( float4 v0, float4 v1, float4 v2, float edgeLength, float4x4 o2w, float3 cameraPos, float4 scParams )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;
			tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
			tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
			tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
			tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			return tess;
		}

		float4 EdgeLengthBasedTessCull( float4 v0, float4 v1, float4 v2, float edgeLength, float maxDisplacement, float4x4 o2w, float3 cameraPos, float4 scParams, float4 planes[6] )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;

			if (WorldViewFrustumCull(pos0, pos1, pos2, maxDisplacement, planes))
			{
				tess = 0.0f;
			}
			else
			{
				tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
				tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
				tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
				tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			}
			return tess;
		}
		ENDCG

		
		Pass
		{
			
			Name "ForwardBase"
			Tags { "LightMode"="ForwardBase" }

			Blend [_render_src] [_render_dst]

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma shader_feature_local_fragment _ _SPECULARHIGHLIGHTS_OFF
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define ASE_TRANSLUCENCY 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _SPECULAR_SETUP 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma multi_compile_fwdbase
			#ifndef UNITY_PASS_FORWARDBASE
				#define UNITY_PASS_FORWARDBASE
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "AutoLight.cginc"

			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#if defined(LIGHTMAP_ON) || (!defined(LIGHTMAP_ON) && SHADER_TARGET >= 30)
					float4 lmap : TEXCOORD0;
				#endif
				#if !defined(LIGHTMAP_ON) && UNITY_SHOULD_SAMPLE_SH
					half3 sh : TEXCOORD1;
				#endif
				#if defined(UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS) && UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHTING_COORDS(2,3)
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_SHADOW_COORDS(2)
					#else
						SHADOW_COORDS(2)
					#endif
				#endif
				#ifdef ASE_FOG
					UNITY_FOG_COORDS(4)
				#endif
				float4 tSpace0 : TEXCOORD5;
				float4 tSpace1 : TEXCOORD6;
				float4 tSpace2 : TEXCOORD7;
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 screenPos : TEXCOORD8;
				#endif
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				float4 ase_texcoord12 : TEXCOORD12;
				float4 ase_color : COLOR;
				float4 ase_texcoord13 : TEXCOORD13;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half4 _OverlayColoringOn;
			uniform half4 _OverlayColoringOff;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTex);
			SamplerState sampler_OverlayGlitterTex;
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterIntensityValue;
			uniform half _OverlayLiteInfo;
			uniform half4 _OverlayGlitterColor;
			uniform half _NormalLiteInfo;
			uniform half4 _NormalColoringStart;
			uniform half4 _NormalColoringEnd;
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceSpace;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			uniform half _RenderBakeGI;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderPriority;
			uniform half _RenderQueue;
			uniform half _RenderMotion;
			uniform half _RenderClip;
			uniform half _RenderShadow;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderFilter;
			uniform half _render_src;
			uniform half _render_cull;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsLiteShader;
			uniform half _IsSubsurfaceShader;
			uniform half _IsGeneralShader;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _NormalComputeValue;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionWindElementMode;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _InteractionLiteInfo;
			uniform half4 _InteractionColoring;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _MotionPushElementMode;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half _motion_small_mask_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			SamplerState sampler_Linear_Repeat;
			uniform half _MotionIntensityValue;
			uniform half _global_wind_layer_value;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			SamplerState sampler_Linear_Clamp;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_RenderNearCoords;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_WindParams;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half _motion_tiny_mask_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionDistValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half _motion_base_mask_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionDelayValue;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half4 _normal_vert_mode;
			uniform half4 _NormalMeshRemap;
			uniform half _NormalMeshValue;
			uniform half _NormalMeshMode;
			uniform half _DisableSRPBatcher;
			uniform half _VariationLiteInfo;
			uniform half4 _VariationColoring;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _VariationIntensityValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationMultiValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationNoisePivotsValue1;
			uniform half _VariationNoiseTillingValue;
			uniform half _TintingLiteInfo;
			uniform half4 _TintingColoring;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _TintingElementMode;
			uniform half _TintingIntensityValue;
			uniform float4 _TintingColor;
			uniform half _TintingGrayValue;
			uniform half _TintingMultiValue;
			uniform half _TintingLumaValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingMeshMode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half4 _TintingBlendRemap;
			uniform half _DrynessLiteInfo;
			uniform half4 _DrynessColoring;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _DrynessIntensityValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half _DrynessMultiValue;
			uniform half _DrynessLumaValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half4 _DrynessBlendRemap;
			uniform half _WetnessLiteInfo;
			uniform half4 _WetnessColoring;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _WetnessIntensityValue;
			uniform half _WetnessContrastValue;
			uniform half _WetnessSmoothnessValue;
			uniform half _WetnessWaterIntensityValue;
			uniform half4 _WetnessWaterColor;
			uniform half _WetnessWaterBaseValue;
			uniform half4 _WetnessWaterBlendRemap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTex);
			uniform float4 _WetnessDropsTex_ST;
			SamplerState sampler_WetnessDropsTex;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsDistValue;
			uniform half _CutoutLiteInfo;
			uniform half4 _CutoutColoring;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutSpace;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutMultiValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half4 _CutoutMeshRemap;
			uniform half _DitherLiteInfo;
			uniform half4 _DitherColoring;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityValue;
			uniform half _DitherProximityDistValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherDistanceValue;
			uniform half _DitherDistanceMaxValue;
			uniform half _DitherDistanceMinValue;
			uniform half _DitherMultiValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _PerspectiveLiteInfo;
			uniform half4 _PerspectiveColoring;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeLiteInfo;
			uniform half4 _SizeFadeColoring;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeScaleValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform float4 _OverlayGlitterTex_ST;
			uniform half _OverlayGlitterDistValue;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			SamplerState sampler_Point_Repeat;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half _GlobalLiteInfo;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half4 TVE_CoatParams;
			uniform half4 TVE_PaintParams;
			uniform half4 TVE_GlowParams;
			uniform half4 TVE_AtmoParams;
			uniform half4 TVE_FormParams;
			uniform half4 TVE_PushParams;
			uniform half TVE_IsEnabled;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThirdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThirdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half _GradientMultiValue;
			uniform half3 _motion_highlight_color;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			uniform half4 _OverlayBlendRemap1;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 _render_normal;
			uniform half _RenderSpecular;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g170515 = (TVEModelData)0;
				float In_Dummy16_g170515 = 0.0;
				TVEModelData Data16_g170498 = (TVEModelData)0;
				half Dummy1575_g170496 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170498 = Dummy1575_g170496;
				TVEModelData Data16_g170475 = (TVEModelData)0;
				float In_Dummy16_g170475 = 0.0;
				TVEModelData Data16_g170286 = (TVEModelData)0;
				half4 Dummy181_g170277 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g170286 = Dummy181_g170277.r;
				TVEModelData Data16_g170225 = (TVEModelData)0;
				float In_Dummy16_g170225 = 0.0;
				TVEModelData Data16_g170158 = (TVEModelData)0;
				half Dummy207_g170143 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g170158 = Dummy207_g170143;
				half3 PositionOS131_g170143 = v.vertex.xyz;
				float3 In_PositionOS16_g170158 = PositionOS131_g170143;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g170143 = ase_worldPos;
				half3 PositionWS122_g170143 = vertexToFrag73_g170143;
				float3 In_PositionWS16_g170158 = PositionWS122_g170143;
				float4x4 break19_g170145 = unity_ObjectToWorld;
				float3 appendResult20_g170145 = (float3(break19_g170145[ 0 ][ 3 ] , break19_g170145[ 1 ][ 3 ] , break19_g170145[ 2 ][ 3 ]));
				half3 ObjectData20_g170147 = appendResult20_g170145;
				half3 WorldData19_g170147 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170147 = WorldData19_g170147;
				#else
				float3 staticSwitch14_g170147 = ObjectData20_g170147;
				#endif
				float3 temp_output_124_0_g170145 = staticSwitch14_g170147;
				float3 temp_output_239_7_g170143 = temp_output_124_0_g170145;
				float4x4 break19_g170149 = unity_ObjectToWorld;
				float3 appendResult20_g170149 = (float3(break19_g170149[ 0 ][ 3 ] , break19_g170149[ 1 ][ 3 ] , break19_g170149[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170153 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g170143 = PositionOS131_g170143;
				float3 appendResult234_g170143 = (float3(break233_g170143.x , 0.0 , break233_g170143.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170143 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170143 = appendResult60_g170153;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170143 = appendResult234_g170143;
				#else
				float3 staticSwitch229_g170143 = _Vector0;
				#endif
				half3 PivotOS149_g170143 = staticSwitch229_g170143;
				float3 temp_output_122_0_g170149 = PivotOS149_g170143;
				float3 PivotsOnly105_g170149 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g170149 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g170151 = ( appendResult20_g170149 + PivotsOnly105_g170149 );
				half3 WorldData19_g170151 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170151 = WorldData19_g170151;
				#else
				float3 staticSwitch14_g170151 = ObjectData20_g170151;
				#endif
				float3 temp_output_124_0_g170149 = staticSwitch14_g170151;
				float3 temp_output_237_7_g170143 = temp_output_124_0_g170149;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170143 = temp_output_239_7_g170143;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170143 = temp_output_237_7_g170143;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170143 = temp_output_237_7_g170143;
				#else
				float3 staticSwitch236_g170143 = temp_output_239_7_g170143;
				#endif
				float3 vertexToFrag76_g170143 = staticSwitch236_g170143;
				half3 PivotWS121_g170143 = vertexToFrag76_g170143;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170143 = ( PositionWS122_g170143 - PivotWS121_g170143 );
				#else
				float3 staticSwitch204_g170143 = PositionWS122_g170143;
				#endif
				half3 PositionWO132_g170143 = ( staticSwitch204_g170143 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170158 = PositionWO132_g170143;
				float3 In_PositionRawOS16_g170158 = PositionOS131_g170143;
				float3 In_PositionAddOS16_g170158 = float3( 0,0,0 );
				float3 In_PivotOS16_g170158 = PivotOS149_g170143;
				float3 In_PivotWS16_g170158 = PivotWS121_g170143;
				half3 PivotWO133_g170143 = ( PivotWS121_g170143 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170158 = PivotWO133_g170143;
				half3 NormalOS134_g170143 = v.normal;
				float3 In_NormalOS16_g170158 = NormalOS134_g170143;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170143 = normalizedWorldNormal;
				float3 In_NormalWS16_g170158 = Normal_WS95_g170143;
				float3 In_NormalRawOS16_g170158 = NormalOS134_g170143;
				float3 objToWorldDir298_g170143 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g170143 = objToWorldDir298_g170143;
				float3 In_NormalRawWS16_g170158 = Normal_RawWS136_g170143;
				half4 TangentlOS153_g170143 = v.tangent;
				float4 In_TangentOS16_g170158 = TangentlOS153_g170143;
				float3 normalizeResult296_g170143 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170143 ) );
				half3 ViewDirWS169_g170143 = normalizeResult296_g170143;
				float3 In_ViewDirWS16_g170158 = ViewDirWS169_g170143;
				half4 VertexMasks171_g170143 = v.ase_color;
				float4 In_VertexData16_g170158 = VertexMasks171_g170143;
				float4 break33_g170156 = _object_phase_mode;
				float temp_output_30_0_g170156 = ( v.ase_color.r * break33_g170156.x );
				float temp_output_29_0_g170156 = ( v.ase_color.g * break33_g170156.y );
				float temp_output_31_0_g170156 = ( v.ase_color.b * break33_g170156.z );
				float temp_output_28_0_g170156 = ( temp_output_30_0_g170156 + temp_output_29_0_g170156 + temp_output_31_0_g170156 + ( v.ase_color.a * break33_g170156.w ) );
				float3 break243_g170143 = PivotWO133_g170143;
				float temp_output_315_0_g170143 = (frac( ( temp_output_28_0_g170156 + ( break243_g170143.x + break243_g170143.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g170143 = (float4(1.0 , 1.0 , temp_output_315_0_g170143 , 1.0));
				half4 MotionMasks176_g170143 = appendResult177_g170143;
				float4 In_MotionData16_g170158 = MotionMasks176_g170143;
				half Object_HeightValue267_g170143 = _ObjectHeightValue;
				half Object_RadiusValue268_g170143 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170143 = saturate( ( (PositionOS131_g170143).y / Object_HeightValue267_g170143 ) );
				half Bounds_SphereMask282_g170143 = saturate( ( length( PositionOS131_g170143 ) / max( Object_HeightValue267_g170143 , Object_RadiusValue268_g170143 ) ) );
				float4 appendResult253_g170143 = (float4(Object_HeightValue267_g170143 , Object_RadiusValue268_g170143 , Bounds_HeightMask274_g170143 , Bounds_SphereMask282_g170143));
				half4 BoundsData254_g170143 = appendResult253_g170143;
				float4 In_BoundsData16_g170158 = BoundsData254_g170143;
				float4 In_RotationData16_g170158 = float4( 0,0,0,0 );
				Data16_g170158.Dummy = In_Dummy16_g170158;
				Data16_g170158.PositionOS = In_PositionOS16_g170158;
				Data16_g170158.PositionWS = In_PositionWS16_g170158;
				Data16_g170158.PositionWO = In_PositionWO16_g170158;
				Data16_g170158.PositionRawOS = In_PositionRawOS16_g170158;
				Data16_g170158.PositionAddOS = In_PositionAddOS16_g170158;
				Data16_g170158.PivotOS = In_PivotOS16_g170158;
				Data16_g170158.PivotWS = In_PivotWS16_g170158;
				Data16_g170158.PivotWO = In_PivotWO16_g170158;
				Data16_g170158.NormalOS = In_NormalOS16_g170158;
				Data16_g170158.NormalWS = In_NormalWS16_g170158;
				Data16_g170158.NormalRawOS = In_NormalRawOS16_g170158;
				Data16_g170158.NormalRawWS = In_NormalRawWS16_g170158;
				Data16_g170158.TangentOS = In_TangentOS16_g170158;
				Data16_g170158.ViewDirWS = In_ViewDirWS16_g170158;
				Data16_g170158.VertexData = In_VertexData16_g170158;
				Data16_g170158.MotionData = In_MotionData16_g170158;
				Data16_g170158.BoundsData = In_BoundsData16_g170158;
				Data16_g170158.RotationData = In_RotationData16_g170158;
				TVEModelData Data15_g170226 = Data16_g170158;
				float Out_Dummy15_g170226 = 0;
				float3 Out_PositionOS15_g170226 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170226 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170226 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170226 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170226 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170226 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170226 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170226 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170226 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170226 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170226 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170226 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170226 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170226 = float3( 0,0,0 );
				float4 Out_VertexData15_g170226 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170226 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170226 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170226 = float4( 0,0,0,0 );
				Out_Dummy15_g170226 = Data15_g170226.Dummy;
				Out_PositionOS15_g170226 = Data15_g170226.PositionOS;
				Out_PositionWS15_g170226 = Data15_g170226.PositionWS;
				Out_PositionWO15_g170226 = Data15_g170226.PositionWO;
				Out_PositionRawOS15_g170226 = Data15_g170226.PositionRawOS;
				Out_PositionAddOS15_g170226 = Data15_g170226.PositionAddOS;
				Out_PivotOS15_g170226 = Data15_g170226.PivotOS;
				Out_PivotWS15_g170226 = Data15_g170226.PivotWS;
				Out_PivotWO15_g170226 = Data15_g170226.PivotWO;
				Out_NormalOS15_g170226 = Data15_g170226.NormalOS;
				Out_NormalWS15_g170226 = Data15_g170226.NormalWS;
				Out_NormalRawOS15_g170226 = Data15_g170226.NormalRawOS;
				Out_NormalRawWS15_g170226 = Data15_g170226.NormalRawWS;
				Out_TangentOS15_g170226 = Data15_g170226.TangentOS;
				Out_ViewDirWS15_g170226 = Data15_g170226.ViewDirWS;
				Out_VertexData15_g170226 = Data15_g170226.VertexData;
				Out_MotionData15_g170226 = Data15_g170226.MotionData;
				Out_BoundsData15_g170226 = Data15_g170226.BoundsData;
				Out_RotationData15_g170226 = Data15_g170226.RotationData;
				float3 temp_output_218_24_g170224 = Out_PivotOS15_g170226;
				float3 In_PositionOS16_g170225 = ( Out_PositionOS15_g170226 - temp_output_218_24_g170224 );
				float3 In_PositionWS16_g170225 = Out_PositionWS15_g170226;
				float3 In_PositionWO16_g170225 = Out_PositionWO15_g170226;
				float3 In_PositionRawOS16_g170225 = Out_PositionRawOS15_g170226;
				float3 In_PositionAddOS16_g170225 = Out_PositionAddOS15_g170226;
				float3 In_PivotOS16_g170225 = temp_output_218_24_g170224;
				float3 In_PivotWS16_g170225 = Out_PivotWS15_g170226;
				float3 In_PivotWO16_g170225 = Out_PivotWO15_g170226;
				float3 In_NormalOS16_g170225 = Out_NormalOS15_g170226;
				float3 In_NormalWS16_g170225 = Out_NormalWS15_g170226;
				float3 In_NormalRawOS16_g170225 = Out_NormalRawOS15_g170226;
				float3 In_NormalRawWS16_g170225 = Out_NormalRawWS15_g170226;
				float4 In_TangentOS16_g170225 = Out_TangentOS15_g170226;
				float3 In_ViewDirWS16_g170225 = Out_ViewDirWS15_g170226;
				float4 In_VertexData16_g170225 = Out_VertexData15_g170226;
				float4 In_MotionData16_g170225 = Out_MotionData15_g170226;
				float4 In_BoundsData16_g170225 = Out_BoundsData15_g170226;
				float4 In_RotationData16_g170225 = Out_RotationData15_g170226;
				Data16_g170225.Dummy = In_Dummy16_g170225;
				Data16_g170225.PositionOS = In_PositionOS16_g170225;
				Data16_g170225.PositionWS = In_PositionWS16_g170225;
				Data16_g170225.PositionWO = In_PositionWO16_g170225;
				Data16_g170225.PositionRawOS = In_PositionRawOS16_g170225;
				Data16_g170225.PositionAddOS = In_PositionAddOS16_g170225;
				Data16_g170225.PivotOS = In_PivotOS16_g170225;
				Data16_g170225.PivotWS = In_PivotWS16_g170225;
				Data16_g170225.PivotWO = In_PivotWO16_g170225;
				Data16_g170225.NormalOS = In_NormalOS16_g170225;
				Data16_g170225.NormalWS = In_NormalWS16_g170225;
				Data16_g170225.NormalRawOS = In_NormalRawOS16_g170225;
				Data16_g170225.NormalRawWS = In_NormalRawWS16_g170225;
				Data16_g170225.TangentOS = In_TangentOS16_g170225;
				Data16_g170225.ViewDirWS = In_ViewDirWS16_g170225;
				Data16_g170225.VertexData = In_VertexData16_g170225;
				Data16_g170225.MotionData = In_MotionData16_g170225;
				Data16_g170225.BoundsData = In_BoundsData16_g170225;
				Data16_g170225.RotationData = In_RotationData16_g170225;
				TVEModelData Data15_g170278 = Data16_g170225;
				float Out_Dummy15_g170278 = 0;
				float3 Out_PositionOS15_g170278 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170278 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170278 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170278 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170278 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170278 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170278 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170278 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170278 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170278 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170278 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170278 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170278 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170278 = float3( 0,0,0 );
				float4 Out_VertexData15_g170278 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170278 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170278 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170278 = float4( 0,0,0,0 );
				Out_Dummy15_g170278 = Data15_g170278.Dummy;
				Out_PositionOS15_g170278 = Data15_g170278.PositionOS;
				Out_PositionWS15_g170278 = Data15_g170278.PositionWS;
				Out_PositionWO15_g170278 = Data15_g170278.PositionWO;
				Out_PositionRawOS15_g170278 = Data15_g170278.PositionRawOS;
				Out_PositionAddOS15_g170278 = Data15_g170278.PositionAddOS;
				Out_PivotOS15_g170278 = Data15_g170278.PivotOS;
				Out_PivotWS15_g170278 = Data15_g170278.PivotWS;
				Out_PivotWO15_g170278 = Data15_g170278.PivotWO;
				Out_NormalOS15_g170278 = Data15_g170278.NormalOS;
				Out_NormalWS15_g170278 = Data15_g170278.NormalWS;
				Out_NormalRawOS15_g170278 = Data15_g170278.NormalRawOS;
				Out_NormalRawWS15_g170278 = Data15_g170278.NormalRawWS;
				Out_TangentOS15_g170278 = Data15_g170278.TangentOS;
				Out_ViewDirWS15_g170278 = Data15_g170278.ViewDirWS;
				Out_VertexData15_g170278 = Data15_g170278.VertexData;
				Out_MotionData15_g170278 = Data15_g170278.MotionData;
				Out_BoundsData15_g170278 = Data15_g170278.BoundsData;
				Out_RotationData15_g170278 = Data15_g170278.RotationData;
				float3 temp_output_1567_0_g170277 = Out_PositionOS15_g170278;
				float3 In_PositionOS16_g170286 = temp_output_1567_0_g170277;
				float3 temp_output_1567_16_g170277 = Out_PositionWS15_g170278;
				float3 In_PositionWS16_g170286 = temp_output_1567_16_g170277;
				float3 temp_output_1567_17_g170277 = Out_PositionWO15_g170278;
				float3 In_PositionWO16_g170286 = temp_output_1567_17_g170277;
				float3 In_PositionRawOS16_g170286 = Out_PositionRawOS15_g170278;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g170277 = Out_VertexData15_g170278;
				half4 Model_VertexMasks518_g170277 = temp_output_1567_29_g170277;
				float4 break1689_g170277 = Model_VertexMasks518_g170277;
				float4 break33_g170283 = _motion_small_vert_mode;
				float temp_output_30_0_g170283 = ( break1689_g170277.x * break33_g170283.x );
				float temp_output_29_0_g170283 = ( break1689_g170277.y * break33_g170283.y );
				float temp_output_31_0_g170283 = ( break1689_g170277.z * break33_g170283.z );
				float temp_output_28_0_g170283 = ( temp_output_30_0_g170283 + temp_output_29_0_g170283 + temp_output_31_0_g170283 + ( break1689_g170277.w * break33_g170283.w ) );
				float temp_output_1727_0_g170277 = temp_output_28_0_g170283;
				float4 temp_output_1567_30_g170277 = Out_BoundsData15_g170278;
				half4 Model_BoundsData1322_g170277 = temp_output_1567_30_g170277;
				float4 break33_g170288 = _motion_small_proc_mode;
				float temp_output_30_0_g170288 = ( (Model_BoundsData1322_g170277).z * break33_g170288.x );
				float temp_output_29_0_g170288 = ( (Model_BoundsData1322_g170277).w * break33_g170288.y );
				float temp_output_1734_0_g170277 = ( temp_output_30_0_g170288 + temp_output_29_0_g170288 );
				float lerpResult1866_g170277 = lerp( temp_output_1727_0_g170277 , temp_output_1734_0_g170277 , _motion_small_mask_mode);
				float enc1805_g170277 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170277 = DecodeFloatToVector2( enc1805_g170277 );
				float2 break1804_g170277 = localDecodeFloatToVector21805_g170277;
				half Small_Mask_Legacy1806_g170277 = break1804_g170277.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170277 = Small_Mask_Legacy1806_g170277;
				#else
				float staticSwitch1800_g170277 = lerpResult1866_g170277;
				#endif
				float clampResult17_g170290 = clamp( staticSwitch1800_g170277 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170291 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170291 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170291 );
				float temp_output_6_0_g170292 = saturate( ( ( clampResult17_g170290 - temp_output_7_0_g170291 ) / ( temp_output_10_0_g170291 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170292 = ( temp_output_6_0_g170292 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170292 = temp_output_6_0_g170292;
				#endif
				half Small_Mask640_g170277 = staticSwitch14_g170292;
				half3 Model_PositionOS147_g170277 = temp_output_1567_0_g170277;
				float3 normalizeResult1832_g170277 = normalize( Model_PositionOS147_g170277 );
				half3 Model_PositionWO162_g170277 = temp_output_1567_17_g170277;
				float3 temp_output_1567_19_g170277 = Out_PivotWO15_g170278;
				half3 Model_PivotWO402_g170277 = temp_output_1567_19_g170277;
				float3 lerpResult829_g170277 = lerp( Model_PositionWO162_g170277 , Model_PivotWO402_g170277 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170277 = Out_MotionData15_g170278;
				half4 Model_MotionMasks489_g170277 = temp_output_1567_27_g170277;
				half3 Base_Position1394_g170277 = ( lerpResult829_g170277 + ( (Model_MotionMasks489_g170277).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170304 = Base_Position1394_g170277;
				half Flow_Tillling1397_g170277 = _MotionTillingValue;
				half Input_MotionTilling321_g170304 = ( Flow_Tillling1397_g170277 + 0.2 );
				half2 Noise_Coord515_g170304 = ( -(Input_PositionWO419_g170304).xz * Input_MotionTilling321_g170304 * 0.005 );
				half4 Noise_Params535_g170304 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170304, 0.0 );
				float2 temp_output_648_0_g170304 = (Noise_Params535_g170304).rg;
				half Flow_Value1858_g170277 = _MotionIntensityValue;
				half Input_MotionValue629_g170304 = Flow_Value1858_g170277;
				float2 lerpResult645_g170304 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170304 , Input_MotionValue629_g170304);
				float3 appendResult566_g170304 = (float3(lerpResult645_g170304 , (Noise_Params535_g170304).b));
				float temp_output_136_0_g170305 = _global_wind_layer_value;
				float temp_output_19_0_g170307 = TVE_WindLayers[(int)temp_output_136_0_g170305];
				half3 Input_Position180_g170308 = Input_PositionWO419_g170304;
				float2 temp_output_75_0_g170308 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170308).xz ) );
				float temp_output_82_0_g170308 = temp_output_136_0_g170305;
				float2 temp_output_119_0_g170308 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170308).xz ) );
				float temp_output_7_0_g170313 = 1.0;
				float temp_output_10_0_g170313 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170313 );
				float4 lerpResult131_g170308 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170308,temp_output_82_0_g170308), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170308,temp_output_82_0_g170308), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170308 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170313 ) / temp_output_10_0_g170313 ) ));
				float4 temp_output_17_0_g170307 = lerpResult131_g170308;
				float4 temp_output_3_0_g170307 = TVE_WindParams;
				float4 ifLocalVar18_g170307 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170307 >= 0.5 )
				ifLocalVar18_g170307 = temp_output_17_0_g170307;
				else
				ifLocalVar18_g170307 = temp_output_3_0_g170307;
				float4 lerpResult22_g170307 = lerp( temp_output_3_0_g170307 , temp_output_17_0_g170307 , temp_output_19_0_g170307);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170307 = lerpResult22_g170307;
				#else
				float4 staticSwitch24_g170307 = ifLocalVar18_g170307;
				#endif
				float4 temp_output_610_0_g170304 = staticSwitch24_g170307;
				float3 appendResult643_g170304 = (float3((temp_output_610_0_g170304).rg , (temp_output_610_0_g170304).b));
				float3 lerpResult623_g170304 = lerp( appendResult566_g170304 , appendResult643_g170304 , (temp_output_610_0_g170304).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170304 = lerpResult623_g170304;
				#else
				float3 staticSwitch612_g170304 = appendResult566_g170304;
				#endif
				float3 temp_output_1947_567_g170277 = staticSwitch612_g170304;
				float2 break83_g170301 = ((temp_output_1947_567_g170277).xy*2.0 + -1.0);
				float3 appendResult79_g170301 = (float3(break83_g170301.x , 0.0 , break83_g170301.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170277 = (( mul( unity_WorldToObject, float4( appendResult79_g170301 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170277 = lerp( Model_PositionWO162_g170277 , Model_PivotWO402_g170277 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170277 = ( lerpResult1411_g170277 + ( (Model_MotionMasks489_g170277).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170319 = Small_Position1421_g170277;
				half Input_MotionTilling321_g170319 = ( Flow_Tillling1397_g170277 + 0.2 );
				half2 Noise_Coord515_g170319 = ( -(Input_PositionWO419_g170319).xz * Input_MotionTilling321_g170319 * 0.005 );
				half4 Noise_Params535_g170319 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170319, 0.0 );
				float2 temp_output_648_0_g170319 = (Noise_Params535_g170319).rg;
				half Input_MotionValue629_g170319 = Flow_Value1858_g170277;
				float2 lerpResult645_g170319 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170319 , Input_MotionValue629_g170319);
				float3 appendResult566_g170319 = (float3(lerpResult645_g170319 , (Noise_Params535_g170319).b));
				float temp_output_136_0_g170320 = _global_wind_layer_value;
				float temp_output_19_0_g170322 = TVE_WindLayers[(int)temp_output_136_0_g170320];
				half3 Input_Position180_g170323 = Input_PositionWO419_g170319;
				float2 temp_output_75_0_g170323 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170323).xz ) );
				float temp_output_82_0_g170323 = temp_output_136_0_g170320;
				float2 temp_output_119_0_g170323 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170323).xz ) );
				float temp_output_7_0_g170328 = 1.0;
				float temp_output_10_0_g170328 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170328 );
				float4 lerpResult131_g170323 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170323,temp_output_82_0_g170323), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170323,temp_output_82_0_g170323), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170323 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170328 ) / temp_output_10_0_g170328 ) ));
				float4 temp_output_17_0_g170322 = lerpResult131_g170323;
				float4 temp_output_3_0_g170322 = TVE_WindParams;
				float4 ifLocalVar18_g170322 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170322 >= 0.5 )
				ifLocalVar18_g170322 = temp_output_17_0_g170322;
				else
				ifLocalVar18_g170322 = temp_output_3_0_g170322;
				float4 lerpResult22_g170322 = lerp( temp_output_3_0_g170322 , temp_output_17_0_g170322 , temp_output_19_0_g170322);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170322 = lerpResult22_g170322;
				#else
				float4 staticSwitch24_g170322 = ifLocalVar18_g170322;
				#endif
				float4 temp_output_610_0_g170319 = staticSwitch24_g170322;
				float3 appendResult643_g170319 = (float3((temp_output_610_0_g170319).rg , (temp_output_610_0_g170319).b));
				float3 lerpResult623_g170319 = lerp( appendResult566_g170319 , appendResult643_g170319 , (temp_output_610_0_g170319).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170319 = lerpResult623_g170319;
				#else
				float3 staticSwitch612_g170319 = appendResult566_g170319;
				#endif
				float3 temp_output_1946_567_g170277 = staticSwitch612_g170319;
				float2 break83_g170302 = ((temp_output_1946_567_g170277).xy*2.0 + -1.0);
				float3 appendResult79_g170302 = (float3(break83_g170302.x , 0.0 , break83_g170302.y));
				half2 Small_Direction1489_g170277 = (( mul( unity_WorldToObject, float4( appendResult79_g170302 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170277 = Small_Direction1489_g170277;
				#else
				float2 staticSwitch1485_g170277 = Base_Direction893_g170277;
				#endif
				half2 Wave_Direction1486_g170277 = staticSwitch1485_g170277;
				float2 break1828_g170277 = -Wave_Direction1486_g170277;
				float3 appendResult1830_g170277 = (float3(break1828_g170277.x , 0.0 , break1828_g170277.y));
				float dotResult1831_g170277 = dot( normalizeResult1832_g170277 , appendResult1830_g170277 );
				float lerpResult1826_g170277 = lerp( 1.0 , (dotResult1831_g170277*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170277 = lerpResult1826_g170277;
				float2 break1922_g170277 = Small_Direction1489_g170277;
				half Small_Intensity1881_g170277 = length( Small_Direction1489_g170277 );
				float3 appendResult1920_g170277 = (float3(break1922_g170277.x , Small_Intensity1881_g170277 , break1922_g170277.y));
				half Small_Noise1427_g170277 = (temp_output_1946_567_g170277).z;
				float3 appendResult1921_g170277 = (float3(Small_Noise1427_g170277 , (Small_Noise1427_g170277*0.8 + -0.4) , Small_Noise1427_g170277));
				half3 Small_Motion789_g170277 = ( _MotionSmallIntensityValue * Small_Mask640_g170277 * Motion_FrontMask1142_g170277 * appendResult1920_g170277 * appendResult1921_g170277 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170277 = Small_Motion789_g170277;
				#else
				float3 staticSwitch495_g170277 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g170277 = Model_VertexMasks518_g170277;
				float4 break33_g170284 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170284 = ( break1710_g170277.x * break33_g170284.x );
				float temp_output_29_0_g170284 = ( break1710_g170277.y * break33_g170284.y );
				float temp_output_31_0_g170284 = ( break1710_g170277.z * break33_g170284.z );
				float temp_output_28_0_g170284 = ( temp_output_30_0_g170284 + temp_output_29_0_g170284 + temp_output_31_0_g170284 + ( break1710_g170277.w * break33_g170284.w ) );
				float temp_output_1729_0_g170277 = temp_output_28_0_g170284;
				float4 break33_g170289 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170289 = ( (Model_BoundsData1322_g170277).z * break33_g170289.x );
				float temp_output_29_0_g170289 = ( (Model_BoundsData1322_g170277).w * break33_g170289.y );
				float temp_output_1735_0_g170277 = ( temp_output_30_0_g170289 + temp_output_29_0_g170289 );
				float lerpResult1867_g170277 = lerp( temp_output_1729_0_g170277 , temp_output_1735_0_g170277 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170277 = break1804_g170277.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170277 = Tiny_Mask_Legacy1807_g170277;
				#else
				float staticSwitch1810_g170277 = lerpResult1867_g170277;
				#endif
				float clampResult17_g170293 = clamp( staticSwitch1810_g170277 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170294 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170294 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170294 );
				float temp_output_6_0_g170295 = saturate( ( ( clampResult17_g170293 - temp_output_7_0_g170294 ) / ( temp_output_10_0_g170294 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170295 = ( temp_output_6_0_g170295 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170295 = temp_output_6_0_g170295;
				#endif
				half Tiny_Mask218_g170277 = staticSwitch14_g170295;
				half3 Input_Position500_g170296 = Model_PositionWO162_g170277;
				float2 temp_output_498_0_g170296 = (Input_Position500_g170296).xz;
				float4 tex2DNode460_g170296 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, temp_output_498_0_g170296, 0.0 );
				float3 appendResult462_g170296 = (float3(tex2DNode460_g170296.a , tex2DNode460_g170296.a , tex2DNode460_g170296.a));
				half3 Flutter_Texture489_g170296 = (appendResult462_g170296*2.0 + -1.0);
				half3 Tiny_Direction859_g170277 = Flutter_Texture489_g170296;
				half3 Model_PositionWS1819_g170277 = temp_output_1567_16_g170277;
				half Motion_FadeMask1820_g170277 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170277 ) / _MotionDistValue ) ) );
				half Base_Intensity1878_g170277 = length( Base_Direction893_g170277 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1899_g170277 = Small_Intensity1881_g170277;
				#else
				float staticSwitch1899_g170277 = Base_Intensity1878_g170277;
				#endif
				half Wave_Intensity1900_g170277 = staticSwitch1899_g170277;
				half Base_Noise1159_g170277 = (temp_output_1947_567_g170277).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170277 = Small_Noise1427_g170277;
				#else
				float staticSwitch1453_g170277 = Base_Noise1159_g170277;
				#endif
				half Wave_Noise1475_g170277 = staticSwitch1453_g170277;
				half3 Tiny_Motion1451_g170277 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170277 * Tiny_Direction859_g170277 * Motion_FrontMask1142_g170277 * Motion_FadeMask1820_g170277 * Wave_Intensity1900_g170277 * Wave_Noise1475_g170277 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170277 = Tiny_Motion1451_g170277;
				#else
				float3 staticSwitch414_g170277 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g170277 = ( staticSwitch495_g170277 + staticSwitch414_g170277 );
				float3 In_PositionAddOS16_g170286 = Final_PositionADD1569_g170277;
				float3 temp_output_1567_24_g170277 = Out_PivotOS15_g170278;
				float3 In_PivotOS16_g170286 = temp_output_1567_24_g170277;
				float3 In_PivotWS16_g170286 = Out_PivotWS15_g170278;
				float3 In_PivotWO16_g170286 = temp_output_1567_19_g170277;
				float3 temp_output_1567_20_g170277 = Out_NormalOS15_g170278;
				float3 In_NormalOS16_g170286 = temp_output_1567_20_g170277;
				float3 In_NormalWS16_g170286 = Out_NormalWS15_g170278;
				float3 In_NormalRawOS16_g170286 = Out_NormalRawOS15_g170278;
				float3 In_NormalRawWS16_g170286 = Out_NormalRawWS15_g170278;
				float4 In_TangentOS16_g170286 = Out_TangentOS15_g170278;
				float3 In_ViewDirWS16_g170286 = Out_ViewDirWS15_g170278;
				float4 In_VertexData16_g170286 = temp_output_1567_29_g170277;
				float4 In_MotionData16_g170286 = temp_output_1567_27_g170277;
				float4 In_BoundsData16_g170286 = temp_output_1567_30_g170277;
				float2 temp_cast_17 = (0.0).xx;
				float4 break748_g170277 = Model_VertexMasks518_g170277;
				float4 break33_g170285 = _motion_base_vert_mode;
				float temp_output_30_0_g170285 = ( break748_g170277.x * break33_g170285.x );
				float temp_output_29_0_g170285 = ( break748_g170277.y * break33_g170285.y );
				float temp_output_31_0_g170285 = ( break748_g170277.z * break33_g170285.z );
				float temp_output_28_0_g170285 = ( temp_output_30_0_g170285 + temp_output_29_0_g170285 + temp_output_31_0_g170285 + ( break748_g170277.w * break33_g170285.w ) );
				float temp_output_1731_0_g170277 = temp_output_28_0_g170285;
				float4 break33_g170287 = _motion_base_proc_mode;
				float temp_output_30_0_g170287 = ( (Model_BoundsData1322_g170277).z * break33_g170287.x );
				float temp_output_29_0_g170287 = ( (Model_BoundsData1322_g170277).w * break33_g170287.y );
				float temp_output_1733_0_g170277 = ( temp_output_30_0_g170287 + temp_output_29_0_g170287 );
				float lerpResult1863_g170277 = lerp( temp_output_1731_0_g170277 , temp_output_1733_0_g170277 , _motion_base_mask_mode);
				float clampResult17_g170280 = clamp( lerpResult1863_g170277 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170281 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170281 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170281 );
				float temp_output_6_0_g170282 = saturate( ( ( clampResult17_g170280 - temp_output_7_0_g170281 ) / ( temp_output_10_0_g170281 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170282 = ( temp_output_6_0_g170282 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170282 = temp_output_6_0_g170282;
				#endif
				half Base_Mask217_g170277 = staticSwitch14_g170282;
				half Flow_Delay1939_g170277 = _MotionDelayValue;
				float lerpResult1908_g170277 = lerp( 1.0 , ( Base_Intensity1878_g170277 * Base_Intensity1878_g170277 ) , Flow_Delay1939_g170277);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170277 = ( _MotionBaseIntensityValue * Base_Mask217_g170277 * Base_Noise1159_g170277 * Base_Direction893_g170277 * lerpResult1908_g170277 );
				#else
				float2 staticSwitch1573_g170277 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g170277 = staticSwitch1573_g170277;
				half2 Final_VertexBend1570_g170277 = Base_Motion1440_g170277;
				float4 In_RotationData16_g170286 = float4( Final_VertexBend1570_g170277, 0.0 , 0.0 );
				Data16_g170286.Dummy = In_Dummy16_g170286;
				Data16_g170286.PositionOS = In_PositionOS16_g170286;
				Data16_g170286.PositionWS = In_PositionWS16_g170286;
				Data16_g170286.PositionWO = In_PositionWO16_g170286;
				Data16_g170286.PositionRawOS = In_PositionRawOS16_g170286;
				Data16_g170286.PositionAddOS = In_PositionAddOS16_g170286;
				Data16_g170286.PivotOS = In_PivotOS16_g170286;
				Data16_g170286.PivotWS = In_PivotWS16_g170286;
				Data16_g170286.PivotWO = In_PivotWO16_g170286;
				Data16_g170286.NormalOS = In_NormalOS16_g170286;
				Data16_g170286.NormalWS = In_NormalWS16_g170286;
				Data16_g170286.NormalRawOS = In_NormalRawOS16_g170286;
				Data16_g170286.NormalRawWS = In_NormalRawWS16_g170286;
				Data16_g170286.TangentOS = In_TangentOS16_g170286;
				Data16_g170286.ViewDirWS = In_ViewDirWS16_g170286;
				Data16_g170286.VertexData = In_VertexData16_g170286;
				Data16_g170286.MotionData = In_MotionData16_g170286;
				Data16_g170286.BoundsData = In_BoundsData16_g170286;
				Data16_g170286.RotationData = In_RotationData16_g170286;
				TVEModelData Data15_g170474 = Data16_g170286;
				float Out_Dummy15_g170474 = 0;
				float3 Out_PositionOS15_g170474 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170474 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170474 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170474 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170474 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170474 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170474 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170474 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170474 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170474 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170474 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170474 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170474 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170474 = float3( 0,0,0 );
				float4 Out_VertexData15_g170474 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170474 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170474 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170474 = float4( 0,0,0,0 );
				Out_Dummy15_g170474 = Data15_g170474.Dummy;
				Out_PositionOS15_g170474 = Data15_g170474.PositionOS;
				Out_PositionWS15_g170474 = Data15_g170474.PositionWS;
				Out_PositionWO15_g170474 = Data15_g170474.PositionWO;
				Out_PositionRawOS15_g170474 = Data15_g170474.PositionRawOS;
				Out_PositionAddOS15_g170474 = Data15_g170474.PositionAddOS;
				Out_PivotOS15_g170474 = Data15_g170474.PivotOS;
				Out_PivotWS15_g170474 = Data15_g170474.PivotWS;
				Out_PivotWO15_g170474 = Data15_g170474.PivotWO;
				Out_NormalOS15_g170474 = Data15_g170474.NormalOS;
				Out_NormalWS15_g170474 = Data15_g170474.NormalWS;
				Out_NormalRawOS15_g170474 = Data15_g170474.NormalRawOS;
				Out_NormalRawWS15_g170474 = Data15_g170474.NormalRawWS;
				Out_TangentOS15_g170474 = Data15_g170474.TangentOS;
				Out_ViewDirWS15_g170474 = Data15_g170474.ViewDirWS;
				Out_VertexData15_g170474 = Data15_g170474.VertexData;
				Out_MotionData15_g170474 = Data15_g170474.MotionData;
				Out_BoundsData15_g170474 = Data15_g170474.BoundsData;
				Out_RotationData15_g170474 = Data15_g170474.RotationData;
				half3 Model_PositionOS147_g170473 = Out_PositionOS15_g170474;
				half3 Input_False58_g170479 = Model_PositionOS147_g170473;
				half3 VertexPos40_g170476 = Model_PositionOS147_g170473;
				half3 VertexPos40_g170477 = VertexPos40_g170476;
				float3 appendResult74_g170477 = (float3(VertexPos40_g170477.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170477 = appendResult74_g170477;
				float3 break84_g170477 = VertexPos40_g170477;
				float3 appendResult81_g170477 = (float3(0.0 , break84_g170477.y , break84_g170477.z));
				half3 VertexPosOtherAxis82_g170477 = appendResult81_g170477;
				float4 temp_output_1567_33_g170473 = Out_RotationData15_g170474;
				half4 Model_VertexBend1569_g170473 = temp_output_1567_33_g170473;
				half2 Angle44_g170476 = (Model_VertexBend1569_g170473).xy;
				half Angle44_g170477 = (Angle44_g170476).y;
				half3 VertexPos40_g170478 = ( VertexPosRotationAxis50_g170477 + ( VertexPosOtherAxis82_g170477 * cos( Angle44_g170477 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170477 ) * sin( Angle44_g170477 ) ) );
				float3 appendResult74_g170478 = (float3(0.0 , 0.0 , VertexPos40_g170478.z));
				half3 VertexPosRotationAxis50_g170478 = appendResult74_g170478;
				float3 break84_g170478 = VertexPos40_g170478;
				float3 appendResult81_g170478 = (float3(break84_g170478.x , break84_g170478.y , 0.0));
				half3 VertexPosOtherAxis82_g170478 = appendResult81_g170478;
				half Angle44_g170478 = -(Angle44_g170476).x;
				half3 Input_True57_g170479 = ( VertexPosRotationAxis50_g170478 + ( VertexPosOtherAxis82_g170478 * cos( Angle44_g170478 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170478 ) * sin( Angle44_g170478 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170479 = Input_True57_g170479;
				#else
				float3 staticSwitch65_g170479 = Input_False58_g170479;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170479 = Input_True57_g170479;
				#else
				float3 staticSwitch67_g170479 = staticSwitch65_g170479;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170479 = Input_True57_g170479;
				#else
				float3 staticSwitch69_g170479 = staticSwitch67_g170479;
				#endif
				float3 temp_output_1578_0_g170473 = staticSwitch69_g170479;
				float3 temp_output_1567_31_g170473 = Out_PositionAddOS15_g170474;
				half3 Model_PositionADD1568_g170473 = temp_output_1567_31_g170473;
				half3 Final_PositionOS178_g170473 = ( temp_output_1578_0_g170473 + Model_PositionADD1568_g170473 );
				float3 In_PositionOS16_g170475 = Final_PositionOS178_g170473;
				float3 In_PositionWS16_g170475 = Out_PositionWS15_g170474;
				float3 In_PositionWO16_g170475 = Out_PositionWO15_g170474;
				float3 In_PositionRawOS16_g170475 = Out_PositionRawOS15_g170474;
				float3 In_PositionAddOS16_g170475 = temp_output_1567_31_g170473;
				float3 In_PivotOS16_g170475 = Out_PivotOS15_g170474;
				float3 In_PivotWS16_g170475 = Out_PivotWS15_g170474;
				float3 In_PivotWO16_g170475 = Out_PivotWO15_g170474;
				float3 In_NormalOS16_g170475 = Out_NormalOS15_g170474;
				float3 In_NormalWS16_g170475 = Out_NormalWS15_g170474;
				float3 In_NormalRawOS16_g170475 = Out_NormalRawOS15_g170474;
				float3 In_NormalRawWS16_g170475 = Out_NormalRawWS15_g170474;
				float4 In_TangentOS16_g170475 = Out_TangentOS15_g170474;
				float3 In_ViewDirWS16_g170475 = Out_ViewDirWS15_g170474;
				float4 In_VertexData16_g170475 = Out_VertexData15_g170474;
				float4 In_MotionData16_g170475 = Out_MotionData15_g170474;
				float4 In_BoundsData16_g170475 = Out_BoundsData15_g170474;
				float4 In_RotationData16_g170475 = temp_output_1567_33_g170473;
				Data16_g170475.Dummy = In_Dummy16_g170475;
				Data16_g170475.PositionOS = In_PositionOS16_g170475;
				Data16_g170475.PositionWS = In_PositionWS16_g170475;
				Data16_g170475.PositionWO = In_PositionWO16_g170475;
				Data16_g170475.PositionRawOS = In_PositionRawOS16_g170475;
				Data16_g170475.PositionAddOS = In_PositionAddOS16_g170475;
				Data16_g170475.PivotOS = In_PivotOS16_g170475;
				Data16_g170475.PivotWS = In_PivotWS16_g170475;
				Data16_g170475.PivotWO = In_PivotWO16_g170475;
				Data16_g170475.NormalOS = In_NormalOS16_g170475;
				Data16_g170475.NormalWS = In_NormalWS16_g170475;
				Data16_g170475.NormalRawOS = In_NormalRawOS16_g170475;
				Data16_g170475.NormalRawWS = In_NormalRawWS16_g170475;
				Data16_g170475.TangentOS = In_TangentOS16_g170475;
				Data16_g170475.ViewDirWS = In_ViewDirWS16_g170475;
				Data16_g170475.VertexData = In_VertexData16_g170475;
				Data16_g170475.MotionData = In_MotionData16_g170475;
				Data16_g170475.BoundsData = In_BoundsData16_g170475;
				Data16_g170475.RotationData = In_RotationData16_g170475;
				TVEModelData Data15_g170497 = Data16_g170475;
				float Out_Dummy15_g170497 = 0;
				float3 Out_PositionOS15_g170497 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170497 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170497 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170497 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170497 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170497 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170497 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170497 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170497 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170497 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170497 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170497 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170497 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170497 = float3( 0,0,0 );
				float4 Out_VertexData15_g170497 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170497 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170497 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170497 = float4( 0,0,0,0 );
				Out_Dummy15_g170497 = Data15_g170497.Dummy;
				Out_PositionOS15_g170497 = Data15_g170497.PositionOS;
				Out_PositionWS15_g170497 = Data15_g170497.PositionWS;
				Out_PositionWO15_g170497 = Data15_g170497.PositionWO;
				Out_PositionRawOS15_g170497 = Data15_g170497.PositionRawOS;
				Out_PositionAddOS15_g170497 = Data15_g170497.PositionAddOS;
				Out_PivotOS15_g170497 = Data15_g170497.PivotOS;
				Out_PivotWS15_g170497 = Data15_g170497.PivotWS;
				Out_PivotWO15_g170497 = Data15_g170497.PivotWO;
				Out_NormalOS15_g170497 = Data15_g170497.NormalOS;
				Out_NormalWS15_g170497 = Data15_g170497.NormalWS;
				Out_NormalRawOS15_g170497 = Data15_g170497.NormalRawOS;
				Out_NormalRawWS15_g170497 = Data15_g170497.NormalRawWS;
				Out_TangentOS15_g170497 = Data15_g170497.TangentOS;
				Out_ViewDirWS15_g170497 = Data15_g170497.ViewDirWS;
				Out_VertexData15_g170497 = Data15_g170497.VertexData;
				Out_MotionData15_g170497 = Data15_g170497.MotionData;
				Out_BoundsData15_g170497 = Data15_g170497.BoundsData;
				Out_RotationData15_g170497 = Data15_g170497.RotationData;
				float3 In_PositionOS16_g170498 = Out_PositionOS15_g170497;
				float3 In_PositionWS16_g170498 = Out_PositionWS15_g170497;
				float3 In_PositionWO16_g170498 = Out_PositionWO15_g170497;
				float3 temp_output_1567_26_g170496 = Out_PositionRawOS15_g170497;
				float3 In_PositionRawOS16_g170498 = temp_output_1567_26_g170496;
				float3 In_PositionAddOS16_g170498 = Out_PositionAddOS15_g170497;
				float3 In_PivotOS16_g170498 = Out_PivotOS15_g170497;
				float3 In_PivotWS16_g170498 = Out_PivotWS15_g170497;
				float3 In_PivotWO16_g170498 = Out_PivotWO15_g170497;
				half3 Model_NormalOS1568_g170496 = Out_NormalOS15_g170497;
				float3 lerpResult1617_g170496 = lerp( Model_NormalOS1568_g170496 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170496 = temp_output_1567_26_g170496;
				float3 normalizeResult1641_g170496 = ASESafeNormalize( ( Model_PositionRAW1592_g170496 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170496 = lerp( lerpResult1617_g170496 , normalizeResult1641_g170496 , _NormalSphereValue);
				float4 temp_output_1567_30_g170496 = Out_BoundsData15_g170497;
				half4 Model_VertexData1608_g170496 = temp_output_1567_30_g170496;
				float4 break1673_g170496 = Model_VertexData1608_g170496;
				float4 break33_g170499 = _normal_vert_mode;
				float temp_output_30_0_g170499 = ( break1673_g170496.x * break33_g170499.x );
				float temp_output_29_0_g170499 = ( break1673_g170496.y * break33_g170499.y );
				float temp_output_31_0_g170499 = ( break1673_g170496.z * break33_g170499.z );
				float temp_output_28_0_g170499 = ( temp_output_30_0_g170499 + temp_output_29_0_g170499 + temp_output_31_0_g170499 + ( break1673_g170496.w * break33_g170499.w ) );
				float clampResult17_g170501 = clamp( temp_output_28_0_g170499 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170500 = _NormalMeshRemap.x;
				float temp_output_10_0_g170500 = ( _NormalMeshRemap.y - temp_output_7_0_g170500 );
				float lerpResult1682_g170496 = lerp( 1.0 , saturate( ( ( clampResult17_g170501 - temp_output_7_0_g170500 ) / ( temp_output_10_0_g170500 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170502 = lerpResult1682_g170496;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170502 = ( temp_output_6_0_g170502 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170502 = temp_output_6_0_g170502;
				#endif
				float temp_output_1679_0_g170496 = staticSwitch14_g170502;
				half Normal_MeskMask1684_g170496 = temp_output_1679_0_g170496;
				float3 lerpResult1667_g170496 = lerp( Model_NormalOS1568_g170496 , lerpResult1616_g170496 , Normal_MeskMask1684_g170496);
				half3 Final_NormalOS1666_g170496 = lerpResult1667_g170496;
				float3 In_NormalOS16_g170498 = Final_NormalOS1666_g170496;
				float3 temp_output_1567_21_g170496 = Out_NormalWS15_g170497;
				float3 In_NormalWS16_g170498 = temp_output_1567_21_g170496;
				float3 In_NormalRawOS16_g170498 = Out_NormalRawOS15_g170497;
				float3 In_NormalRawWS16_g170498 = Out_NormalRawWS15_g170497;
				float4 In_TangentOS16_g170498 = Out_TangentOS15_g170497;
				float3 In_ViewDirWS16_g170498 = Out_ViewDirWS15_g170497;
				float4 In_VertexData16_g170498 = Out_VertexData15_g170497;
				float4 In_MotionData16_g170498 = Out_MotionData15_g170497;
				float4 In_BoundsData16_g170498 = temp_output_1567_30_g170496;
				float4 In_RotationData16_g170498 = Out_RotationData15_g170497;
				Data16_g170498.Dummy = In_Dummy16_g170498;
				Data16_g170498.PositionOS = In_PositionOS16_g170498;
				Data16_g170498.PositionWS = In_PositionWS16_g170498;
				Data16_g170498.PositionWO = In_PositionWO16_g170498;
				Data16_g170498.PositionRawOS = In_PositionRawOS16_g170498;
				Data16_g170498.PositionAddOS = In_PositionAddOS16_g170498;
				Data16_g170498.PivotOS = In_PivotOS16_g170498;
				Data16_g170498.PivotWS = In_PivotWS16_g170498;
				Data16_g170498.PivotWO = In_PivotWO16_g170498;
				Data16_g170498.NormalOS = In_NormalOS16_g170498;
				Data16_g170498.NormalWS = In_NormalWS16_g170498;
				Data16_g170498.NormalRawOS = In_NormalRawOS16_g170498;
				Data16_g170498.NormalRawWS = In_NormalRawWS16_g170498;
				Data16_g170498.TangentOS = In_TangentOS16_g170498;
				Data16_g170498.ViewDirWS = In_ViewDirWS16_g170498;
				Data16_g170498.VertexData = In_VertexData16_g170498;
				Data16_g170498.MotionData = In_MotionData16_g170498;
				Data16_g170498.BoundsData = In_BoundsData16_g170498;
				Data16_g170498.RotationData = In_RotationData16_g170498;
				TVEModelData Data15_g170514 = Data16_g170498;
				float Out_Dummy15_g170514 = 0;
				float3 Out_PositionOS15_g170514 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170514 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170514 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170514 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170514 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170514 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170514 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170514 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170514 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170514 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170514 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170514 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170514 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170514 = float3( 0,0,0 );
				float4 Out_VertexData15_g170514 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170514 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170514 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170514 = float4( 0,0,0,0 );
				Out_Dummy15_g170514 = Data15_g170514.Dummy;
				Out_PositionOS15_g170514 = Data15_g170514.PositionOS;
				Out_PositionWS15_g170514 = Data15_g170514.PositionWS;
				Out_PositionWO15_g170514 = Data15_g170514.PositionWO;
				Out_PositionRawOS15_g170514 = Data15_g170514.PositionRawOS;
				Out_PositionAddOS15_g170514 = Data15_g170514.PositionAddOS;
				Out_PivotOS15_g170514 = Data15_g170514.PivotOS;
				Out_PivotWS15_g170514 = Data15_g170514.PivotWS;
				Out_PivotWO15_g170514 = Data15_g170514.PivotWO;
				Out_NormalOS15_g170514 = Data15_g170514.NormalOS;
				Out_NormalWS15_g170514 = Data15_g170514.NormalWS;
				Out_NormalRawOS15_g170514 = Data15_g170514.NormalRawOS;
				Out_NormalRawWS15_g170514 = Data15_g170514.NormalRawWS;
				Out_TangentOS15_g170514 = Data15_g170514.TangentOS;
				Out_ViewDirWS15_g170514 = Data15_g170514.ViewDirWS;
				Out_VertexData15_g170514 = Data15_g170514.VertexData;
				Out_MotionData15_g170514 = Data15_g170514.MotionData;
				Out_BoundsData15_g170514 = Data15_g170514.BoundsData;
				Out_RotationData15_g170514 = Data15_g170514.RotationData;
				float3 temp_output_217_24_g170513 = Out_PivotOS15_g170514;
				float3 In_PositionOS16_g170515 = ( Out_PositionOS15_g170514 + temp_output_217_24_g170513 );
				float3 In_PositionWS16_g170515 = Out_PositionWS15_g170514;
				float3 In_PositionWO16_g170515 = Out_PositionWO15_g170514;
				float3 In_PositionRawOS16_g170515 = Out_PositionRawOS15_g170514;
				float3 In_PositionAddOS16_g170515 = Out_PositionAddOS15_g170514;
				float3 In_PivotOS16_g170515 = temp_output_217_24_g170513;
				float3 In_PivotWS16_g170515 = Out_PivotWS15_g170514;
				float3 In_PivotWO16_g170515 = Out_PivotWO15_g170514;
				float3 In_NormalOS16_g170515 = Out_NormalOS15_g170514;
				float3 In_NormalWS16_g170515 = Out_NormalWS15_g170514;
				float3 In_NormalRawOS16_g170515 = Out_NormalRawOS15_g170514;
				float3 In_NormalRawWS16_g170515 = Out_NormalRawWS15_g170514;
				float4 In_TangentOS16_g170515 = Out_TangentOS15_g170514;
				float3 In_ViewDirWS16_g170515 = Out_ViewDirWS15_g170514;
				float4 In_VertexData16_g170515 = Out_VertexData15_g170514;
				float4 In_MotionData16_g170515 = Out_MotionData15_g170514;
				float4 In_BoundsData16_g170515 = Out_BoundsData15_g170514;
				float4 In_RotationData16_g170515 = Out_RotationData15_g170514;
				Data16_g170515.Dummy = In_Dummy16_g170515;
				Data16_g170515.PositionOS = In_PositionOS16_g170515;
				Data16_g170515.PositionWS = In_PositionWS16_g170515;
				Data16_g170515.PositionWO = In_PositionWO16_g170515;
				Data16_g170515.PositionRawOS = In_PositionRawOS16_g170515;
				Data16_g170515.PositionAddOS = In_PositionAddOS16_g170515;
				Data16_g170515.PivotOS = In_PivotOS16_g170515;
				Data16_g170515.PivotWS = In_PivotWS16_g170515;
				Data16_g170515.PivotWO = In_PivotWO16_g170515;
				Data16_g170515.NormalOS = In_NormalOS16_g170515;
				Data16_g170515.NormalWS = In_NormalWS16_g170515;
				Data16_g170515.NormalRawOS = In_NormalRawOS16_g170515;
				Data16_g170515.NormalRawWS = In_NormalRawWS16_g170515;
				Data16_g170515.TangentOS = In_TangentOS16_g170515;
				Data16_g170515.ViewDirWS = In_ViewDirWS16_g170515;
				Data16_g170515.VertexData = In_VertexData16_g170515;
				Data16_g170515.MotionData = In_MotionData16_g170515;
				Data16_g170515.BoundsData = In_BoundsData16_g170515;
				Data16_g170515.RotationData = In_RotationData16_g170515;
				TVEModelData Data15_g170526 = Data16_g170515;
				float Out_Dummy15_g170526 = 0;
				float3 Out_PositionOS15_g170526 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170526 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170526 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170526 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170526 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170526 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170526 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170526 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170526 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170526 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170526 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170526 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170526 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170526 = float3( 0,0,0 );
				float4 Out_VertexData15_g170526 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170526 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170526 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170526 = float4( 0,0,0,0 );
				Out_Dummy15_g170526 = Data15_g170526.Dummy;
				Out_PositionOS15_g170526 = Data15_g170526.PositionOS;
				Out_PositionWS15_g170526 = Data15_g170526.PositionWS;
				Out_PositionWO15_g170526 = Data15_g170526.PositionWO;
				Out_PositionRawOS15_g170526 = Data15_g170526.PositionRawOS;
				Out_PositionAddOS15_g170526 = Data15_g170526.PositionAddOS;
				Out_PivotOS15_g170526 = Data15_g170526.PivotOS;
				Out_PivotWS15_g170526 = Data15_g170526.PivotWS;
				Out_PivotWO15_g170526 = Data15_g170526.PivotWO;
				Out_NormalOS15_g170526 = Data15_g170526.NormalOS;
				Out_NormalWS15_g170526 = Data15_g170526.NormalWS;
				Out_NormalRawOS15_g170526 = Data15_g170526.NormalRawOS;
				Out_NormalRawWS15_g170526 = Data15_g170526.NormalRawWS;
				Out_TangentOS15_g170526 = Data15_g170526.TangentOS;
				Out_ViewDirWS15_g170526 = Data15_g170526.ViewDirWS;
				Out_VertexData15_g170526 = Data15_g170526.VertexData;
				Out_MotionData15_g170526 = Data15_g170526.MotionData;
				Out_BoundsData15_g170526 = Data15_g170526.BoundsData;
				Out_RotationData15_g170526 = Data15_g170526.RotationData;
				float3 temp_output_31_0_g170523 = Out_PositionOS15_g170526;
				
				float4 temp_output_6_0_g170538 = Out_TangentOS15_g170526;
				float2 uv_WetnessDropsTex = v.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data2262 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + 0.0 ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + 0.0 ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170538 = ( temp_output_6_0_g170538 + ( Dummy_Data2262 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170538 = temp_output_6_0_g170538;
				#endif
				
				o.ase_texcoord11.xyz = vertexToFrag73_g170143;
				o.ase_texcoord12.xyz = vertexToFrag76_g170143;
				float temp_output_6_0_g170303 = ( _MotionHighlightValue * Motion_FadeMask1820_g170277 * Wave_Intensity1900_g170277 * ( Base_Mask217_g170277 * Base_Mask217_g170277 ) * ( Wave_Noise1475_g170277 * Wave_Noise1475_g170277 * Wave_Noise1475_g170277 * Wave_Noise1475_g170277 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170303 = ( temp_output_6_0_g170303 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170303 = temp_output_6_0_g170303;
				#endif
				half Wave_Mask2479 = staticSwitch14_g170303;
				float4 appendResult23_g170419 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask2479));
				float4 vertexToFrag24_g170419 = appendResult23_g170419;
				o.ase_texcoord13 = vertexToFrag24_g170419;
				
				o.ase_texcoord9 = v.ase_texcoord;
				o.ase_texcoord10.xy = v.texcoord2.xyzw.xy;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord10.zw = 0;
				o.ase_texcoord11.w = 0;
				o.ase_texcoord12.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g170523 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g170526;
				v.tangent = staticSwitch14_g170538;

				o.pos = UnityObjectToClipPos(v.vertex);
				float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
				fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);
				fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
				fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
				fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
				o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
				o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
				o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);

				#ifdef DYNAMICLIGHTMAP_ON
				o.lmap.zw = v.texcoord2.xy * unity_DynamicLightmapST.xy + unity_DynamicLightmapST.zw;
				#endif
				#ifdef LIGHTMAP_ON
				o.lmap.xy = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
				#endif

				#ifndef LIGHTMAP_ON
					#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
						o.sh = 0;
						#ifdef VERTEXLIGHT_ON
						o.sh += Shade4PointLights (
							unity_4LightPosX0, unity_4LightPosY0, unity_4LightPosZ0,
							unity_LightColor[0].rgb, unity_LightColor[1].rgb, unity_LightColor[2].rgb, unity_LightColor[3].rgb,
							unity_4LightAtten0, worldPos, worldNormal);
						#endif
						o.sh = ShadeSHPerVertex (worldNormal, o.sh);
					#endif
				#endif

				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_TRANSFER_LIGHTING(o, v.texcoord1.xy);
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_TRANSFER_SHADOW(o, v.texcoord1.xy);
					#else
						TRANSFER_SHADOW(o);
					#endif
				#endif

				#ifdef ASE_FOG
					UNITY_TRANSFER_FOG(o,o.pos);
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
					o.screenPos = ComputeScreenPos(o.pos);
				#endif
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN , bool ase_vface : SV_IsFrontFace
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float3 WorldTangent = float3(IN.tSpace0.x,IN.tSpace1.x,IN.tSpace2.x);
				float3 WorldBiTangent = float3(IN.tSpace0.y,IN.tSpace1.y,IN.tSpace2.y);
				float3 WorldNormal = float3(IN.tSpace0.z,IN.tSpace1.z,IN.tSpace2.z);
				float3 worldPos = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
				#else
					half atten = 1;
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 ScreenPos = IN.screenPos;
				#endif

				float localBreakData4_g170529 = ( 0.0 );
				float localCompData3_g170518 = ( 0.0 );
				TVEVisualData Data3_g170518 = (TVEVisualData)0;
				half Dummy145_g170516 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170518 = Dummy145_g170516;
				float localBreakData4_g170517 = ( 0.0 );
				float localCompData3_g170493 = ( 0.0 );
				TVEVisualData Data3_g170493 = (TVEVisualData)0;
				half Dummy145_g170481 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170493 = Dummy145_g170481;
				float localBreakData4_g170492 = ( 0.0 );
				float localCompData3_g170446 = ( 0.0 );
				TVEVisualData Data3_g170446 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = IN.ase_texcoord9.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g170443 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g170446 = Dummy594_g170443.r;
				float localBreakData4_g170444 = ( 0.0 );
				float localCompData3_g170442 = ( 0.0 );
				TVEVisualData Data3_g170442 = (TVEVisualData)0;
				float In_Dummy3_g170442 = 0.0;
				float localBreakData4_g170441 = ( 0.0 );
				float localCompData3_g170434 = ( 0.0 );
				TVEVisualData Data3_g170434 = (TVEVisualData)0;
				half Dummy220_g170430 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170434 = Dummy220_g170430;
				float localBreakData4_g170433 = ( 0.0 );
				float localCompData3_g170422 = ( 0.0 );
				TVEVisualData Data3_g170422 = (TVEVisualData)0;
				half Dummy202_g170420 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170422 = Dummy202_g170420;
				float localBreakData4_g170421 = ( 0.0 );
				float localCompData3_g170403 = ( 0.0 );
				TVEVisualData Data3_g170403 = (TVEVisualData)0;
				half4 Dummy944_g170386 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170403 = Dummy944_g170386.x;
				float localBreakData4_g170402 = ( 0.0 );
				float localCompData3_g170363 = ( 0.0 );
				TVEVisualData Data3_g170363 = (TVEVisualData)0;
				half4 Dummy946_g170352 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170363 = Dummy946_g170352.x;
				float localBreakData4_g170366 = ( 0.0 );
				float localCompData3_g170344 = ( 0.0 );
				TVEVisualData Data3_g170344 = (TVEVisualData)0;
				half4 Dummy130_g170334 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170344 = Dummy130_g170334.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170345) = _MainAlbedoTex;
				float localFilterTexture19_g170348 = ( 0.0 );
				SamplerState SamplerDefault19_g170348 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170348 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170348 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170348 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170348 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170348 = SamplerDefault19_g170348;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170348 = SamplerDefault19_g170348;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170348 = SamplerPoint19_g170348;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170348 = SamplerLow19_g170348;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170348 = SamplerMedium19_g170348;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170348 = SamplerHigh19_g170348;
				#endif
				SamplerState Sampler276_g170345 = SS19_g170348;
				half4 Local_Coords180_g170334 = _main_coord_value;
				float4 temp_output_37_0_g170345 = Local_Coords180_g170334;
				half4 Coords276_g170345 = temp_output_37_0_g170345;
				half2 TexCoord276_g170345 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170345 = SampleMain( Texture276_g170345 , Sampler276_g170345 , Coords276_g170345 , TexCoord276_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170345) = _MainAlbedoTex;
				SamplerState Sampler275_g170345 = SS19_g170348;
				half4 Coords275_g170345 = temp_output_37_0_g170345;
				half2 TexCoord275_g170345 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170345 = SampleExtra( Texture275_g170345 , Sampler275_g170345 , Coords275_g170345 , TexCoord275_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170345) = _MainAlbedoTex;
				SamplerState Sampler238_g170345 = SS19_g170348;
				half4 Coords238_g170345 = temp_output_37_0_g170345;
				TVEModelData Data16_g170157 = (TVEModelData)0;
				float In_Dummy16_g170157 = 0.0;
				float3 In_PositionOS16_g170157 = float3( 0,0,0 );
				float3 vertexToFrag73_g170143 = IN.ase_texcoord11.xyz;
				half3 PositionWS122_g170143 = vertexToFrag73_g170143;
				float3 In_PositionWS16_g170157 = PositionWS122_g170143;
				float3 vertexToFrag76_g170143 = IN.ase_texcoord12.xyz;
				half3 PivotWS121_g170143 = vertexToFrag76_g170143;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170143 = ( PositionWS122_g170143 - PivotWS121_g170143 );
				#else
				float3 staticSwitch204_g170143 = PositionWS122_g170143;
				#endif
				half3 PositionWO132_g170143 = ( staticSwitch204_g170143 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170157 = PositionWO132_g170143;
				float3 In_PositionRawOS16_g170157 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170157 = float3( 0,0,0 );
				float3 In_PivotOS16_g170157 = float3( 0,0,0 );
				float3 In_PivotWS16_g170157 = PivotWS121_g170143;
				half3 PivotWO133_g170143 = ( PivotWS121_g170143 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170157 = PivotWO133_g170143;
				float3 In_NormalOS16_g170157 = float3( 0,0,0 );
				float3 normalizedWorldNormal = normalize( WorldNormal );
				half3 Normal_WS95_g170143 = normalizedWorldNormal;
				float3 In_NormalWS16_g170157 = Normal_WS95_g170143;
				float3 In_NormalRawOS16_g170157 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170157 = float3( 0,0,0 );
				float4 In_TangentOS16_g170157 = float4( 0,1,0,1 );
				float3 normalizeResult296_g170143 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170143 ) );
				half3 ViewDirWS169_g170143 = normalizeResult296_g170143;
				float3 In_ViewDirWS16_g170157 = ViewDirWS169_g170143;
				half4 VertexMasks171_g170143 = IN.ase_color;
				float4 In_VertexData16_g170157 = VertexMasks171_g170143;
				float4 In_MotionData16_g170157 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170157 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170157 = float4( 0,0,0,0 );
				Data16_g170157.Dummy = In_Dummy16_g170157;
				Data16_g170157.PositionOS = In_PositionOS16_g170157;
				Data16_g170157.PositionWS = In_PositionWS16_g170157;
				Data16_g170157.PositionWO = In_PositionWO16_g170157;
				Data16_g170157.PositionRawOS = In_PositionRawOS16_g170157;
				Data16_g170157.PositionAddOS = In_PositionAddOS16_g170157;
				Data16_g170157.PivotOS = In_PivotOS16_g170157;
				Data16_g170157.PivotWS = In_PivotWS16_g170157;
				Data16_g170157.PivotWO = In_PivotWO16_g170157;
				Data16_g170157.NormalOS = In_NormalOS16_g170157;
				Data16_g170157.NormalWS = In_NormalWS16_g170157;
				Data16_g170157.NormalRawOS = In_NormalRawOS16_g170157;
				Data16_g170157.NormalRawWS = In_NormalRawWS16_g170157;
				Data16_g170157.TangentOS = In_TangentOS16_g170157;
				Data16_g170157.ViewDirWS = In_ViewDirWS16_g170157;
				Data16_g170157.VertexData = In_VertexData16_g170157;
				Data16_g170157.MotionData = In_MotionData16_g170157;
				Data16_g170157.BoundsData = In_BoundsData16_g170157;
				Data16_g170157.RotationData = In_RotationData16_g170157;
				TVEModelData Data15_g170335 = Data16_g170157;
				float Out_Dummy15_g170335 = 0;
				float3 Out_PositionOS15_g170335 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170335 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170335 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170335 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170335 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170335 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170335 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170335 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170335 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170335 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170335 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170335 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170335 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170335 = float3( 0,0,0 );
				float4 Out_VertexData15_g170335 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170335 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170335 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170335 = float4( 0,0,0,0 );
				Out_Dummy15_g170335 = Data15_g170335.Dummy;
				Out_PositionOS15_g170335 = Data15_g170335.PositionOS;
				Out_PositionWS15_g170335 = Data15_g170335.PositionWS;
				Out_PositionWO15_g170335 = Data15_g170335.PositionWO;
				Out_PositionRawOS15_g170335 = Data15_g170335.PositionRawOS;
				Out_PositionAddOS15_g170335 = Data15_g170335.PositionAddOS;
				Out_PivotOS15_g170335 = Data15_g170335.PivotOS;
				Out_PivotWS15_g170335 = Data15_g170335.PivotWS;
				Out_PivotWO15_g170335 = Data15_g170335.PivotWO;
				Out_NormalOS15_g170335 = Data15_g170335.NormalOS;
				Out_NormalWS15_g170335 = Data15_g170335.NormalWS;
				Out_NormalRawOS15_g170335 = Data15_g170335.NormalRawOS;
				Out_NormalRawWS15_g170335 = Data15_g170335.NormalRawWS;
				Out_TangentOS15_g170335 = Data15_g170335.TangentOS;
				Out_ViewDirWS15_g170335 = Data15_g170335.ViewDirWS;
				Out_VertexData15_g170335 = Data15_g170335.VertexData;
				Out_MotionData15_g170335 = Data15_g170335.MotionData;
				Out_BoundsData15_g170335 = Data15_g170335.BoundsData;
				Out_RotationData15_g170335 = Data15_g170335.RotationData;
				half3 Model_PositionWO222_g170334 = Out_PositionWO15_g170335;
				float3 temp_output_279_0_g170345 = Model_PositionWO222_g170334;
				half3 WorldPosition238_g170345 = temp_output_279_0_g170345;
				half4 localSamplePlanar2D238_g170345 = SamplePlanar2D( Texture238_g170345 , Sampler238_g170345 , Coords238_g170345 , WorldPosition238_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170345) = _MainAlbedoTex;
				SamplerState Sampler246_g170345 = SS19_g170348;
				half4 Coords246_g170345 = temp_output_37_0_g170345;
				half3 WorldPosition246_g170345 = temp_output_279_0_g170345;
				half3 Model_NormalWS226_g170334 = Out_NormalWS15_g170335;
				float3 temp_output_280_0_g170345 = Model_NormalWS226_g170334;
				half3 WorldNormal246_g170345 = temp_output_280_0_g170345;
				half4 localSamplePlanar3D246_g170345 = SamplePlanar3D( Texture246_g170345 , Sampler246_g170345 , Coords246_g170345 , WorldPosition246_g170345 , WorldNormal246_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170345) = _MainAlbedoTex;
				SamplerState Sampler234_g170345 = SS19_g170348;
				float4 Coords234_g170345 = temp_output_37_0_g170345;
				float3 WorldPosition234_g170345 = temp_output_279_0_g170345;
				float4 localSampleStochastic2D234_g170345 = SampleStochastic2D( Texture234_g170345 , Sampler234_g170345 , Coords234_g170345 , WorldPosition234_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170345) = _MainAlbedoTex;
				SamplerState Sampler263_g170345 = SS19_g170348;
				half4 Coords263_g170345 = temp_output_37_0_g170345;
				half3 WorldPosition263_g170345 = temp_output_279_0_g170345;
				half3 WorldNormal263_g170345 = temp_output_280_0_g170345;
				half4 localSampleStochastic3D263_g170345 = SampleStochastic3D( Texture263_g170345 , Sampler263_g170345 , Coords263_g170345 , WorldPosition263_g170345 , WorldNormal263_g170345 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170334 = localSampleMain276_g170345;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170334 = localSampleExtra275_g170345;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170334 = localSamplePlanar2D238_g170345;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170334 = localSamplePlanar3D246_g170345;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170334 = localSampleStochastic2D234_g170345;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170334 = localSampleStochastic3D263_g170345;
				#else
				float4 staticSwitch184_g170334 = localSampleMain276_g170345;
				#endif
				half4 Local_AlbedoTex185_g170334 = staticSwitch184_g170334;
				float3 lerpResult53_g170334 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170334).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170334 = lerpResult53_g170334;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170347) = _MainShaderTex;
				float localFilterTexture30_g170350 = ( 0.0 );
				SamplerState SamplerDefault30_g170350 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170350 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170350 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170350 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170350 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170350 = SamplerDefault30_g170350;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170350 = SamplerDefault30_g170350;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170350 = SamplerPoint30_g170350;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170350 = SamplerLow30_g170350;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170350 = SamplerMedium30_g170350;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170350 = SamplerHigh30_g170350;
				#endif
				SamplerState Sampler276_g170347 = SS30_g170350;
				float4 temp_output_37_0_g170347 = Local_Coords180_g170334;
				half4 Coords276_g170347 = temp_output_37_0_g170347;
				half2 TexCoord276_g170347 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170347 = SampleMain( Texture276_g170347 , Sampler276_g170347 , Coords276_g170347 , TexCoord276_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170347) = _MainShaderTex;
				SamplerState Sampler275_g170347 = SS30_g170350;
				half4 Coords275_g170347 = temp_output_37_0_g170347;
				half2 TexCoord275_g170347 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170347 = SampleExtra( Texture275_g170347 , Sampler275_g170347 , Coords275_g170347 , TexCoord275_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170347) = _MainShaderTex;
				SamplerState Sampler238_g170347 = SS30_g170350;
				half4 Coords238_g170347 = temp_output_37_0_g170347;
				float3 temp_output_279_0_g170347 = Model_PositionWO222_g170334;
				half3 WorldPosition238_g170347 = temp_output_279_0_g170347;
				half4 localSamplePlanar2D238_g170347 = SamplePlanar2D( Texture238_g170347 , Sampler238_g170347 , Coords238_g170347 , WorldPosition238_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170347) = _MainShaderTex;
				SamplerState Sampler246_g170347 = SS30_g170350;
				half4 Coords246_g170347 = temp_output_37_0_g170347;
				half3 WorldPosition246_g170347 = temp_output_279_0_g170347;
				float3 temp_output_280_0_g170347 = Model_NormalWS226_g170334;
				half3 WorldNormal246_g170347 = temp_output_280_0_g170347;
				half4 localSamplePlanar3D246_g170347 = SamplePlanar3D( Texture246_g170347 , Sampler246_g170347 , Coords246_g170347 , WorldPosition246_g170347 , WorldNormal246_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170347) = _MainShaderTex;
				SamplerState Sampler234_g170347 = SS30_g170350;
				float4 Coords234_g170347 = temp_output_37_0_g170347;
				float3 WorldPosition234_g170347 = temp_output_279_0_g170347;
				float4 localSampleStochastic2D234_g170347 = SampleStochastic2D( Texture234_g170347 , Sampler234_g170347 , Coords234_g170347 , WorldPosition234_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170347) = _MainShaderTex;
				SamplerState Sampler263_g170347 = SS30_g170350;
				half4 Coords263_g170347 = temp_output_37_0_g170347;
				half3 WorldPosition263_g170347 = temp_output_279_0_g170347;
				half3 WorldNormal263_g170347 = temp_output_280_0_g170347;
				half4 localSampleStochastic3D263_g170347 = SampleStochastic3D( Texture263_g170347 , Sampler263_g170347 , Coords263_g170347 , WorldPosition263_g170347 , WorldNormal263_g170347 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170334 = localSampleMain276_g170347;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170334 = localSampleExtra275_g170347;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170334 = localSamplePlanar2D238_g170347;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170334 = localSamplePlanar3D246_g170347;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170334 = localSampleStochastic2D234_g170347;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170334 = localSampleStochastic3D263_g170347;
				#else
				float4 staticSwitch198_g170334 = localSampleMain276_g170347;
				#endif
				half4 Local_MasksTex199_g170334 = staticSwitch198_g170334;
				float lerpResult23_g170334 = lerp( 1.0 , (Local_MasksTex199_g170334).y , _MainOcclusionValue);
				float4 appendResult73_g170334 = (float4(( (Local_MasksTex199_g170334).x * _MainMetallicValue ) , lerpResult23_g170334 , (Local_MasksTex199_g170334).z , ( (Local_MasksTex199_g170334).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170334 = appendResult73_g170334;
				float clampResult17_g170340 = clamp( (Local_Masks109_g170334).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170341 = _MainMultiRemap.x;
				float temp_output_10_0_g170341 = ( _MainMultiRemap.y - temp_output_7_0_g170341 );
				half Local_MultiMask78_g170334 = saturate( ( ( clampResult17_g170340 - temp_output_7_0_g170341 ) / ( temp_output_10_0_g170341 + 0.0001 ) ) );
				float lerpResult58_g170334 = lerp( 1.0 , Local_MultiMask78_g170334 , _MainColorMode);
				float4 lerpResult62_g170334 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170334);
				half3 Local_ColorRGB93_g170334 = (lerpResult62_g170334).rgb;
				half3 Local_Albedo139_g170334 = ( Local_AlbedoRGB107_g170334 * Local_ColorRGB93_g170334 );
				float3 In_Albedo3_g170344 = Local_Albedo139_g170334;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170346) = _MainNormalTex;
				float localFilterTexture29_g170349 = ( 0.0 );
				SamplerState SamplerDefault29_g170349 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170349 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170349 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170349 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170349 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170349 = SamplerDefault29_g170349;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170349 = SamplerDefault29_g170349;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170349 = SamplerPoint29_g170349;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170349 = SamplerLow29_g170349;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170349 = SamplerMedium29_g170349;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170349 = SamplerHigh29_g170349;
				#endif
				SamplerState Sampler276_g170346 = SS29_g170349;
				float4 temp_output_37_0_g170346 = Local_Coords180_g170334;
				half4 Coords276_g170346 = temp_output_37_0_g170346;
				half2 TexCoord276_g170346 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170346 = SampleMain( Texture276_g170346 , Sampler276_g170346 , Coords276_g170346 , TexCoord276_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170346) = _MainNormalTex;
				SamplerState Sampler275_g170346 = SS29_g170349;
				half4 Coords275_g170346 = temp_output_37_0_g170346;
				half2 TexCoord275_g170346 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170346 = SampleExtra( Texture275_g170346 , Sampler275_g170346 , Coords275_g170346 , TexCoord275_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170346) = _MainNormalTex;
				SamplerState Sampler238_g170346 = SS29_g170349;
				half4 Coords238_g170346 = temp_output_37_0_g170346;
				float3 temp_output_279_0_g170346 = Model_PositionWO222_g170334;
				half3 WorldPosition238_g170346 = temp_output_279_0_g170346;
				half4 localSamplePlanar2D238_g170346 = SamplePlanar2D( Texture238_g170346 , Sampler238_g170346 , Coords238_g170346 , WorldPosition238_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170346) = _MainNormalTex;
				SamplerState Sampler246_g170346 = SS29_g170349;
				half4 Coords246_g170346 = temp_output_37_0_g170346;
				half3 WorldPosition246_g170346 = temp_output_279_0_g170346;
				float3 temp_output_280_0_g170346 = Model_NormalWS226_g170334;
				half3 WorldNormal246_g170346 = temp_output_280_0_g170346;
				half4 localSamplePlanar3D246_g170346 = SamplePlanar3D( Texture246_g170346 , Sampler246_g170346 , Coords246_g170346 , WorldPosition246_g170346 , WorldNormal246_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170346) = _MainNormalTex;
				SamplerState Sampler234_g170346 = SS29_g170349;
				float4 Coords234_g170346 = temp_output_37_0_g170346;
				float3 WorldPosition234_g170346 = temp_output_279_0_g170346;
				float4 localSampleStochastic2D234_g170346 = SampleStochastic2D( Texture234_g170346 , Sampler234_g170346 , Coords234_g170346 , WorldPosition234_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170346) = _MainNormalTex;
				SamplerState Sampler263_g170346 = SS29_g170349;
				half4 Coords263_g170346 = temp_output_37_0_g170346;
				half3 WorldPosition263_g170346 = temp_output_279_0_g170346;
				half3 WorldNormal263_g170346 = temp_output_280_0_g170346;
				half4 localSampleStochastic3D263_g170346 = SampleStochastic3D( Texture263_g170346 , Sampler263_g170346 , Coords263_g170346 , WorldPosition263_g170346 , WorldNormal263_g170346 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170334 = localSampleMain276_g170346;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170334 = localSampleExtra275_g170346;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170334 = localSamplePlanar2D238_g170346;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170334 = localSamplePlanar3D246_g170346;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170334 = localSampleStochastic2D234_g170346;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170334 = localSampleStochastic3D263_g170346;
				#else
				float4 staticSwitch193_g170334 = localSampleMain276_g170346;
				#endif
				half4 Local_NormaTex191_g170334 = staticSwitch193_g170334;
				half4 Normal_Packed45_g170336 = Local_NormaTex191_g170334;
				float2 appendResult58_g170336 = (float2(( (Normal_Packed45_g170336).x * (Normal_Packed45_g170336).w ) , (Normal_Packed45_g170336).y));
				half2 Normal_Default50_g170336 = appendResult58_g170336;
				half2 Normal_ASTC41_g170336 = (Normal_Packed45_g170336).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170336 = Normal_ASTC41_g170336;
				#else
				float2 staticSwitch38_g170336 = Normal_Default50_g170336;
				#endif
				half2 Normal_NO_DTX544_g170336 = (Normal_Packed45_g170336).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170336 = Normal_NO_DTX544_g170336;
				#else
				float2 staticSwitch37_g170336 = staticSwitch38_g170336;
				#endif
				float2 temp_output_26_0_g170334 = ( (staticSwitch37_g170336*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3(WorldTangent,WorldBiTangent,WorldNormal);
				half2 Normal_Planar45_g170337 = temp_output_26_0_g170334;
				float2 break71_g170337 = Normal_Planar45_g170337;
				float3 appendResult72_g170337 = (float3(break71_g170337.x , 0.0 , break71_g170337.y));
				float2 temp_output_205_0_g170334 = (mul( ase_worldToTangent, appendResult72_g170337 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170334 = temp_output_26_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170334 = temp_output_26_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170334 = temp_output_205_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170334 = temp_output_205_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170334 = temp_output_205_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170334 = temp_output_205_0_g170334;
				#else
				float2 staticSwitch204_g170334 = temp_output_26_0_g170334;
				#endif
				half2 Local_NormalTS108_g170334 = staticSwitch204_g170334;
				float2 In_NormalTS3_g170344 = Local_NormalTS108_g170334;
				float3 appendResult68_g170338 = (float3(Local_NormalTS108_g170334 , 1.0));
				float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
				float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
				float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
				float3 tanNormal74_g170338 = appendResult68_g170338;
				float3 worldNormal74_g170338 = normalize( float3(dot(tanToWorld0,tanNormal74_g170338), dot(tanToWorld1,tanNormal74_g170338), dot(tanToWorld2,tanNormal74_g170338)) );
				half3 Local_NormalWS250_g170334 = worldNormal74_g170338;
				float3 In_NormalWS3_g170344 = Local_NormalWS250_g170334;
				float4 In_Shader3_g170344 = Local_Masks109_g170334;
				float4 In_Emissive3_g170344 = half4(1,1,1,1);
				float3 temp_output_3_0_g170339 = Local_Albedo139_g170334;
				float dotResult20_g170339 = dot( temp_output_3_0_g170339 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170334 = dotResult20_g170339;
				float In_Grayscale3_g170344 = Local_Grayscale110_g170334;
				float clampResult144_g170334 = clamp( saturate( ( Local_Grayscale110_g170334 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170334 = clampResult144_g170334;
				float In_Luminosity3_g170344 = Local_Luminosity145_g170334;
				float In_MultiMask3_g170344 = Local_MultiMask78_g170334;
				float temp_output_187_0_g170334 = (Local_AlbedoTex185_g170334).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170334 = ( temp_output_187_0_g170334 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170334 = temp_output_187_0_g170334;
				#endif
				half Local_AlphaClip111_g170334 = staticSwitch236_g170334;
				float In_AlphaClip3_g170344 = Local_AlphaClip111_g170334;
				half Local_AlphaFade246_g170334 = (lerpResult62_g170334).a;
				float In_AlphaFade3_g170344 = Local_AlphaFade246_g170334;
				float3 temp_cast_5 = (1.0).xxx;
				float3 In_Translucency3_g170344 = temp_cast_5;
				float In_Transmission3_g170344 = 1.0;
				float In_Thickness3_g170344 = 0.0;
				float In_Diffusion3_g170344 = 0.0;
				Data3_g170344.Dummy = In_Dummy3_g170344;
				Data3_g170344.Albedo = In_Albedo3_g170344;
				Data3_g170344.NormalTS = In_NormalTS3_g170344;
				Data3_g170344.NormalWS = In_NormalWS3_g170344;
				Data3_g170344.Shader = In_Shader3_g170344;
				Data3_g170344.Emissive= In_Emissive3_g170344;
				Data3_g170344.MultiMask = In_MultiMask3_g170344;
				Data3_g170344.Grayscale = In_Grayscale3_g170344;
				Data3_g170344.Luminosity = In_Luminosity3_g170344;
				Data3_g170344.AlphaClip = In_AlphaClip3_g170344;
				Data3_g170344.AlphaFade = In_AlphaFade3_g170344;
				Data3_g170344.Translucency = In_Translucency3_g170344;
				Data3_g170344.Transmission = In_Transmission3_g170344;
				Data3_g170344.Thickness = In_Thickness3_g170344;
				Data3_g170344.Diffusion = In_Diffusion3_g170344;
				TVEVisualData Data4_g170366 = Data3_g170344;
				float Out_Dummy4_g170366 = 0;
				float3 Out_Albedo4_g170366 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170366 = float2( 0,0 );
				float3 Out_NormalWS4_g170366 = float3( 0,0,0 );
				float4 Out_Shader4_g170366 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170366 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170366 = 0;
				float Out_Grayscale4_g170366 = 0;
				float Out_Luminosity4_g170366 = 0;
				float Out_AlphaClip4_g170366 = 0;
				float Out_AlphaFade4_g170366 = 0;
				float3 Out_Translucency4_g170366 = float3( 0,0,0 );
				float Out_Transmission4_g170366 = 0;
				float Out_Thickness4_g170366 = 0;
				float Out_Diffusion4_g170366 = 0;
				Out_Dummy4_g170366 = Data4_g170366.Dummy;
				Out_Albedo4_g170366 = Data4_g170366.Albedo;
				Out_NormalTS4_g170366 = Data4_g170366.NormalTS;
				Out_NormalWS4_g170366 = Data4_g170366.NormalWS;
				Out_Shader4_g170366 = Data4_g170366.Shader;
				Out_Emissive4_g170366= Data4_g170366.Emissive;
				Out_MultiMask4_g170366 = Data4_g170366.MultiMask;
				Out_Grayscale4_g170366 = Data4_g170366.Grayscale;
				Out_Luminosity4_g170366= Data4_g170366.Luminosity;
				Out_AlphaClip4_g170366 = Data4_g170366.AlphaClip;
				Out_AlphaFade4_g170366 = Data4_g170366.AlphaFade;
				Out_Translucency4_g170366 = Data4_g170366.Translucency;
				Out_Transmission4_g170366 = Data4_g170366.Transmission;
				Out_Thickness4_g170366 = Data4_g170366.Thickness;
				Out_Diffusion4_g170366 = Data4_g170366.Diffusion;
				half3 Visual_Albedo527_g170352 = Out_Albedo4_g170366;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170353) = _SecondAlbedoTex;
				float localFilterTexture19_g170383 = ( 0.0 );
				SamplerState SamplerDefault19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170383 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170383 = SamplerDefault19_g170383;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170383 = SamplerDefault19_g170383;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170383 = SamplerPoint19_g170383;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170383 = SamplerLow19_g170383;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170383 = SamplerMedium19_g170383;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170383 = SamplerHigh19_g170383;
				#endif
				SamplerState Sampler276_g170353 = SS19_g170383;
				half4 Local_LayerCoords790_g170352 = _second_coord_value;
				float4 temp_output_37_0_g170353 = Local_LayerCoords790_g170352;
				half4 Coords276_g170353 = temp_output_37_0_g170353;
				half2 TexCoord276_g170353 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170353 = SampleMain( Texture276_g170353 , Sampler276_g170353 , Coords276_g170353 , TexCoord276_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170353) = _SecondAlbedoTex;
				SamplerState Sampler275_g170353 = SS19_g170383;
				half4 Coords275_g170353 = temp_output_37_0_g170353;
				half2 TexCoord275_g170353 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170353 = SampleExtra( Texture275_g170353 , Sampler275_g170353 , Coords275_g170353 , TexCoord275_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170353) = _SecondAlbedoTex;
				SamplerState Sampler238_g170353 = SS19_g170383;
				half4 Coords238_g170353 = temp_output_37_0_g170353;
				TVEModelData Data15_g170364 = Data16_g170157;
				float Out_Dummy15_g170364 = 0;
				float3 Out_PositionOS15_g170364 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170364 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170364 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170364 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170364 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170364 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170364 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170364 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170364 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170364 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170364 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170364 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170364 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170364 = float3( 0,0,0 );
				float4 Out_VertexData15_g170364 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170364 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170364 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170364 = float4( 0,0,0,0 );
				Out_Dummy15_g170364 = Data15_g170364.Dummy;
				Out_PositionOS15_g170364 = Data15_g170364.PositionOS;
				Out_PositionWS15_g170364 = Data15_g170364.PositionWS;
				Out_PositionWO15_g170364 = Data15_g170364.PositionWO;
				Out_PositionRawOS15_g170364 = Data15_g170364.PositionRawOS;
				Out_PositionAddOS15_g170364 = Data15_g170364.PositionAddOS;
				Out_PivotOS15_g170364 = Data15_g170364.PivotOS;
				Out_PivotWS15_g170364 = Data15_g170364.PivotWS;
				Out_PivotWO15_g170364 = Data15_g170364.PivotWO;
				Out_NormalOS15_g170364 = Data15_g170364.NormalOS;
				Out_NormalWS15_g170364 = Data15_g170364.NormalWS;
				Out_NormalRawOS15_g170364 = Data15_g170364.NormalRawOS;
				Out_NormalRawWS15_g170364 = Data15_g170364.NormalRawWS;
				Out_TangentOS15_g170364 = Data15_g170364.TangentOS;
				Out_ViewDirWS15_g170364 = Data15_g170364.ViewDirWS;
				Out_VertexData15_g170364 = Data15_g170364.VertexData;
				Out_MotionData15_g170364 = Data15_g170364.MotionData;
				Out_BoundsData15_g170364 = Data15_g170364.BoundsData;
				Out_RotationData15_g170364 = Data15_g170364.RotationData;
				half3 Model_PositionWO636_g170352 = Out_PositionWO15_g170364;
				float3 temp_output_279_0_g170353 = Model_PositionWO636_g170352;
				half3 WorldPosition238_g170353 = temp_output_279_0_g170353;
				half4 localSamplePlanar2D238_g170353 = SamplePlanar2D( Texture238_g170353 , Sampler238_g170353 , Coords238_g170353 , WorldPosition238_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170353) = _SecondAlbedoTex;
				SamplerState Sampler246_g170353 = SS19_g170383;
				half4 Coords246_g170353 = temp_output_37_0_g170353;
				half3 WorldPosition246_g170353 = temp_output_279_0_g170353;
				half3 Model_NormalWS869_g170352 = Out_NormalWS15_g170364;
				float3 temp_output_280_0_g170353 = Model_NormalWS869_g170352;
				half3 WorldNormal246_g170353 = temp_output_280_0_g170353;
				half4 localSamplePlanar3D246_g170353 = SamplePlanar3D( Texture246_g170353 , Sampler246_g170353 , Coords246_g170353 , WorldPosition246_g170353 , WorldNormal246_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170353) = _SecondAlbedoTex;
				SamplerState Sampler234_g170353 = SS19_g170383;
				float4 Coords234_g170353 = temp_output_37_0_g170353;
				float3 WorldPosition234_g170353 = temp_output_279_0_g170353;
				float4 localSampleStochastic2D234_g170353 = SampleStochastic2D( Texture234_g170353 , Sampler234_g170353 , Coords234_g170353 , WorldPosition234_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170353) = _SecondAlbedoTex;
				SamplerState Sampler263_g170353 = SS19_g170383;
				half4 Coords263_g170353 = temp_output_37_0_g170353;
				half3 WorldPosition263_g170353 = temp_output_279_0_g170353;
				half3 WorldNormal263_g170353 = temp_output_280_0_g170353;
				half4 localSampleStochastic3D263_g170353 = SampleStochastic3D( Texture263_g170353 , Sampler263_g170353 , Coords263_g170353 , WorldPosition263_g170353 , WorldNormal263_g170353 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170352 = localSampleMain276_g170353;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170352 = localSampleExtra275_g170353;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170352 = localSamplePlanar2D238_g170353;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170352 = localSamplePlanar3D246_g170353;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170352 = localSampleStochastic2D234_g170353;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170352 = localSampleStochastic3D263_g170353;
				#else
				float4 staticSwitch693_g170352 = localSampleMain276_g170353;
				#endif
				half4 Local_AlbedoTex777_g170352 = staticSwitch693_g170352;
				float3 lerpResult716_g170352 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170352).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170352 = lerpResult716_g170352;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170355) = _SecondShaderTex;
				float localFilterTexture30_g170385 = ( 0.0 );
				SamplerState SamplerDefault30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170385 = SamplerDefault30_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170385 = SamplerDefault30_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170385 = SamplerPoint30_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170385 = SamplerLow30_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170385 = SamplerMedium30_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170385 = SamplerHigh30_g170385;
				#endif
				SamplerState Sampler276_g170355 = SS30_g170385;
				float4 temp_output_37_0_g170355 = Local_LayerCoords790_g170352;
				half4 Coords276_g170355 = temp_output_37_0_g170355;
				half2 TexCoord276_g170355 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170355 = SampleMain( Texture276_g170355 , Sampler276_g170355 , Coords276_g170355 , TexCoord276_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170355) = _SecondShaderTex;
				SamplerState Sampler275_g170355 = SS30_g170385;
				half4 Coords275_g170355 = temp_output_37_0_g170355;
				half2 TexCoord275_g170355 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170355 = SampleExtra( Texture275_g170355 , Sampler275_g170355 , Coords275_g170355 , TexCoord275_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170355) = _SecondShaderTex;
				SamplerState Sampler238_g170355 = SS30_g170385;
				half4 Coords238_g170355 = temp_output_37_0_g170355;
				float3 temp_output_279_0_g170355 = Model_PositionWO636_g170352;
				half3 WorldPosition238_g170355 = temp_output_279_0_g170355;
				half4 localSamplePlanar2D238_g170355 = SamplePlanar2D( Texture238_g170355 , Sampler238_g170355 , Coords238_g170355 , WorldPosition238_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170355) = _SecondShaderTex;
				SamplerState Sampler246_g170355 = SS30_g170385;
				half4 Coords246_g170355 = temp_output_37_0_g170355;
				half3 WorldPosition246_g170355 = temp_output_279_0_g170355;
				float3 temp_output_280_0_g170355 = Model_NormalWS869_g170352;
				half3 WorldNormal246_g170355 = temp_output_280_0_g170355;
				half4 localSamplePlanar3D246_g170355 = SamplePlanar3D( Texture246_g170355 , Sampler246_g170355 , Coords246_g170355 , WorldPosition246_g170355 , WorldNormal246_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170355) = _SecondShaderTex;
				SamplerState Sampler234_g170355 = SS30_g170385;
				float4 Coords234_g170355 = temp_output_37_0_g170355;
				float3 WorldPosition234_g170355 = temp_output_279_0_g170355;
				float4 localSampleStochastic2D234_g170355 = SampleStochastic2D( Texture234_g170355 , Sampler234_g170355 , Coords234_g170355 , WorldPosition234_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170355) = _SecondShaderTex;
				SamplerState Sampler263_g170355 = SS30_g170385;
				half4 Coords263_g170355 = temp_output_37_0_g170355;
				half3 WorldPosition263_g170355 = temp_output_279_0_g170355;
				half3 WorldNormal263_g170355 = temp_output_280_0_g170355;
				half4 localSampleStochastic3D263_g170355 = SampleStochastic3D( Texture263_g170355 , Sampler263_g170355 , Coords263_g170355 , WorldPosition263_g170355 , WorldNormal263_g170355 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170352 = localSampleMain276_g170355;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170352 = localSampleExtra275_g170355;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170352 = localSamplePlanar2D238_g170355;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170352 = localSamplePlanar3D246_g170355;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170352 = localSampleStochastic2D234_g170355;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170352 = localSampleStochastic3D263_g170355;
				#else
				float4 staticSwitch722_g170352 = localSampleMain276_g170355;
				#endif
				half4 Local_ShaderTex775_g170352 = staticSwitch722_g170352;
				float lerpResult739_g170352 = lerp( 1.0 , (Local_ShaderTex775_g170352).y , _SecondOcclusionValue);
				float4 appendResult749_g170352 = (float4(( (Local_ShaderTex775_g170352).x * _SecondMetallicValue ) , lerpResult739_g170352 , (Local_ShaderTex775_g170352).z , ( (Local_ShaderTex775_g170352).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170352 = appendResult749_g170352;
				float clampResult17_g170359 = clamp( (Local_Masks750_g170352).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170360 = _SecondMultiRemap.x;
				float temp_output_10_0_g170360 = ( _SecondMultiRemap.y - temp_output_7_0_g170360 );
				float temp_output_765_0_g170352 = saturate( ( ( clampResult17_g170359 - temp_output_7_0_g170360 ) / ( temp_output_10_0_g170360 + 0.0001 ) ) );
				half Local_MultiMask767_g170352 = temp_output_765_0_g170352;
				float lerpResult705_g170352 = lerp( 1.0 , Local_MultiMask767_g170352 , _SecondColorMode);
				float4 lerpResult706_g170352 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170352);
				half3 Local_ColorRGB774_g170352 = (lerpResult706_g170352).rgb;
				half3 Local_Albedo768_g170352 = ( Local_AlbedoRGB771_g170352 * Local_ColorRGB774_g170352 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170379 = 2.0;
				#else
				float staticSwitch1_g170379 = 4.594794;
				#endif
				float3 lerpResult985_g170352 = lerp( Local_Albedo768_g170352 , ( Visual_Albedo527_g170352 * Local_Albedo768_g170352 * staticSwitch1_g170379 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170356) = _SecondMaskTex;
				SamplerState Sampler276_g170356 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170352 = _second_mask_coord_value;
				float4 temp_output_37_0_g170356 = Local_BlendCoords813_g170352;
				half4 Coords276_g170356 = temp_output_37_0_g170356;
				half2 TexCoord276_g170356 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170356 = SampleMain( Texture276_g170356 , Sampler276_g170356 , Coords276_g170356 , TexCoord276_g170356 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170356) = _SecondMaskTex;
				SamplerState Sampler275_g170356 = sampler_Linear_Repeat;
				half4 Coords275_g170356 = temp_output_37_0_g170356;
				half2 TexCoord275_g170356 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170356 = SampleExtra( Texture275_g170356 , Sampler275_g170356 , Coords275_g170356 , TexCoord275_g170356 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170356) = _SecondMaskTex;
				SamplerState Sampler238_g170356 = sampler_Linear_Repeat;
				half4 Coords238_g170356 = temp_output_37_0_g170356;
				float3 temp_output_279_0_g170356 = Model_PositionWO636_g170352;
				half3 WorldPosition238_g170356 = temp_output_279_0_g170356;
				half4 localSamplePlanar2D238_g170356 = SamplePlanar2D( Texture238_g170356 , Sampler238_g170356 , Coords238_g170356 , WorldPosition238_g170356 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170356) = _SecondMaskTex;
				SamplerState Sampler246_g170356 = sampler_Linear_Repeat;
				half4 Coords246_g170356 = temp_output_37_0_g170356;
				half3 WorldPosition246_g170356 = temp_output_279_0_g170356;
				float3 temp_output_280_0_g170356 = Model_NormalWS869_g170352;
				half3 WorldNormal246_g170356 = temp_output_280_0_g170356;
				half4 localSamplePlanar3D246_g170356 = SamplePlanar3D( Texture246_g170356 , Sampler246_g170356 , Coords246_g170356 , WorldPosition246_g170356 , WorldNormal246_g170356 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170352 = localSampleMain276_g170356;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170352 = localSampleExtra275_g170356;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170352 = localSamplePlanar2D238_g170356;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170352 = localSamplePlanar3D246_g170356;
				#else
				float4 staticSwitch817_g170352 = localSampleMain276_g170356;
				#endif
				half4 Local_MaskTex861_g170352 = staticSwitch817_g170352;
				float clampResult17_g170370 = clamp( (Local_MaskTex861_g170352).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170369 = _SecondMaskRemap.x;
				float temp_output_10_0_g170369 = ( _SecondMaskRemap.y - temp_output_7_0_g170369 );
				float lerpResult1015_g170352 = lerp( 1.0 , saturate( ( ( clampResult17_g170370 - temp_output_7_0_g170369 ) / ( temp_output_10_0_g170369 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170352 = lerpResult1015_g170352;
				half3 Visual_NormalWS951_g170352 = Out_NormalWS4_g170366;
				float clampResult17_g170371 = clamp( saturate( (Visual_NormalWS951_g170352).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170372 = _SecondProjRemap.x;
				float temp_output_10_0_g170372 = ( _SecondProjRemap.y - temp_output_7_0_g170372 );
				float lerpResult996_g170352 = lerp( 1.0 , saturate( ( ( clampResult17_g170371 - temp_output_7_0_g170372 ) / ( temp_output_10_0_g170372 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170352 = lerpResult996_g170352;
				half4 Model_VertexMasks964_g170352 = Out_VertexData15_g170364;
				float4 break965_g170352 = Model_VertexMasks964_g170352;
				float4 break33_g170373 = _second_vert_mode;
				float temp_output_30_0_g170373 = ( break965_g170352.x * break33_g170373.x );
				float temp_output_29_0_g170373 = ( break965_g170352.y * break33_g170373.y );
				float temp_output_31_0_g170373 = ( break965_g170352.z * break33_g170373.z );
				float temp_output_28_0_g170373 = ( temp_output_30_0_g170373 + temp_output_29_0_g170373 + temp_output_31_0_g170373 + ( break965_g170352.w * break33_g170373.w ) );
				float clampResult17_g170367 = clamp( temp_output_28_0_g170373 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170368 = _SecondMeshRemap.x;
				float temp_output_10_0_g170368 = ( _SecondMeshRemap.y - temp_output_7_0_g170368 );
				float lerpResult1017_g170352 = lerp( 1.0 , saturate( ( ( clampResult17_g170367 - temp_output_7_0_g170368 ) / ( temp_output_10_0_g170368 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170381 = lerpResult1017_g170352;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170381 = ( temp_output_6_0_g170381 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170381 = temp_output_6_0_g170381;
				#endif
				float temp_output_987_0_g170352 = staticSwitch14_g170381;
				half Blend_VertMask918_g170352 = temp_output_987_0_g170352;
				float localBuildGlobalData204_g170159 = ( 0.0 );
				TVEGlobalData Data204_g170159 = (TVEGlobalData)0;
				half Dummy211_g170159 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g170159 = Dummy211_g170159;
				float4 temp_output_362_164_g170159 = TVE_CoatParams;
				half4 Coat_Params302_g170159 = temp_output_362_164_g170159;
				float4 In_CoatParams204_g170159 = Coat_Params302_g170159;
				float4 temp_output_361_164_g170159 = TVE_PaintParams;
				half4 Paint_Params71_g170159 = temp_output_361_164_g170159;
				float4 In_PaintParams204_g170159 = Paint_Params71_g170159;
				float4 temp_output_365_163_g170159 = TVE_GlowParams;
				half4 Glow_Params248_g170159 = temp_output_365_163_g170159;
				float4 In_GlowParams204_g170159 = Glow_Params248_g170159;
				float4 temp_output_363_141_g170159 = TVE_AtmoParams;
				half4 Atmo_Params80_g170159 = temp_output_363_141_g170159;
				float4 In_AtmoParams204_g170159 = Atmo_Params80_g170159;
				float4 temp_output_364_139_g170159 = TVE_FormParams;
				half4 Form_Params112_g170159 = temp_output_364_139_g170159;
				float4 In_FormParams204_g170159 = Form_Params112_g170159;
				float4 temp_output_366_145_g170159 = TVE_WindParams;
				half4 Wind_Params88_g170159 = temp_output_366_145_g170159;
				float4 In_WindParams204_g170159 = Wind_Params88_g170159;
				float4 temp_output_367_145_g170159 = TVE_PushParams;
				half4 Push_Params335_g170159 = temp_output_367_145_g170159;
				float4 In_PushParams204_g170159 = Push_Params335_g170159;
				Data204_g170159.Dummy = In_Dummy204_g170159;
				Data204_g170159.CoatParams = In_CoatParams204_g170159;
				Data204_g170159.PaintParams = In_PaintParams204_g170159;
				Data204_g170159.GlowParams = In_GlowParams204_g170159;
				Data204_g170159.AtmoParams = In_AtmoParams204_g170159;
				Data204_g170159.FormParams= In_FormParams204_g170159;
				Data204_g170159.WindParams = In_WindParams204_g170159;
				Data204_g170159.PushParams = In_PushParams204_g170159;
				TVEGlobalData Data15_g170365 = Data204_g170159;
				float Out_Dummy15_g170365 = 0;
				float4 Out_CoatParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170365 = float4( 0,0,0,0 );
				Out_Dummy15_g170365 = Data15_g170365.Dummy;
				Out_CoatParams15_g170365 = Data15_g170365.CoatParams;
				Out_PaintParams15_g170365 = Data15_g170365.PaintParams;
				Out_GlowParams15_g170365 = Data15_g170365.GlowParams;
				Out_AtmoParams15_g170365= Data15_g170365.AtmoParams;
				Out_FadeParams15_g170365= Data15_g170365.FadeParams;
				Out_FormParams15_g170365 = Data15_g170365.FormParams;
				Out_LandParams15_g170365 = Data15_g170365.LandParams;
				Out_WindParams15_g170365 = Data15_g170365.WindParams;
				Out_PushParams15_g170365 = Data15_g170365.PushParams;
				half4 Global_CoatParams975_g170352 = Out_CoatParams15_g170365;
				float lerpResult1013_g170352 = lerp( 1.0 , (Global_CoatParams975_g170352).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170352 = lerpResult1013_g170352;
				#else
				float staticSwitch971_g170352 = 1.0;
				#endif
				half Blend_GlobalMask972_g170352 = staticSwitch971_g170352;
				float temp_output_432_0_g170352 = ( _SecondIntensityValue * Blend_TexMask429_g170352 * Blend_ProjMask434_g170352 * Blend_VertMask918_g170352 * Blend_GlobalMask972_g170352 );
				float clampResult17_g170375 = clamp( temp_output_432_0_g170352 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170374 = _SecondBlendRemap.x;
				float temp_output_10_0_g170374 = ( _SecondBlendRemap.y - temp_output_7_0_g170374 );
				half Blend_Mask412_g170352 = ( saturate( ( ( clampResult17_g170375 - temp_output_7_0_g170374 ) / ( temp_output_10_0_g170374 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170352 = lerp( Visual_Albedo527_g170352 , lerpResult985_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170352 = lerpResult403_g170352;
				#else
				float3 staticSwitch415_g170352 = Visual_Albedo527_g170352;
				#endif
				half3 Final_Albedo601_g170352 = staticSwitch415_g170352;
				float3 In_Albedo3_g170363 = Final_Albedo601_g170352;
				half2 Visual_NormalTS529_g170352 = Out_NormalTS4_g170366;
				float2 lerpResult40_g170377 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170352 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170354) = _SecondNormalTex;
				float localFilterTexture29_g170384 = ( 0.0 );
				SamplerState SamplerDefault29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170384 = SamplerDefault29_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170384 = SamplerDefault29_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170384 = SamplerPoint29_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170384 = SamplerLow29_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170384 = SamplerMedium29_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170384 = SamplerHigh29_g170384;
				#endif
				SamplerState Sampler276_g170354 = SS29_g170384;
				float4 temp_output_37_0_g170354 = Local_LayerCoords790_g170352;
				half4 Coords276_g170354 = temp_output_37_0_g170354;
				half2 TexCoord276_g170354 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170354 = SampleMain( Texture276_g170354 , Sampler276_g170354 , Coords276_g170354 , TexCoord276_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170354) = _SecondNormalTex;
				SamplerState Sampler275_g170354 = SS29_g170384;
				half4 Coords275_g170354 = temp_output_37_0_g170354;
				half2 TexCoord275_g170354 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170354 = SampleExtra( Texture275_g170354 , Sampler275_g170354 , Coords275_g170354 , TexCoord275_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170354) = _SecondNormalTex;
				SamplerState Sampler238_g170354 = SS29_g170384;
				half4 Coords238_g170354 = temp_output_37_0_g170354;
				float3 temp_output_279_0_g170354 = Model_PositionWO636_g170352;
				half3 WorldPosition238_g170354 = temp_output_279_0_g170354;
				half4 localSamplePlanar2D238_g170354 = SamplePlanar2D( Texture238_g170354 , Sampler238_g170354 , Coords238_g170354 , WorldPosition238_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170354) = _SecondNormalTex;
				SamplerState Sampler246_g170354 = SS29_g170384;
				half4 Coords246_g170354 = temp_output_37_0_g170354;
				half3 WorldPosition246_g170354 = temp_output_279_0_g170354;
				float3 temp_output_280_0_g170354 = Model_NormalWS869_g170352;
				half3 WorldNormal246_g170354 = temp_output_280_0_g170354;
				half4 localSamplePlanar3D246_g170354 = SamplePlanar3D( Texture246_g170354 , Sampler246_g170354 , Coords246_g170354 , WorldPosition246_g170354 , WorldNormal246_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170354) = _SecondNormalTex;
				SamplerState Sampler234_g170354 = SS29_g170384;
				float4 Coords234_g170354 = temp_output_37_0_g170354;
				float3 WorldPosition234_g170354 = temp_output_279_0_g170354;
				float4 localSampleStochastic2D234_g170354 = SampleStochastic2D( Texture234_g170354 , Sampler234_g170354 , Coords234_g170354 , WorldPosition234_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170354) = _SecondNormalTex;
				SamplerState Sampler263_g170354 = SS29_g170384;
				half4 Coords263_g170354 = temp_output_37_0_g170354;
				half3 WorldPosition263_g170354 = temp_output_279_0_g170354;
				half3 WorldNormal263_g170354 = temp_output_280_0_g170354;
				half4 localSampleStochastic3D263_g170354 = SampleStochastic3D( Texture263_g170354 , Sampler263_g170354 , Coords263_g170354 , WorldPosition263_g170354 , WorldNormal263_g170354 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170352 = localSampleMain276_g170354;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170352 = localSampleExtra275_g170354;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170352 = localSamplePlanar2D238_g170354;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170352 = localSamplePlanar3D246_g170354;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170352 = localSampleStochastic2D234_g170354;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170352 = localSampleStochastic3D263_g170354;
				#else
				float4 staticSwitch698_g170352 = localSampleMain276_g170354;
				#endif
				half4 Local_NormalTex776_g170352 = staticSwitch698_g170352;
				half4 Normal_Packed45_g170357 = Local_NormalTex776_g170352;
				float2 appendResult58_g170357 = (float2(( (Normal_Packed45_g170357).x * (Normal_Packed45_g170357).w ) , (Normal_Packed45_g170357).y));
				half2 Normal_Default50_g170357 = appendResult58_g170357;
				half2 Normal_ASTC41_g170357 = (Normal_Packed45_g170357).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170357 = Normal_ASTC41_g170357;
				#else
				float2 staticSwitch38_g170357 = Normal_Default50_g170357;
				#endif
				half2 Normal_NO_DTX544_g170357 = (Normal_Packed45_g170357).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170357 = Normal_NO_DTX544_g170357;
				#else
				float2 staticSwitch37_g170357 = staticSwitch38_g170357;
				#endif
				float2 temp_output_724_0_g170352 = ( (staticSwitch37_g170357*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170358 = temp_output_724_0_g170352;
				float2 break71_g170358 = Normal_Planar45_g170358;
				float3 appendResult72_g170358 = (float3(break71_g170358.x , 0.0 , break71_g170358.y));
				float2 temp_output_858_0_g170352 = (mul( ase_worldToTangent, appendResult72_g170358 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170352 = temp_output_724_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170352 = temp_output_724_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170352 = temp_output_858_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170352 = temp_output_858_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170352 = temp_output_858_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170352 = temp_output_858_0_g170352;
				#else
				float2 staticSwitch727_g170352 = temp_output_724_0_g170352;
				#endif
				half2 Local_NormalTS729_g170352 = staticSwitch727_g170352;
				float2 temp_output_36_0_g170377 = ( lerpResult40_g170377 + Local_NormalTS729_g170352 );
				float2 lerpResult405_g170352 = lerp( Visual_NormalTS529_g170352 , temp_output_36_0_g170377 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170352 = lerpResult405_g170352;
				#else
				float2 staticSwitch418_g170352 = Visual_NormalTS529_g170352;
				#endif
				half2 Final_NormalTS612_g170352 = staticSwitch418_g170352;
				float2 In_NormalTS3_g170363 = Final_NormalTS612_g170352;
				float3 appendResult68_g170378 = (float3(Final_NormalTS612_g170352 , 1.0));
				float3 tanNormal74_g170378 = appendResult68_g170378;
				float3 worldNormal74_g170378 = normalize( float3(dot(tanToWorld0,tanNormal74_g170378), dot(tanToWorld1,tanNormal74_g170378), dot(tanToWorld2,tanNormal74_g170378)) );
				half3 Final_NormalWS950_g170352 = worldNormal74_g170378;
				float3 In_NormalWS3_g170363 = Final_NormalWS950_g170352;
				half4 Visual_Shader531_g170352 = Out_Shader4_g170366;
				float4 lerpResult994_g170352 = lerp( Local_Masks750_g170352 , ( Visual_Shader531_g170352 * Local_Masks750_g170352 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170352 = lerp( Visual_Shader531_g170352 , lerpResult994_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170352 = lerpResult440_g170352;
				#else
				float4 staticSwitch451_g170352 = Visual_Shader531_g170352;
				#endif
				half4 Final_Masks613_g170352 = staticSwitch451_g170352;
				float4 In_Shader3_g170363 = Final_Masks613_g170352;
				float4 In_Emissive3_g170363 = Out_Emissive4_g170366;
				float3 temp_output_3_0_g170380 = Final_Albedo601_g170352;
				float dotResult20_g170380 = dot( temp_output_3_0_g170380 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170352 = dotResult20_g170380;
				float In_Grayscale3_g170363 = Final_Grayscale615_g170352;
				float clampResult651_g170352 = clamp( saturate( ( Final_Grayscale615_g170352 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170352 = clampResult651_g170352;
				float In_Luminosity3_g170363 = Final_Luminosity652_g170352;
				half Visual_MultiMask547_g170352 = Out_MultiMask4_g170366;
				float lerpResult477_g170352 = lerp( Visual_MultiMask547_g170352 , Local_MultiMask767_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float staticSwitch482_g170352 = lerpResult477_g170352;
				#else
				float staticSwitch482_g170352 = Visual_MultiMask547_g170352;
				#endif
				half Final_MultiMask572_g170352 = staticSwitch482_g170352;
				float In_MultiMask3_g170363 = Final_MultiMask572_g170352;
				half Visual_AlphaClip559_g170352 = Out_AlphaClip4_g170366;
				float temp_output_718_0_g170352 = (Local_AlbedoTex777_g170352).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170352 = ( temp_output_718_0_g170352 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170352 = temp_output_718_0_g170352;
				#endif
				half Local_AlphaClip772_g170352 = staticSwitch932_g170352;
				float lerpResult448_g170352 = lerp( Visual_AlphaClip559_g170352 , Local_AlphaClip772_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float staticSwitch564_g170352 = lerpResult448_g170352;
				#else
				float staticSwitch564_g170352 = Visual_AlphaClip559_g170352;
				#endif
				half Final_AlphaClip602_g170352 = staticSwitch564_g170352;
				float In_AlphaClip3_g170363 = Final_AlphaClip602_g170352;
				half Visual_AlphaFade588_g170352 = Out_AlphaFade4_g170366;
				half Local_AlphaFade773_g170352 = (lerpResult706_g170352).a;
				float lerpResult604_g170352 = lerp( Visual_AlphaFade588_g170352 , Local_AlphaFade773_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float staticSwitch608_g170352 = lerpResult604_g170352;
				#else
				float staticSwitch608_g170352 = Visual_AlphaFade588_g170352;
				#endif
				half Final_AlphaFade611_g170352 = staticSwitch608_g170352;
				float In_AlphaFade3_g170363 = Final_AlphaFade611_g170352;
				float3 In_Translucency3_g170363 = Out_Translucency4_g170366;
				float In_Transmission3_g170363 = Out_Transmission4_g170366;
				float In_Thickness3_g170363 = Out_Thickness4_g170366;
				float In_Diffusion3_g170363 = Out_Diffusion4_g170366;
				Data3_g170363.Dummy = In_Dummy3_g170363;
				Data3_g170363.Albedo = In_Albedo3_g170363;
				Data3_g170363.NormalTS = In_NormalTS3_g170363;
				Data3_g170363.NormalWS = In_NormalWS3_g170363;
				Data3_g170363.Shader = In_Shader3_g170363;
				Data3_g170363.Emissive= In_Emissive3_g170363;
				Data3_g170363.MultiMask = In_MultiMask3_g170363;
				Data3_g170363.Grayscale = In_Grayscale3_g170363;
				Data3_g170363.Luminosity = In_Luminosity3_g170363;
				Data3_g170363.AlphaClip = In_AlphaClip3_g170363;
				Data3_g170363.AlphaFade = In_AlphaFade3_g170363;
				Data3_g170363.Translucency = In_Translucency3_g170363;
				Data3_g170363.Transmission = In_Transmission3_g170363;
				Data3_g170363.Thickness = In_Thickness3_g170363;
				Data3_g170363.Diffusion = In_Diffusion3_g170363;
				TVEVisualData Data4_g170402 = Data3_g170363;
				float Out_Dummy4_g170402 = 0;
				float3 Out_Albedo4_g170402 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170402 = float2( 0,0 );
				float3 Out_NormalWS4_g170402 = float3( 0,0,0 );
				float4 Out_Shader4_g170402 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170402 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170402 = 0;
				float Out_Grayscale4_g170402 = 0;
				float Out_Luminosity4_g170402 = 0;
				float Out_AlphaClip4_g170402 = 0;
				float Out_AlphaFade4_g170402 = 0;
				float3 Out_Translucency4_g170402 = float3( 0,0,0 );
				float Out_Transmission4_g170402 = 0;
				float Out_Thickness4_g170402 = 0;
				float Out_Diffusion4_g170402 = 0;
				Out_Dummy4_g170402 = Data4_g170402.Dummy;
				Out_Albedo4_g170402 = Data4_g170402.Albedo;
				Out_NormalTS4_g170402 = Data4_g170402.NormalTS;
				Out_NormalWS4_g170402 = Data4_g170402.NormalWS;
				Out_Shader4_g170402 = Data4_g170402.Shader;
				Out_Emissive4_g170402= Data4_g170402.Emissive;
				Out_MultiMask4_g170402 = Data4_g170402.MultiMask;
				Out_Grayscale4_g170402 = Data4_g170402.Grayscale;
				Out_Luminosity4_g170402= Data4_g170402.Luminosity;
				Out_AlphaClip4_g170402 = Data4_g170402.AlphaClip;
				Out_AlphaFade4_g170402 = Data4_g170402.AlphaFade;
				Out_Translucency4_g170402 = Data4_g170402.Translucency;
				Out_Transmission4_g170402 = Data4_g170402.Transmission;
				Out_Thickness4_g170402 = Data4_g170402.Thickness;
				Out_Diffusion4_g170402 = Data4_g170402.Diffusion;
				half3 Visual_Albedo527_g170386 = Out_Albedo4_g170402;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170387) = _ThirdAlbedoTex;
				float localFilterTexture19_g170416 = ( 0.0 );
				SamplerState SamplerDefault19_g170416 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170416 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170416 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170416 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170416 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170416 = SamplerDefault19_g170416;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170416 = SamplerDefault19_g170416;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170416 = SamplerPoint19_g170416;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170416 = SamplerLow19_g170416;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170416 = SamplerMedium19_g170416;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170416 = SamplerHigh19_g170416;
				#endif
				SamplerState Sampler276_g170387 = SS19_g170416;
				half4 Local_LayerCoords790_g170386 = _third_coord_value;
				float4 temp_output_37_0_g170387 = Local_LayerCoords790_g170386;
				half4 Coords276_g170387 = temp_output_37_0_g170387;
				half2 TexCoord276_g170387 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170387 = SampleMain( Texture276_g170387 , Sampler276_g170387 , Coords276_g170387 , TexCoord276_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170387 = SS19_g170416;
				half4 Coords275_g170387 = temp_output_37_0_g170387;
				half2 TexCoord275_g170387 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170387 = SampleExtra( Texture275_g170387 , Sampler275_g170387 , Coords275_g170387 , TexCoord275_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170387 = SS19_g170416;
				half4 Coords238_g170387 = temp_output_37_0_g170387;
				TVEModelData Data15_g170414 = Data16_g170157;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionOS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170414 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170414 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170414 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170414 = float4( 0,0,0,0 );
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionOS15_g170414 = Data15_g170414.PositionOS;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PositionRawOS15_g170414 = Data15_g170414.PositionRawOS;
				Out_PositionAddOS15_g170414 = Data15_g170414.PositionAddOS;
				Out_PivotOS15_g170414 = Data15_g170414.PivotOS;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalOS15_g170414 = Data15_g170414.NormalOS;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_NormalRawOS15_g170414 = Data15_g170414.NormalRawOS;
				Out_NormalRawWS15_g170414 = Data15_g170414.NormalRawWS;
				Out_TangentOS15_g170414 = Data15_g170414.TangentOS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_MotionData15_g170414 = Data15_g170414.MotionData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				Out_RotationData15_g170414 = Data15_g170414.RotationData;
				half3 Model_PositionWO636_g170386 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170387 = Model_PositionWO636_g170386;
				half3 WorldPosition238_g170387 = temp_output_279_0_g170387;
				half4 localSamplePlanar2D238_g170387 = SamplePlanar2D( Texture238_g170387 , Sampler238_g170387 , Coords238_g170387 , WorldPosition238_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170387 = SS19_g170416;
				half4 Coords246_g170387 = temp_output_37_0_g170387;
				half3 WorldPosition246_g170387 = temp_output_279_0_g170387;
				half3 Model_NormalWS869_g170386 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170387 = Model_NormalWS869_g170386;
				half3 WorldNormal246_g170387 = temp_output_280_0_g170387;
				half4 localSamplePlanar3D246_g170387 = SamplePlanar3D( Texture246_g170387 , Sampler246_g170387 , Coords246_g170387 , WorldPosition246_g170387 , WorldNormal246_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170387 = SS19_g170416;
				float4 Coords234_g170387 = temp_output_37_0_g170387;
				float3 WorldPosition234_g170387 = temp_output_279_0_g170387;
				float4 localSampleStochastic2D234_g170387 = SampleStochastic2D( Texture234_g170387 , Sampler234_g170387 , Coords234_g170387 , WorldPosition234_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170387 = SS19_g170416;
				half4 Coords263_g170387 = temp_output_37_0_g170387;
				half3 WorldPosition263_g170387 = temp_output_279_0_g170387;
				half3 WorldNormal263_g170387 = temp_output_280_0_g170387;
				half4 localSampleStochastic3D263_g170387 = SampleStochastic3D( Texture263_g170387 , Sampler263_g170387 , Coords263_g170387 , WorldPosition263_g170387 , WorldNormal263_g170387 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170386 = localSampleMain276_g170387;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170386 = localSampleExtra275_g170387;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170386 = localSamplePlanar2D238_g170387;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170386 = localSamplePlanar3D246_g170387;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170386 = localSampleStochastic2D234_g170387;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170386 = localSampleStochastic3D263_g170387;
				#else
				float4 staticSwitch693_g170386 = localSampleMain276_g170387;
				#endif
				half4 Local_AlbedoTex777_g170386 = staticSwitch693_g170386;
				float3 lerpResult716_g170386 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170386).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170386 = lerpResult716_g170386;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170389) = _ThirdShaderTex;
				float localFilterTexture30_g170418 = ( 0.0 );
				SamplerState SamplerDefault30_g170418 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170418 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170418 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170418 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170418 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170418 = SamplerDefault30_g170418;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170418 = SamplerDefault30_g170418;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170418 = SamplerPoint30_g170418;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170418 = SamplerLow30_g170418;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170418 = SamplerMedium30_g170418;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170418 = SamplerHigh30_g170418;
				#endif
				SamplerState Sampler276_g170389 = SS30_g170418;
				float4 temp_output_37_0_g170389 = Local_LayerCoords790_g170386;
				half4 Coords276_g170389 = temp_output_37_0_g170389;
				half2 TexCoord276_g170389 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170389 = SampleMain( Texture276_g170389 , Sampler276_g170389 , Coords276_g170389 , TexCoord276_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170389) = _ThirdShaderTex;
				SamplerState Sampler275_g170389 = SS30_g170418;
				half4 Coords275_g170389 = temp_output_37_0_g170389;
				half2 TexCoord275_g170389 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170389 = SampleExtra( Texture275_g170389 , Sampler275_g170389 , Coords275_g170389 , TexCoord275_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170389) = _ThirdShaderTex;
				SamplerState Sampler238_g170389 = SS30_g170418;
				half4 Coords238_g170389 = temp_output_37_0_g170389;
				float3 temp_output_279_0_g170389 = Model_PositionWO636_g170386;
				half3 WorldPosition238_g170389 = temp_output_279_0_g170389;
				half4 localSamplePlanar2D238_g170389 = SamplePlanar2D( Texture238_g170389 , Sampler238_g170389 , Coords238_g170389 , WorldPosition238_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170389) = _ThirdShaderTex;
				SamplerState Sampler246_g170389 = SS30_g170418;
				half4 Coords246_g170389 = temp_output_37_0_g170389;
				half3 WorldPosition246_g170389 = temp_output_279_0_g170389;
				float3 temp_output_280_0_g170389 = Model_NormalWS869_g170386;
				half3 WorldNormal246_g170389 = temp_output_280_0_g170389;
				half4 localSamplePlanar3D246_g170389 = SamplePlanar3D( Texture246_g170389 , Sampler246_g170389 , Coords246_g170389 , WorldPosition246_g170389 , WorldNormal246_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170389) = _ThirdShaderTex;
				SamplerState Sampler234_g170389 = SS30_g170418;
				float4 Coords234_g170389 = temp_output_37_0_g170389;
				float3 WorldPosition234_g170389 = temp_output_279_0_g170389;
				float4 localSampleStochastic2D234_g170389 = SampleStochastic2D( Texture234_g170389 , Sampler234_g170389 , Coords234_g170389 , WorldPosition234_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170389) = _ThirdShaderTex;
				SamplerState Sampler263_g170389 = SS30_g170418;
				half4 Coords263_g170389 = temp_output_37_0_g170389;
				half3 WorldPosition263_g170389 = temp_output_279_0_g170389;
				half3 WorldNormal263_g170389 = temp_output_280_0_g170389;
				half4 localSampleStochastic3D263_g170389 = SampleStochastic3D( Texture263_g170389 , Sampler263_g170389 , Coords263_g170389 , WorldPosition263_g170389 , WorldNormal263_g170389 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170386 = localSampleMain276_g170389;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170386 = localSampleExtra275_g170389;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170386 = localSamplePlanar2D238_g170389;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170386 = localSamplePlanar3D246_g170389;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170386 = localSampleStochastic2D234_g170389;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170386 = localSampleStochastic3D263_g170389;
				#else
				float4 staticSwitch722_g170386 = localSampleMain276_g170389;
				#endif
				half4 Local_ShaderTex775_g170386 = staticSwitch722_g170386;
				float lerpResult739_g170386 = lerp( 1.0 , (Local_ShaderTex775_g170386).y , _ThirdOcclusionValue);
				float4 appendResult749_g170386 = (float4(( (Local_ShaderTex775_g170386).x * _ThirdMetallicValue ) , lerpResult739_g170386 , (Local_ShaderTex775_g170386).z , ( (Local_ShaderTex775_g170386).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170386 = appendResult749_g170386;
				float clampResult17_g170392 = clamp( (Local_Masks750_g170386).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170393 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170393 = ( _ThirdMultiRemap.y - temp_output_7_0_g170393 );
				float temp_output_765_0_g170386 = saturate( ( ( clampResult17_g170392 - temp_output_7_0_g170393 ) / ( temp_output_10_0_g170393 + 0.0001 ) ) );
				half Local_MultiMask767_g170386 = temp_output_765_0_g170386;
				float lerpResult705_g170386 = lerp( 1.0 , Local_MultiMask767_g170386 , _ThirdColorMode);
				float4 lerpResult706_g170386 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170386);
				half3 Local_ColorRGB774_g170386 = (lerpResult706_g170386).rgb;
				half3 Local_Albedo768_g170386 = ( Local_AlbedoRGB771_g170386 * Local_ColorRGB774_g170386 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170410 = 2.0;
				#else
				float staticSwitch1_g170410 = 4.594794;
				#endif
				float3 lerpResult985_g170386 = lerp( Local_Albedo768_g170386 , ( Visual_Albedo527_g170386 * Local_Albedo768_g170386 * staticSwitch1_g170410 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170413) = _ThirdMaskTex;
				SamplerState Sampler276_g170413 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170386 = _third_mask_coord_value;
				float4 temp_output_37_0_g170413 = Local_MaskCoords813_g170386;
				half4 Coords276_g170413 = temp_output_37_0_g170413;
				half2 TexCoord276_g170413 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170413 = SampleMain( Texture276_g170413 , Sampler276_g170413 , Coords276_g170413 , TexCoord276_g170413 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170413) = _ThirdMaskTex;
				SamplerState Sampler275_g170413 = sampler_Linear_Repeat;
				half4 Coords275_g170413 = temp_output_37_0_g170413;
				half2 TexCoord275_g170413 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170413 = SampleExtra( Texture275_g170413 , Sampler275_g170413 , Coords275_g170413 , TexCoord275_g170413 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170413) = _ThirdMaskTex;
				SamplerState Sampler238_g170413 = sampler_Linear_Repeat;
				half4 Coords238_g170413 = temp_output_37_0_g170413;
				float3 temp_output_279_0_g170413 = Model_PositionWO636_g170386;
				half3 WorldPosition238_g170413 = temp_output_279_0_g170413;
				half4 localSamplePlanar2D238_g170413 = SamplePlanar2D( Texture238_g170413 , Sampler238_g170413 , Coords238_g170413 , WorldPosition238_g170413 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170413) = _ThirdMaskTex;
				SamplerState Sampler246_g170413 = sampler_Linear_Repeat;
				half4 Coords246_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition246_g170413 = temp_output_279_0_g170413;
				float3 temp_output_280_0_g170413 = Model_NormalWS869_g170386;
				half3 WorldNormal246_g170413 = temp_output_280_0_g170413;
				half4 localSamplePlanar3D246_g170413 = SamplePlanar3D( Texture246_g170413 , Sampler246_g170413 , Coords246_g170413 , WorldPosition246_g170413 , WorldNormal246_g170413 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170386 = localSampleMain276_g170413;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170386 = localSampleExtra275_g170413;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170386 = localSamplePlanar2D238_g170413;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170386 = localSamplePlanar3D246_g170413;
				#else
				float4 staticSwitch817_g170386 = localSampleMain276_g170413;
				#endif
				half4 Local_MaskTex861_g170386 = staticSwitch817_g170386;
				float clampResult17_g170397 = clamp( (Local_MaskTex861_g170386).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170398 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170398 = ( _ThirdMaskRemap.y - temp_output_7_0_g170398 );
				float lerpResult1028_g170386 = lerp( 1.0 , saturate( ( ( clampResult17_g170397 - temp_output_7_0_g170398 ) / ( temp_output_10_0_g170398 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170386 = lerpResult1028_g170386;
				half4 Model_VertexMasks960_g170386 = Out_VertexData15_g170414;
				float4 break961_g170386 = Model_VertexMasks960_g170386;
				float4 break33_g170401 = _third_vert_mode;
				float temp_output_30_0_g170401 = ( break961_g170386.x * break33_g170401.x );
				float temp_output_29_0_g170401 = ( break961_g170386.y * break33_g170401.y );
				float temp_output_31_0_g170401 = ( break961_g170386.z * break33_g170401.z );
				float temp_output_28_0_g170401 = ( temp_output_30_0_g170401 + temp_output_29_0_g170401 + temp_output_31_0_g170401 + ( break961_g170386.w * break33_g170401.w ) );
				float clampResult17_g170395 = clamp( temp_output_28_0_g170401 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170396 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170396 = ( _ThirdMeshRemap.y - temp_output_7_0_g170396 );
				float lerpResult1026_g170386 = lerp( 1.0 , saturate( ( ( clampResult17_g170395 - temp_output_7_0_g170396 ) / ( temp_output_10_0_g170396 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170412 = lerpResult1026_g170386;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170412 = ( temp_output_6_0_g170412 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170412 = temp_output_6_0_g170412;
				#endif
				float temp_output_992_0_g170386 = staticSwitch14_g170412;
				half Blend_VertMask913_g170386 = temp_output_992_0_g170386;
				half3 Visual_NormalWS953_g170386 = Out_NormalWS4_g170402;
				float clampResult17_g170399 = clamp( saturate( (Visual_NormalWS953_g170386).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170400 = _ThirdProjRemap.x;
				float temp_output_10_0_g170400 = ( _ThirdProjRemap.y - temp_output_7_0_g170400 );
				float lerpResult1004_g170386 = lerp( 1.0 , saturate( ( ( clampResult17_g170399 - temp_output_7_0_g170400 ) / ( temp_output_10_0_g170400 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170386 = lerpResult1004_g170386;
				TVEGlobalData Data15_g170404 = Data204_g170159;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170404 = float4( 0,0,0,0 );
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatParams15_g170404 = Data15_g170404.CoatParams;
				Out_PaintParams15_g170404 = Data15_g170404.PaintParams;
				Out_GlowParams15_g170404 = Data15_g170404.GlowParams;
				Out_AtmoParams15_g170404= Data15_g170404.AtmoParams;
				Out_FadeParams15_g170404= Data15_g170404.FadeParams;
				Out_FormParams15_g170404 = Data15_g170404.FormParams;
				Out_LandParams15_g170404 = Data15_g170404.LandParams;
				Out_WindParams15_g170404 = Data15_g170404.WindParams;
				Out_PushParams15_g170404 = Data15_g170404.PushParams;
				half4 Global_CoatParams972_g170386 = Out_CoatParams15_g170404;
				float lerpResult1023_g170386 = lerp( 1.0 , (Global_CoatParams972_g170386).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170386 = lerpResult1023_g170386;
				#else
				float staticSwitch965_g170386 = 1.0;
				#endif
				half Blend_GlobalMask968_g170386 = staticSwitch965_g170386;
				float temp_output_432_0_g170386 = ( _ThirdIntensityValue * Detail_TexMask429_g170386 * Blend_VertMask913_g170386 * Blend_ProjMask912_g170386 * Blend_GlobalMask968_g170386 );
				float clampResult17_g170406 = clamp( temp_output_432_0_g170386 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170405 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170405 = ( _ThirdBlendRemap.y - temp_output_7_0_g170405 );
				half Detail_Mask412_g170386 = ( saturate( ( ( clampResult17_g170406 - temp_output_7_0_g170405 ) / ( temp_output_10_0_g170405 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170386 = lerp( Visual_Albedo527_g170386 , lerpResult985_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170386 = lerpResult989_g170386;
				#else
				float3 staticSwitch415_g170386 = Visual_Albedo527_g170386;
				#endif
				half3 Final_Albedo601_g170386 = staticSwitch415_g170386;
				float3 In_Albedo3_g170403 = Final_Albedo601_g170386;
				half2 Visual_NormalTS529_g170386 = Out_NormalTS4_g170402;
				float2 lerpResult40_g170408 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170386 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170388) = _ThirdNormalTex;
				float localFilterTexture29_g170417 = ( 0.0 );
				SamplerState SamplerDefault29_g170417 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170417 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170417 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170417 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170417 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170417 = SamplerDefault29_g170417;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170417 = SamplerDefault29_g170417;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170417 = SamplerPoint29_g170417;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170417 = SamplerLow29_g170417;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170417 = SamplerMedium29_g170417;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170417 = SamplerHigh29_g170417;
				#endif
				SamplerState Sampler276_g170388 = SS29_g170417;
				float4 temp_output_37_0_g170388 = Local_LayerCoords790_g170386;
				half4 Coords276_g170388 = temp_output_37_0_g170388;
				half2 TexCoord276_g170388 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170388 = SampleMain( Texture276_g170388 , Sampler276_g170388 , Coords276_g170388 , TexCoord276_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170388) = _ThirdNormalTex;
				SamplerState Sampler275_g170388 = SS29_g170417;
				half4 Coords275_g170388 = temp_output_37_0_g170388;
				half2 TexCoord275_g170388 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170388 = SampleExtra( Texture275_g170388 , Sampler275_g170388 , Coords275_g170388 , TexCoord275_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170388) = _ThirdNormalTex;
				SamplerState Sampler238_g170388 = SS29_g170417;
				half4 Coords238_g170388 = temp_output_37_0_g170388;
				float3 temp_output_279_0_g170388 = Model_PositionWO636_g170386;
				half3 WorldPosition238_g170388 = temp_output_279_0_g170388;
				half4 localSamplePlanar2D238_g170388 = SamplePlanar2D( Texture238_g170388 , Sampler238_g170388 , Coords238_g170388 , WorldPosition238_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170388) = _ThirdNormalTex;
				SamplerState Sampler246_g170388 = SS29_g170417;
				half4 Coords246_g170388 = temp_output_37_0_g170388;
				half3 WorldPosition246_g170388 = temp_output_279_0_g170388;
				float3 temp_output_280_0_g170388 = Model_NormalWS869_g170386;
				half3 WorldNormal246_g170388 = temp_output_280_0_g170388;
				half4 localSamplePlanar3D246_g170388 = SamplePlanar3D( Texture246_g170388 , Sampler246_g170388 , Coords246_g170388 , WorldPosition246_g170388 , WorldNormal246_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170388) = _ThirdNormalTex;
				SamplerState Sampler234_g170388 = SS29_g170417;
				float4 Coords234_g170388 = temp_output_37_0_g170388;
				float3 WorldPosition234_g170388 = temp_output_279_0_g170388;
				float4 localSampleStochastic2D234_g170388 = SampleStochastic2D( Texture234_g170388 , Sampler234_g170388 , Coords234_g170388 , WorldPosition234_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170388) = _ThirdNormalTex;
				SamplerState Sampler263_g170388 = SS29_g170417;
				half4 Coords263_g170388 = temp_output_37_0_g170388;
				half3 WorldPosition263_g170388 = temp_output_279_0_g170388;
				half3 WorldNormal263_g170388 = temp_output_280_0_g170388;
				half4 localSampleStochastic3D263_g170388 = SampleStochastic3D( Texture263_g170388 , Sampler263_g170388 , Coords263_g170388 , WorldPosition263_g170388 , WorldNormal263_g170388 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170386 = localSampleMain276_g170388;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170386 = localSampleExtra275_g170388;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170386 = localSamplePlanar2D238_g170388;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170386 = localSamplePlanar3D246_g170388;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170386 = localSampleStochastic2D234_g170388;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170386 = localSampleStochastic3D263_g170388;
				#else
				float4 staticSwitch698_g170386 = localSampleMain276_g170388;
				#endif
				half4 Local_NormalTex776_g170386 = staticSwitch698_g170386;
				half4 Normal_Packed45_g170390 = Local_NormalTex776_g170386;
				float2 appendResult58_g170390 = (float2(( (Normal_Packed45_g170390).x * (Normal_Packed45_g170390).w ) , (Normal_Packed45_g170390).y));
				half2 Normal_Default50_g170390 = appendResult58_g170390;
				half2 Normal_ASTC41_g170390 = (Normal_Packed45_g170390).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170390 = Normal_ASTC41_g170390;
				#else
				float2 staticSwitch38_g170390 = Normal_Default50_g170390;
				#endif
				half2 Normal_NO_DTX544_g170390 = (Normal_Packed45_g170390).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170390 = Normal_NO_DTX544_g170390;
				#else
				float2 staticSwitch37_g170390 = staticSwitch38_g170390;
				#endif
				float2 temp_output_724_0_g170386 = ( (staticSwitch37_g170390*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170391 = temp_output_724_0_g170386;
				float2 break71_g170391 = Normal_Planar45_g170391;
				float3 appendResult72_g170391 = (float3(break71_g170391.x , 0.0 , break71_g170391.y));
				float2 temp_output_858_0_g170386 = (mul( ase_worldToTangent, appendResult72_g170391 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170386 = temp_output_724_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170386 = temp_output_724_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170386 = temp_output_858_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170386 = temp_output_858_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170386 = temp_output_858_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170386 = temp_output_858_0_g170386;
				#else
				float2 staticSwitch727_g170386 = temp_output_724_0_g170386;
				#endif
				half2 Local_NormalTS729_g170386 = staticSwitch727_g170386;
				float2 temp_output_36_0_g170408 = ( lerpResult40_g170408 + Local_NormalTS729_g170386 );
				float2 lerpResult405_g170386 = lerp( Visual_NormalTS529_g170386 , temp_output_36_0_g170408 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170386 = lerpResult405_g170386;
				#else
				float2 staticSwitch418_g170386 = Visual_NormalTS529_g170386;
				#endif
				half2 Final_NormalTS612_g170386 = staticSwitch418_g170386;
				float2 In_NormalTS3_g170403 = Final_NormalTS612_g170386;
				float3 appendResult68_g170409 = (float3(Final_NormalTS612_g170386 , 1.0));
				float3 tanNormal74_g170409 = appendResult68_g170409;
				float3 worldNormal74_g170409 = normalize( float3(dot(tanToWorld0,tanNormal74_g170409), dot(tanToWorld1,tanNormal74_g170409), dot(tanToWorld2,tanNormal74_g170409)) );
				half3 Final_NormalWS956_g170386 = worldNormal74_g170409;
				float3 In_NormalWS3_g170403 = Final_NormalWS956_g170386;
				half4 Visual_Shader531_g170386 = Out_Shader4_g170402;
				float4 lerpResult1000_g170386 = lerp( Local_Masks750_g170386 , ( Visual_Shader531_g170386 * Local_Masks750_g170386 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170386 = lerp( Visual_Shader531_g170386 , lerpResult1000_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170386 = lerpResult998_g170386;
				#else
				float4 staticSwitch451_g170386 = Visual_Shader531_g170386;
				#endif
				half4 Final_Masks613_g170386 = staticSwitch451_g170386;
				float4 In_Shader3_g170403 = Final_Masks613_g170386;
				float4 In_Emissive3_g170403 = Out_Emissive4_g170402;
				float3 temp_output_3_0_g170411 = Final_Albedo601_g170386;
				float dotResult20_g170411 = dot( temp_output_3_0_g170411 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170386 = dotResult20_g170411;
				float In_Grayscale3_g170403 = Final_Grayscale615_g170386;
				float clampResult651_g170386 = clamp( saturate( ( Final_Grayscale615_g170386 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170386 = clampResult651_g170386;
				float In_Luminosity3_g170403 = Final_Luminosity652_g170386;
				half Visual_MultiMask547_g170386 = Out_MultiMask4_g170402;
				float lerpResult477_g170386 = lerp( Visual_MultiMask547_g170386 , Local_MultiMask767_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float staticSwitch482_g170386 = lerpResult477_g170386;
				#else
				float staticSwitch482_g170386 = Visual_MultiMask547_g170386;
				#endif
				half Final_MultiMask572_g170386 = staticSwitch482_g170386;
				float In_MultiMask3_g170403 = Final_MultiMask572_g170386;
				half Visual_AlphaClip559_g170386 = Out_AlphaClip4_g170402;
				float temp_output_718_0_g170386 = (Local_AlbedoTex777_g170386).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170386 = ( temp_output_718_0_g170386 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170386 = temp_output_718_0_g170386;
				#endif
				half Local_AlphaClip772_g170386 = staticSwitch924_g170386;
				float lerpResult448_g170386 = lerp( Visual_AlphaClip559_g170386 , Local_AlphaClip772_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float staticSwitch564_g170386 = lerpResult448_g170386;
				#else
				float staticSwitch564_g170386 = Visual_AlphaClip559_g170386;
				#endif
				half Final_AlphaClip602_g170386 = staticSwitch564_g170386;
				float In_AlphaClip3_g170403 = Final_AlphaClip602_g170386;
				half Visual_AlphaFade588_g170386 = Out_AlphaFade4_g170402;
				half Local_AlphaFade773_g170386 = (lerpResult706_g170386).a;
				float lerpResult604_g170386 = lerp( Visual_AlphaFade588_g170386 , Local_AlphaFade773_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float staticSwitch608_g170386 = lerpResult604_g170386;
				#else
				float staticSwitch608_g170386 = Visual_AlphaFade588_g170386;
				#endif
				half Final_AlphaFade611_g170386 = staticSwitch608_g170386;
				float In_AlphaFade3_g170403 = Final_AlphaFade611_g170386;
				float3 In_Translucency3_g170403 = Out_Translucency4_g170402;
				float In_Transmission3_g170403 = Out_Transmission4_g170402;
				float In_Thickness3_g170403 = Out_Thickness4_g170402;
				float In_Diffusion3_g170403 = Out_Diffusion4_g170402;
				Data3_g170403.Dummy = In_Dummy3_g170403;
				Data3_g170403.Albedo = In_Albedo3_g170403;
				Data3_g170403.NormalTS = In_NormalTS3_g170403;
				Data3_g170403.NormalWS = In_NormalWS3_g170403;
				Data3_g170403.Shader = In_Shader3_g170403;
				Data3_g170403.Emissive= In_Emissive3_g170403;
				Data3_g170403.MultiMask = In_MultiMask3_g170403;
				Data3_g170403.Grayscale = In_Grayscale3_g170403;
				Data3_g170403.Luminosity = In_Luminosity3_g170403;
				Data3_g170403.AlphaClip = In_AlphaClip3_g170403;
				Data3_g170403.AlphaFade = In_AlphaFade3_g170403;
				Data3_g170403.Translucency = In_Translucency3_g170403;
				Data3_g170403.Transmission = In_Transmission3_g170403;
				Data3_g170403.Thickness = In_Thickness3_g170403;
				Data3_g170403.Diffusion = In_Diffusion3_g170403;
				TVEVisualData Data4_g170421 = Data3_g170403;
				float Out_Dummy4_g170421 = 0;
				float3 Out_Albedo4_g170421 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170421 = float2( 0,0 );
				float3 Out_NormalWS4_g170421 = float3( 0,0,0 );
				float4 Out_Shader4_g170421 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170421 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170421 = 0;
				float Out_Grayscale4_g170421 = 0;
				float Out_Luminosity4_g170421 = 0;
				float Out_AlphaClip4_g170421 = 0;
				float Out_AlphaFade4_g170421 = 0;
				float3 Out_Translucency4_g170421 = float3( 0,0,0 );
				float Out_Transmission4_g170421 = 0;
				float Out_Thickness4_g170421 = 0;
				float Out_Diffusion4_g170421 = 0;
				Out_Dummy4_g170421 = Data4_g170421.Dummy;
				Out_Albedo4_g170421 = Data4_g170421.Albedo;
				Out_NormalTS4_g170421 = Data4_g170421.NormalTS;
				Out_NormalWS4_g170421 = Data4_g170421.NormalWS;
				Out_Shader4_g170421 = Data4_g170421.Shader;
				Out_Emissive4_g170421= Data4_g170421.Emissive;
				Out_MultiMask4_g170421 = Data4_g170421.MultiMask;
				Out_Grayscale4_g170421 = Data4_g170421.Grayscale;
				Out_Luminosity4_g170421= Data4_g170421.Luminosity;
				Out_AlphaClip4_g170421 = Data4_g170421.AlphaClip;
				Out_AlphaFade4_g170421 = Data4_g170421.AlphaFade;
				Out_Translucency4_g170421 = Data4_g170421.Translucency;
				Out_Transmission4_g170421 = Data4_g170421.Transmission;
				Out_Thickness4_g170421 = Data4_g170421.Thickness;
				Out_Diffusion4_g170421 = Data4_g170421.Diffusion;
				half3 Visual_Albedo127_g170420 = Out_Albedo4_g170421;
				TVEModelData Data15_g170423 = Data16_g170157;
				float Out_Dummy15_g170423 = 0;
				float3 Out_PositionOS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170423 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170423 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170423 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170423 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170423 = float3( 0,0,0 );
				float4 Out_VertexData15_g170423 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170423 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170423 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170423 = float4( 0,0,0,0 );
				Out_Dummy15_g170423 = Data15_g170423.Dummy;
				Out_PositionOS15_g170423 = Data15_g170423.PositionOS;
				Out_PositionWS15_g170423 = Data15_g170423.PositionWS;
				Out_PositionWO15_g170423 = Data15_g170423.PositionWO;
				Out_PositionRawOS15_g170423 = Data15_g170423.PositionRawOS;
				Out_PositionAddOS15_g170423 = Data15_g170423.PositionAddOS;
				Out_PivotOS15_g170423 = Data15_g170423.PivotOS;
				Out_PivotWS15_g170423 = Data15_g170423.PivotWS;
				Out_PivotWO15_g170423 = Data15_g170423.PivotWO;
				Out_NormalOS15_g170423 = Data15_g170423.NormalOS;
				Out_NormalWS15_g170423 = Data15_g170423.NormalWS;
				Out_NormalRawOS15_g170423 = Data15_g170423.NormalRawOS;
				Out_NormalRawWS15_g170423 = Data15_g170423.NormalRawWS;
				Out_TangentOS15_g170423 = Data15_g170423.TangentOS;
				Out_ViewDirWS15_g170423 = Data15_g170423.ViewDirWS;
				Out_VertexData15_g170423 = Data15_g170423.VertexData;
				Out_MotionData15_g170423 = Data15_g170423.MotionData;
				Out_BoundsData15_g170423 = Data15_g170423.BoundsData;
				Out_RotationData15_g170423 = Data15_g170423.RotationData;
				half4 Model_VertexData206_g170420 = Out_VertexData15_g170423;
				float4 break208_g170420 = Model_VertexData206_g170420;
				float4 break33_g170428 = _occlusion_vert_mode;
				float temp_output_30_0_g170428 = ( break208_g170420.x * break33_g170428.x );
				float temp_output_29_0_g170428 = ( break208_g170420.y * break33_g170428.y );
				float temp_output_31_0_g170428 = ( break208_g170420.z * break33_g170428.z );
				float temp_output_28_0_g170428 = ( temp_output_30_0_g170428 + temp_output_29_0_g170428 + temp_output_31_0_g170428 + ( break208_g170420.w * break33_g170428.w ) );
				float temp_output_194_0_g170420 = temp_output_28_0_g170428;
				float clampResult17_g170426 = clamp( temp_output_194_0_g170420 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170425 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170425 );
				float temp_output_6_0_g170427 = saturate( ( ( clampResult17_g170426 - temp_output_7_0_g170425 ) / ( temp_output_10_0_g170425 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170427 = ( temp_output_6_0_g170427 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170427 = temp_output_6_0_g170427;
				#endif
				half Occlusion_Mask82_g170420 = staticSwitch14_g170427;
				float3 lerpResult75_g170420 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170420);
				float3 lerpResult186_g170420 = lerp( Visual_Albedo127_g170420 , ( Visual_Albedo127_g170420 * lerpResult75_g170420 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170420 = lerpResult186_g170420;
				#else
				float3 staticSwitch171_g170420 = Visual_Albedo127_g170420;
				#endif
				half3 Final_Albedo160_g170420 = staticSwitch171_g170420;
				float3 In_Albedo3_g170422 = Final_Albedo160_g170420;
				float2 In_NormalTS3_g170422 = Out_NormalTS4_g170421;
				float3 In_NormalWS3_g170422 = Out_NormalWS4_g170421;
				float4 In_Shader3_g170422 = Out_Shader4_g170421;
				float4 In_Emissive3_g170422 = Out_Emissive4_g170421;
				float3 temp_output_3_0_g170424 = Final_Albedo160_g170420;
				float dotResult20_g170424 = dot( temp_output_3_0_g170424 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170420 = dotResult20_g170424;
				float In_Grayscale3_g170422 = Final_Grayscale164_g170420;
				float clampResult180_g170420 = clamp( saturate( ( Final_Grayscale164_g170420 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170420 = clampResult180_g170420;
				float In_Luminosity3_g170422 = Final_Shading181_g170420;
				float In_MultiMask3_g170422 = Out_MultiMask4_g170421;
				float In_AlphaClip3_g170422 = Out_AlphaClip4_g170421;
				float In_AlphaFade3_g170422 = Out_AlphaFade4_g170421;
				float3 In_Translucency3_g170422 = Out_Translucency4_g170421;
				float In_Transmission3_g170422 = Out_Transmission4_g170421;
				float In_Thickness3_g170422 = Out_Thickness4_g170421;
				float In_Diffusion3_g170422 = Out_Diffusion4_g170421;
				Data3_g170422.Dummy = In_Dummy3_g170422;
				Data3_g170422.Albedo = In_Albedo3_g170422;
				Data3_g170422.NormalTS = In_NormalTS3_g170422;
				Data3_g170422.NormalWS = In_NormalWS3_g170422;
				Data3_g170422.Shader = In_Shader3_g170422;
				Data3_g170422.Emissive= In_Emissive3_g170422;
				Data3_g170422.MultiMask = In_MultiMask3_g170422;
				Data3_g170422.Grayscale = In_Grayscale3_g170422;
				Data3_g170422.Luminosity = In_Luminosity3_g170422;
				Data3_g170422.AlphaClip = In_AlphaClip3_g170422;
				Data3_g170422.AlphaFade = In_AlphaFade3_g170422;
				Data3_g170422.Translucency = In_Translucency3_g170422;
				Data3_g170422.Transmission = In_Transmission3_g170422;
				Data3_g170422.Thickness = In_Thickness3_g170422;
				Data3_g170422.Diffusion = In_Diffusion3_g170422;
				TVEVisualData Data4_g170433 = Data3_g170422;
				float Out_Dummy4_g170433 = 0;
				float3 Out_Albedo4_g170433 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170433 = float2( 0,0 );
				float3 Out_NormalWS4_g170433 = float3( 0,0,0 );
				float4 Out_Shader4_g170433 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170433 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170433 = 0;
				float Out_Grayscale4_g170433 = 0;
				float Out_Luminosity4_g170433 = 0;
				float Out_AlphaClip4_g170433 = 0;
				float Out_AlphaFade4_g170433 = 0;
				float3 Out_Translucency4_g170433 = float3( 0,0,0 );
				float Out_Transmission4_g170433 = 0;
				float Out_Thickness4_g170433 = 0;
				float Out_Diffusion4_g170433 = 0;
				Out_Dummy4_g170433 = Data4_g170433.Dummy;
				Out_Albedo4_g170433 = Data4_g170433.Albedo;
				Out_NormalTS4_g170433 = Data4_g170433.NormalTS;
				Out_NormalWS4_g170433 = Data4_g170433.NormalWS;
				Out_Shader4_g170433 = Data4_g170433.Shader;
				Out_Emissive4_g170433= Data4_g170433.Emissive;
				Out_MultiMask4_g170433 = Data4_g170433.MultiMask;
				Out_Grayscale4_g170433 = Data4_g170433.Grayscale;
				Out_Luminosity4_g170433= Data4_g170433.Luminosity;
				Out_AlphaClip4_g170433 = Data4_g170433.AlphaClip;
				Out_AlphaFade4_g170433 = Data4_g170433.AlphaFade;
				Out_Translucency4_g170433 = Data4_g170433.Translucency;
				Out_Transmission4_g170433 = Data4_g170433.Transmission;
				Out_Thickness4_g170433 = Data4_g170433.Thickness;
				Out_Diffusion4_g170433 = Data4_g170433.Diffusion;
				half3 Visual_Albedo127_g170430 = Out_Albedo4_g170433;
				TVEModelData Data15_g170431 = Data16_g170157;
				float Out_Dummy15_g170431 = 0;
				float3 Out_PositionOS15_g170431 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170431 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170431 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170431 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170431 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170431 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170431 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170431 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170431 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170431 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170431 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170431 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170431 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170431 = float3( 0,0,0 );
				float4 Out_VertexData15_g170431 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170431 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170431 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170431 = float4( 0,0,0,0 );
				Out_Dummy15_g170431 = Data15_g170431.Dummy;
				Out_PositionOS15_g170431 = Data15_g170431.PositionOS;
				Out_PositionWS15_g170431 = Data15_g170431.PositionWS;
				Out_PositionWO15_g170431 = Data15_g170431.PositionWO;
				Out_PositionRawOS15_g170431 = Data15_g170431.PositionRawOS;
				Out_PositionAddOS15_g170431 = Data15_g170431.PositionAddOS;
				Out_PivotOS15_g170431 = Data15_g170431.PivotOS;
				Out_PivotWS15_g170431 = Data15_g170431.PivotWS;
				Out_PivotWO15_g170431 = Data15_g170431.PivotWO;
				Out_NormalOS15_g170431 = Data15_g170431.NormalOS;
				Out_NormalWS15_g170431 = Data15_g170431.NormalWS;
				Out_NormalRawOS15_g170431 = Data15_g170431.NormalRawOS;
				Out_NormalRawWS15_g170431 = Data15_g170431.NormalRawWS;
				Out_TangentOS15_g170431 = Data15_g170431.TangentOS;
				Out_ViewDirWS15_g170431 = Data15_g170431.ViewDirWS;
				Out_VertexData15_g170431 = Data15_g170431.VertexData;
				Out_MotionData15_g170431 = Data15_g170431.MotionData;
				Out_BoundsData15_g170431 = Data15_g170431.BoundsData;
				Out_RotationData15_g170431 = Data15_g170431.RotationData;
				half4 Model_VertexData224_g170430 = Out_VertexData15_g170431;
				float4 break226_g170430 = Model_VertexData224_g170430;
				float4 break33_g170432 = _gradient_vert_mode;
				float temp_output_30_0_g170432 = ( break226_g170430.x * break33_g170432.x );
				float temp_output_29_0_g170432 = ( break226_g170430.y * break33_g170432.y );
				float temp_output_31_0_g170432 = ( break226_g170430.z * break33_g170432.z );
				float temp_output_28_0_g170432 = ( temp_output_30_0_g170432 + temp_output_29_0_g170432 + temp_output_31_0_g170432 + ( break226_g170430.w * break33_g170432.w ) );
				float temp_output_211_0_g170430 = temp_output_28_0_g170432;
				float clampResult17_g170437 = clamp( temp_output_211_0_g170430 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _GradientMeshRemap.x;
				float temp_output_10_0_g170438 = ( _GradientMeshRemap.y - temp_output_7_0_g170438 );
				float temp_output_6_0_g170439 = saturate( ( ( clampResult17_g170437 - temp_output_7_0_g170438 ) / ( temp_output_10_0_g170438 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170439 = ( temp_output_6_0_g170439 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170439 = temp_output_6_0_g170439;
				#endif
				half Gradient_VertMask82_g170430 = staticSwitch14_g170439;
				half Gradient_Mask200_g170430 = Gradient_VertMask82_g170430;
				float3 lerpResult75_g170430 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170430);
				float temp_output_162_11_g170430 = Out_MultiMask4_g170433;
				half Visual_MultiMask196_g170430 = temp_output_162_11_g170430;
				float lerpResult190_g170430 = lerp( 1.0 , Visual_MultiMask196_g170430 , _GradientMultiValue);
				half Gradient_MultiMask194_g170430 = lerpResult190_g170430;
				float3 lerpResult186_g170430 = lerp( Visual_Albedo127_g170430 , ( Visual_Albedo127_g170430 * lerpResult75_g170430 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170430 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170430 = lerpResult186_g170430;
				#else
				float3 staticSwitch171_g170430 = Visual_Albedo127_g170430;
				#endif
				half3 Final_Albedo160_g170430 = staticSwitch171_g170430;
				float3 In_Albedo3_g170434 = Final_Albedo160_g170430;
				float2 In_NormalTS3_g170434 = Out_NormalTS4_g170433;
				float3 In_NormalWS3_g170434 = Out_NormalWS4_g170433;
				float4 In_Shader3_g170434 = Out_Shader4_g170433;
				float4 In_Emissive3_g170434 = Out_Emissive4_g170433;
				float3 temp_output_3_0_g170435 = Final_Albedo160_g170430;
				float dotResult20_g170435 = dot( temp_output_3_0_g170435 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170430 = dotResult20_g170435;
				float In_Grayscale3_g170434 = Final_Grayscale164_g170430;
				float clampResult180_g170430 = clamp( saturate( ( Final_Grayscale164_g170430 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170430 = clampResult180_g170430;
				float In_Luminosity3_g170434 = Final_Luminosity181_g170430;
				float In_MultiMask3_g170434 = temp_output_162_11_g170430;
				float In_AlphaClip3_g170434 = Out_AlphaClip4_g170433;
				float In_AlphaFade3_g170434 = Out_AlphaFade4_g170433;
				float3 In_Translucency3_g170434 = Out_Translucency4_g170433;
				float In_Transmission3_g170434 = Out_Transmission4_g170433;
				float In_Thickness3_g170434 = Out_Thickness4_g170433;
				float In_Diffusion3_g170434 = Out_Diffusion4_g170433;
				Data3_g170434.Dummy = In_Dummy3_g170434;
				Data3_g170434.Albedo = In_Albedo3_g170434;
				Data3_g170434.NormalTS = In_NormalTS3_g170434;
				Data3_g170434.NormalWS = In_NormalWS3_g170434;
				Data3_g170434.Shader = In_Shader3_g170434;
				Data3_g170434.Emissive= In_Emissive3_g170434;
				Data3_g170434.MultiMask = In_MultiMask3_g170434;
				Data3_g170434.Grayscale = In_Grayscale3_g170434;
				Data3_g170434.Luminosity = In_Luminosity3_g170434;
				Data3_g170434.AlphaClip = In_AlphaClip3_g170434;
				Data3_g170434.AlphaFade = In_AlphaFade3_g170434;
				Data3_g170434.Translucency = In_Translucency3_g170434;
				Data3_g170434.Transmission = In_Transmission3_g170434;
				Data3_g170434.Thickness = In_Thickness3_g170434;
				Data3_g170434.Diffusion = In_Diffusion3_g170434;
				TVEVisualData Data4_g170441 = Data3_g170434;
				float Out_Dummy4_g170441 = 0;
				float3 Out_Albedo4_g170441 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170441 = float2( 0,0 );
				float3 Out_NormalWS4_g170441 = float3( 0,0,0 );
				float4 Out_Shader4_g170441 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170441 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170441 = 0;
				float Out_Grayscale4_g170441 = 0;
				float Out_Luminosity4_g170441 = 0;
				float Out_AlphaClip4_g170441 = 0;
				float Out_AlphaFade4_g170441 = 0;
				float3 Out_Translucency4_g170441 = float3( 0,0,0 );
				float Out_Transmission4_g170441 = 0;
				float Out_Thickness4_g170441 = 0;
				float Out_Diffusion4_g170441 = 0;
				Out_Dummy4_g170441 = Data4_g170441.Dummy;
				Out_Albedo4_g170441 = Data4_g170441.Albedo;
				Out_NormalTS4_g170441 = Data4_g170441.NormalTS;
				Out_NormalWS4_g170441 = Data4_g170441.NormalWS;
				Out_Shader4_g170441 = Data4_g170441.Shader;
				Out_Emissive4_g170441= Data4_g170441.Emissive;
				Out_MultiMask4_g170441 = Data4_g170441.MultiMask;
				Out_Grayscale4_g170441 = Data4_g170441.Grayscale;
				Out_Luminosity4_g170441= Data4_g170441.Luminosity;
				Out_AlphaClip4_g170441 = Data4_g170441.AlphaClip;
				Out_AlphaFade4_g170441 = Data4_g170441.AlphaFade;
				Out_Translucency4_g170441 = Data4_g170441.Translucency;
				Out_Transmission4_g170441 = Data4_g170441.Transmission;
				Out_Thickness4_g170441 = Data4_g170441.Thickness;
				Out_Diffusion4_g170441 = Data4_g170441.Diffusion;
				half3 Visual_Albedo127_g170440 = Out_Albedo4_g170441;
				float4 vertexToFrag24_g170419 = IN.ase_texcoord13;
				half4 Interp_Data2469 = vertexToFrag24_g170419;
				float clampResult208_g170440 = clamp( (Interp_Data2469).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170440 = ( Visual_Albedo127_g170440 + ( ( Visual_Albedo127_g170440 * Visual_Albedo127_g170440 * 200.0 * _motion_highlight_color ) * clampResult208_g170440 ) );
				#else
				float3 staticSwitch214_g170440 = Visual_Albedo127_g170440;
				#endif
				half3 Final_Albedo160_g170440 = staticSwitch214_g170440;
				float3 In_Albedo3_g170442 = Final_Albedo160_g170440;
				float2 In_NormalTS3_g170442 = Out_NormalTS4_g170441;
				float3 In_NormalWS3_g170442 = Out_NormalWS4_g170441;
				float4 In_Shader3_g170442 = Out_Shader4_g170441;
				float4 In_Emissive3_g170442 = Out_Emissive4_g170441;
				float In_Grayscale3_g170442 = Out_Grayscale4_g170441;
				float In_Luminosity3_g170442 = Out_Luminosity4_g170441;
				float In_MultiMask3_g170442 = Out_MultiMask4_g170441;
				float In_AlphaClip3_g170442 = Out_AlphaClip4_g170441;
				float In_AlphaFade3_g170442 = Out_AlphaFade4_g170441;
				float3 In_Translucency3_g170442 = Out_Translucency4_g170441;
				float In_Transmission3_g170442 = Out_Transmission4_g170441;
				float In_Thickness3_g170442 = Out_Thickness4_g170441;
				float In_Diffusion3_g170442 = Out_Diffusion4_g170441;
				Data3_g170442.Dummy = In_Dummy3_g170442;
				Data3_g170442.Albedo = In_Albedo3_g170442;
				Data3_g170442.NormalTS = In_NormalTS3_g170442;
				Data3_g170442.NormalWS = In_NormalWS3_g170442;
				Data3_g170442.Shader = In_Shader3_g170442;
				Data3_g170442.Emissive= In_Emissive3_g170442;
				Data3_g170442.MultiMask = In_MultiMask3_g170442;
				Data3_g170442.Grayscale = In_Grayscale3_g170442;
				Data3_g170442.Luminosity = In_Luminosity3_g170442;
				Data3_g170442.AlphaClip = In_AlphaClip3_g170442;
				Data3_g170442.AlphaFade = In_AlphaFade3_g170442;
				Data3_g170442.Translucency = In_Translucency3_g170442;
				Data3_g170442.Transmission = In_Transmission3_g170442;
				Data3_g170442.Thickness = In_Thickness3_g170442;
				Data3_g170442.Diffusion = In_Diffusion3_g170442;
				TVEVisualData Data4_g170444 = Data3_g170442;
				float Out_Dummy4_g170444 = 0;
				float3 Out_Albedo4_g170444 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170444 = float2( 0,0 );
				float3 Out_NormalWS4_g170444 = float3( 0,0,0 );
				float4 Out_Shader4_g170444 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170444 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170444 = 0;
				float Out_Grayscale4_g170444 = 0;
				float Out_Luminosity4_g170444 = 0;
				float Out_AlphaClip4_g170444 = 0;
				float Out_AlphaFade4_g170444 = 0;
				float3 Out_Translucency4_g170444 = float3( 0,0,0 );
				float Out_Transmission4_g170444 = 0;
				float Out_Thickness4_g170444 = 0;
				float Out_Diffusion4_g170444 = 0;
				Out_Dummy4_g170444 = Data4_g170444.Dummy;
				Out_Albedo4_g170444 = Data4_g170444.Albedo;
				Out_NormalTS4_g170444 = Data4_g170444.NormalTS;
				Out_NormalWS4_g170444 = Data4_g170444.NormalWS;
				Out_Shader4_g170444 = Data4_g170444.Shader;
				Out_Emissive4_g170444= Data4_g170444.Emissive;
				Out_MultiMask4_g170444 = Data4_g170444.MultiMask;
				Out_Grayscale4_g170444 = Data4_g170444.Grayscale;
				Out_Luminosity4_g170444= Data4_g170444.Luminosity;
				Out_AlphaClip4_g170444 = Data4_g170444.AlphaClip;
				Out_AlphaFade4_g170444 = Data4_g170444.AlphaFade;
				Out_Translucency4_g170444 = Data4_g170444.Translucency;
				Out_Transmission4_g170444 = Data4_g170444.Transmission;
				Out_Thickness4_g170444 = Data4_g170444.Thickness;
				Out_Diffusion4_g170444 = Data4_g170444.Diffusion;
				half3 Visual_Albedo127_g170443 = Out_Albedo4_g170444;
				float3 temp_output_622_0_g170443 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170447) = _OverlayAlbedoTex;
				float localFilterTexture19_g170472 = ( 0.0 );
				SamplerState SamplerDefault19_g170472 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170472 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170472 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170472 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170472 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170472 = SamplerDefault19_g170472;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170472 = SamplerDefault19_g170472;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170472 = SamplerPoint19_g170472;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170472 = SamplerLow19_g170472;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170472 = SamplerMedium19_g170472;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170472 = SamplerHigh19_g170472;
				#endif
				SamplerState Sampler238_g170447 = SS19_g170472;
				float4 temp_output_6_0_g170450 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170450 = ( temp_output_6_0_g170450 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170450 = temp_output_6_0_g170450;
				#endif
				half4 Overlay_Coords639_g170443 = staticSwitch14_g170450;
				float4 temp_output_37_0_g170447 = Overlay_Coords639_g170443;
				half4 Coords238_g170447 = temp_output_37_0_g170447;
				TVEModelData Data15_g170451 = Data16_g170157;
				float Out_Dummy15_g170451 = 0;
				float3 Out_PositionOS15_g170451 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170451 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170451 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170451 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170451 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170451 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170451 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170451 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170451 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170451 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170451 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170451 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170451 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170451 = float3( 0,0,0 );
				float4 Out_VertexData15_g170451 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170451 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170451 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170451 = float4( 0,0,0,0 );
				Out_Dummy15_g170451 = Data15_g170451.Dummy;
				Out_PositionOS15_g170451 = Data15_g170451.PositionOS;
				Out_PositionWS15_g170451 = Data15_g170451.PositionWS;
				Out_PositionWO15_g170451 = Data15_g170451.PositionWO;
				Out_PositionRawOS15_g170451 = Data15_g170451.PositionRawOS;
				Out_PositionAddOS15_g170451 = Data15_g170451.PositionAddOS;
				Out_PivotOS15_g170451 = Data15_g170451.PivotOS;
				Out_PivotWS15_g170451 = Data15_g170451.PivotWS;
				Out_PivotWO15_g170451 = Data15_g170451.PivotWO;
				Out_NormalOS15_g170451 = Data15_g170451.NormalOS;
				Out_NormalWS15_g170451 = Data15_g170451.NormalWS;
				Out_NormalRawOS15_g170451 = Data15_g170451.NormalRawOS;
				Out_NormalRawWS15_g170451 = Data15_g170451.NormalRawWS;
				Out_TangentOS15_g170451 = Data15_g170451.TangentOS;
				Out_ViewDirWS15_g170451 = Data15_g170451.ViewDirWS;
				Out_VertexData15_g170451 = Data15_g170451.VertexData;
				Out_MotionData15_g170451 = Data15_g170451.MotionData;
				Out_BoundsData15_g170451 = Data15_g170451.BoundsData;
				Out_RotationData15_g170451 = Data15_g170451.RotationData;
				half3 Model_PositionWO602_g170443 = Out_PositionWO15_g170451;
				float3 temp_output_279_0_g170447 = Model_PositionWO602_g170443;
				half3 WorldPosition238_g170447 = temp_output_279_0_g170447;
				half4 localSamplePlanar2D238_g170447 = SamplePlanar2D( Texture238_g170447 , Sampler238_g170447 , Coords238_g170447 , WorldPosition238_g170447 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170447) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170447 = SS19_g170472;
				half4 Coords246_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition246_g170447 = temp_output_279_0_g170447;
				half3 Model_NormalWS712_g170443 = Out_NormalWS15_g170451;
				float3 temp_output_280_0_g170447 = Model_NormalWS712_g170443;
				half3 WorldNormal246_g170447 = temp_output_280_0_g170447;
				half4 localSamplePlanar3D246_g170447 = SamplePlanar3D( Texture246_g170447 , Sampler246_g170447 , Coords246_g170447 , WorldPosition246_g170447 , WorldNormal246_g170447 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170447) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170447 = SS19_g170472;
				float4 Coords234_g170447 = temp_output_37_0_g170447;
				float3 WorldPosition234_g170447 = temp_output_279_0_g170447;
				float4 localSampleStochastic2D234_g170447 = SampleStochastic2D( Texture234_g170447 , Sampler234_g170447 , Coords234_g170447 , WorldPosition234_g170447 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170447) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170447 = SS19_g170472;
				half4 Coords263_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition263_g170447 = temp_output_279_0_g170447;
				half3 WorldNormal263_g170447 = temp_output_280_0_g170447;
				half4 localSampleStochastic3D263_g170447 = SampleStochastic3D( Texture263_g170447 , Sampler263_g170447 , Coords263_g170447 , WorldPosition263_g170447 , WorldNormal263_g170447 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170443 = localSamplePlanar2D238_g170447;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170443 = localSamplePlanar3D246_g170447;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170443 = localSampleStochastic2D234_g170447;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170443 = localSampleStochastic3D263_g170447;
				#else
				float4 staticSwitch676_g170443 = localSamplePlanar2D238_g170447;
				#endif
				half3 Overlay_Albedo526_g170443 = (staticSwitch676_g170443).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170443 = ( temp_output_622_0_g170443 * Overlay_Albedo526_g170443 );
				#else
				float3 staticSwitch578_g170443 = temp_output_622_0_g170443;
				#endif
				float3 temp_output_6_0_g170466 = staticSwitch578_g170443;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170466 = ( temp_output_6_0_g170466 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170466 = temp_output_6_0_g170466;
				#endif
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170453) = _OverlayMaskTex;
				SamplerState Sampler276_g170453 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170454 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170454 = ( temp_output_6_0_g170454 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170454 = temp_output_6_0_g170454;
				#endif
				half4 Local_MaskCoords886_g170443 = staticSwitch14_g170454;
				float4 temp_output_37_0_g170453 = Local_MaskCoords886_g170443;
				half4 Coords276_g170453 = temp_output_37_0_g170453;
				half2 TexCoord276_g170453 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170453 = SampleMain( Texture276_g170453 , Sampler276_g170453 , Coords276_g170453 , TexCoord276_g170453 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170453) = _OverlayMaskTex;
				SamplerState Sampler275_g170453 = sampler_Linear_Repeat;
				half4 Coords275_g170453 = temp_output_37_0_g170453;
				half2 TexCoord275_g170453 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170453 = SampleExtra( Texture275_g170453 , Sampler275_g170453 , Coords275_g170453 , TexCoord275_g170453 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170443 = localSampleMain276_g170453;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170443 = localSampleExtra275_g170453;
				#else
				float4 staticSwitch894_g170443 = localSampleMain276_g170453;
				#endif
				half4 Local_MaskTex885_g170443 = staticSwitch894_g170443;
				float clampResult17_g170468 = clamp( (Local_MaskTex885_g170443).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170469 = ( _OverlayMaskRemap.y - temp_output_7_0_g170469 );
				float lerpResult898_g170443 = lerp( 1.0 , saturate( ( ( clampResult17_g170468 - temp_output_7_0_g170469 ) / ( temp_output_10_0_g170469 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask906_g170443 = lerpResult898_g170443;
				float3 temp_output_739_21_g170443 = Out_NormalWS4_g170444;
				half3 Visual_NormalWS749_g170443 = temp_output_739_21_g170443;
				float clampResult17_g170463 = clamp( saturate( (Visual_NormalWS749_g170443).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170462 = _OverlayProjRemap.x;
				float temp_output_10_0_g170462 = ( _OverlayProjRemap.y - temp_output_7_0_g170462 );
				float lerpResult842_g170443 = lerp( 1.0 , saturate( ( ( clampResult17_g170463 - temp_output_7_0_g170462 ) / ( temp_output_10_0_g170462 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170443 = lerpResult842_g170443;
				float temp_output_739_15_g170443 = Out_Luminosity4_g170444;
				half Visual_Luminosity654_g170443 = temp_output_739_15_g170443;
				float clampResult17_g170465 = clamp( Visual_Luminosity654_g170443 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170464 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170464 = ( _OverlayLumaRemap.y - temp_output_7_0_g170464 );
				float lerpResult587_g170443 = lerp( 1.0 , saturate( ( ( clampResult17_g170465 - temp_output_7_0_g170464 ) / ( temp_output_10_0_g170464 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170443 = lerpResult587_g170443;
				half4 Model_VertexMasks791_g170443 = Out_VertexData15_g170451;
				float4 break792_g170443 = Model_VertexMasks791_g170443;
				float4 break33_g170455 = _overlay_vert_mode;
				float temp_output_30_0_g170455 = ( break792_g170443.x * break33_g170455.x );
				float temp_output_29_0_g170455 = ( break792_g170443.y * break33_g170455.y );
				float temp_output_31_0_g170455 = ( break792_g170443.z * break33_g170455.z );
				float temp_output_28_0_g170455 = ( temp_output_30_0_g170455 + temp_output_29_0_g170455 + temp_output_31_0_g170455 + ( break792_g170443.w * break33_g170455.w ) );
				float clampResult17_g170456 = clamp( temp_output_28_0_g170455 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170459 = ( _OverlayMeshRemap.y - temp_output_7_0_g170459 );
				float lerpResult879_g170443 = lerp( 1.0 , saturate( ( ( clampResult17_g170456 - temp_output_7_0_g170459 ) / ( temp_output_10_0_g170459 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170467 = lerpResult879_g170443;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170467 = ( temp_output_6_0_g170467 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170467 = temp_output_6_0_g170467;
				#endif
				float temp_output_831_0_g170443 = staticSwitch14_g170467;
				half Overlay_VertMask801_g170443 = temp_output_831_0_g170443;
				half Overlay_MaskNoise427_g170443 = 1.0;
				TVEGlobalData Data15_g170445 = Data204_g170159;
				float Out_Dummy15_g170445 = 0;
				float4 Out_CoatParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170445 = float4( 0,0,0,0 );
				Out_Dummy15_g170445 = Data15_g170445.Dummy;
				Out_CoatParams15_g170445 = Data15_g170445.CoatParams;
				Out_PaintParams15_g170445 = Data15_g170445.PaintParams;
				Out_GlowParams15_g170445 = Data15_g170445.GlowParams;
				Out_AtmoParams15_g170445= Data15_g170445.AtmoParams;
				Out_FadeParams15_g170445= Data15_g170445.FadeParams;
				Out_FormParams15_g170445 = Data15_g170445.FormParams;
				Out_LandParams15_g170445 = Data15_g170445.LandParams;
				Out_WindParams15_g170445 = Data15_g170445.WindParams;
				Out_PushParams15_g170445 = Data15_g170445.PushParams;
				half4 Global_AtmoParams516_g170443 = Out_AtmoParams15_g170445;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170443 = (Global_AtmoParams516_g170443).z;
				#else
				float staticSwitch705_g170443 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170443 = staticSwitch705_g170443;
				half Custom_Mask646_g170443 = 1.0;
				float temp_output_7_0_g170470 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170470 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170470 );
				half Overlay_Mask494_g170443 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g170443 * Overlay_MaskProj457_g170443 * Overlay_MaskLuma438_g170443 * Overlay_VertMask801_g170443 * Overlay_MaskNoise427_g170443 * Overlay_MaskGlobal429_g170443 * Custom_Mask646_g170443 ) - temp_output_7_0_g170470 ) / ( temp_output_10_0_g170470 + 0.0001 ) ) );
				float3 lerpResult467_g170443 = lerp( Visual_Albedo127_g170443 , staticSwitch14_g170466 , Overlay_Mask494_g170443);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170443 = lerpResult467_g170443;
				#else
				float3 staticSwitch577_g170443 = Visual_Albedo127_g170443;
				#endif
				half3 Final_Albedo493_g170443 = staticSwitch577_g170443;
				float3 In_Albedo3_g170446 = Final_Albedo493_g170443;
				half2 Visual_NormalTS535_g170443 = Out_NormalTS4_g170444;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170452) = _OverlayNormalTex;
				float localFilterTexture29_g170471 = ( 0.0 );
				SamplerState SamplerDefault29_g170471 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170471 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170471 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170471 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170471 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170471 = SamplerDefault29_g170471;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170471 = SamplerDefault29_g170471;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170471 = SamplerPoint29_g170471;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170471 = SamplerLow29_g170471;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170471 = SamplerMedium29_g170471;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170471 = SamplerHigh29_g170471;
				#endif
				SamplerState Sampler238_g170452 = SS29_g170471;
				float4 temp_output_37_0_g170452 = Overlay_Coords639_g170443;
				half4 Coords238_g170452 = temp_output_37_0_g170452;
				float3 temp_output_279_0_g170452 = Model_PositionWO602_g170443;
				half3 WorldPosition238_g170452 = temp_output_279_0_g170452;
				half4 localSamplePlanar2D238_g170452 = SamplePlanar2D( Texture238_g170452 , Sampler238_g170452 , Coords238_g170452 , WorldPosition238_g170452 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170452) = _OverlayNormalTex;
				SamplerState Sampler246_g170452 = SS29_g170471;
				half4 Coords246_g170452 = temp_output_37_0_g170452;
				half3 WorldPosition246_g170452 = temp_output_279_0_g170452;
				float3 temp_output_280_0_g170452 = Model_NormalWS712_g170443;
				half3 WorldNormal246_g170452 = temp_output_280_0_g170452;
				half4 localSamplePlanar3D246_g170452 = SamplePlanar3D( Texture246_g170452 , Sampler246_g170452 , Coords246_g170452 , WorldPosition246_g170452 , WorldNormal246_g170452 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170452) = _OverlayNormalTex;
				SamplerState Sampler234_g170452 = SS29_g170471;
				float4 Coords234_g170452 = temp_output_37_0_g170452;
				float3 WorldPosition234_g170452 = temp_output_279_0_g170452;
				float4 localSampleStochastic2D234_g170452 = SampleStochastic2D( Texture234_g170452 , Sampler234_g170452 , Coords234_g170452 , WorldPosition234_g170452 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170452) = _OverlayNormalTex;
				SamplerState Sampler263_g170452 = SS29_g170471;
				half4 Coords263_g170452 = temp_output_37_0_g170452;
				half3 WorldPosition263_g170452 = temp_output_279_0_g170452;
				half3 WorldNormal263_g170452 = temp_output_280_0_g170452;
				half4 localSampleStochastic3D263_g170452 = SampleStochastic3D( Texture263_g170452 , Sampler263_g170452 , Coords263_g170452 , WorldPosition263_g170452 , WorldNormal263_g170452 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170443 = localSamplePlanar2D238_g170452;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170443 = localSamplePlanar3D246_g170452;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170443 = localSampleStochastic2D234_g170452;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170443 = localSampleStochastic3D263_g170452;
				#else
				float4 staticSwitch686_g170443 = localSamplePlanar2D238_g170452;
				#endif
				half4 Normal_Packed45_g170449 = staticSwitch686_g170443;
				float2 appendResult58_g170449 = (float2(( (Normal_Packed45_g170449).x * (Normal_Packed45_g170449).w ) , (Normal_Packed45_g170449).y));
				half2 Normal_Default50_g170449 = appendResult58_g170449;
				half2 Normal_ASTC41_g170449 = (Normal_Packed45_g170449).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170449 = Normal_ASTC41_g170449;
				#else
				float2 staticSwitch38_g170449 = Normal_Default50_g170449;
				#endif
				half2 Normal_NO_DTX544_g170449 = (Normal_Packed45_g170449).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170449 = Normal_NO_DTX544_g170449;
				#else
				float2 staticSwitch37_g170449 = staticSwitch38_g170449;
				#endif
				half2 Normal_Planar45_g170448 = (staticSwitch37_g170449*2.0 + -1.0);
				float2 break71_g170448 = Normal_Planar45_g170448;
				float3 appendResult72_g170448 = (float3(break71_g170448.x , 0.0 , break71_g170448.y));
				half2 Overlay_Normal528_g170443 = (mul( ase_worldToTangent, appendResult72_g170448 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170443 = Overlay_Normal528_g170443;
				#else
				float2 staticSwitch579_g170443 = Visual_NormalTS535_g170443;
				#endif
				float2 lerpResult551_g170443 = lerp( Visual_NormalTS535_g170443 , ( staticSwitch579_g170443 * _OverlayNormalValue ) , Overlay_Mask494_g170443);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170443 = lerpResult551_g170443;
				#else
				float2 staticSwitch583_g170443 = Visual_NormalTS535_g170443;
				#endif
				half2 Final_NormalTS499_g170443 = staticSwitch583_g170443;
				float2 In_NormalTS3_g170446 = Final_NormalTS499_g170443;
				float3 In_NormalWS3_g170446 = temp_output_739_21_g170443;
				half4 Visual_Masks536_g170443 = Out_Shader4_g170444;
				float4 appendResult585_g170443 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170443 = lerp( Visual_Masks536_g170443 , appendResult585_g170443 , Overlay_Mask494_g170443);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170443 = lerpResult584_g170443;
				#else
				float4 staticSwitch586_g170443 = Visual_Masks536_g170443;
				#endif
				half4 Final_Masks482_g170443 = staticSwitch586_g170443;
				float4 In_Shader3_g170446 = Final_Masks482_g170443;
				float4 In_Emissive3_g170446 = Out_Emissive4_g170444;
				float temp_output_739_12_g170443 = Out_Grayscale4_g170444;
				float In_Grayscale3_g170446 = temp_output_739_12_g170443;
				float In_Luminosity3_g170446 = temp_output_739_15_g170443;
				float In_MultiMask3_g170446 = Out_MultiMask4_g170444;
				float In_AlphaClip3_g170446 = Out_AlphaClip4_g170444;
				float In_AlphaFade3_g170446 = Out_AlphaFade4_g170444;
				float3 In_Translucency3_g170446 = Out_Translucency4_g170444;
				half Visual_Transmission699_g170443 = Out_Transmission4_g170444;
				float lerpResult746_g170443 = lerp( Visual_Transmission699_g170443 , ( Visual_Transmission699_g170443 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170443 * Overlay_MaskNoise427_g170443 * Overlay_MaskGlobal429_g170443 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170443 = lerpResult746_g170443;
				#else
				float staticSwitch703_g170443 = Visual_Transmission699_g170443;
				#endif
				half Final_Transmission702_g170443 = staticSwitch703_g170443;
				float In_Transmission3_g170446 = Final_Transmission702_g170443;
				float In_Thickness3_g170446 = Out_Thickness4_g170444;
				float In_Diffusion3_g170446 = Out_Diffusion4_g170444;
				Data3_g170446.Dummy = In_Dummy3_g170446;
				Data3_g170446.Albedo = In_Albedo3_g170446;
				Data3_g170446.NormalTS = In_NormalTS3_g170446;
				Data3_g170446.NormalWS = In_NormalWS3_g170446;
				Data3_g170446.Shader = In_Shader3_g170446;
				Data3_g170446.Emissive= In_Emissive3_g170446;
				Data3_g170446.MultiMask = In_MultiMask3_g170446;
				Data3_g170446.Grayscale = In_Grayscale3_g170446;
				Data3_g170446.Luminosity = In_Luminosity3_g170446;
				Data3_g170446.AlphaClip = In_AlphaClip3_g170446;
				Data3_g170446.AlphaFade = In_AlphaFade3_g170446;
				Data3_g170446.Translucency = In_Translucency3_g170446;
				Data3_g170446.Transmission = In_Transmission3_g170446;
				Data3_g170446.Thickness = In_Thickness3_g170446;
				Data3_g170446.Diffusion = In_Diffusion3_g170446;
				TVEVisualData Data4_g170492 = Data3_g170446;
				float Out_Dummy4_g170492 = 0;
				float3 Out_Albedo4_g170492 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170492 = float2( 0,0 );
				float3 Out_NormalWS4_g170492 = float3( 0,0,0 );
				float4 Out_Shader4_g170492 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170492 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170492 = 0;
				float Out_Grayscale4_g170492 = 0;
				float Out_Luminosity4_g170492 = 0;
				float Out_AlphaClip4_g170492 = 0;
				float Out_AlphaFade4_g170492 = 0;
				float3 Out_Translucency4_g170492 = float3( 0,0,0 );
				float Out_Transmission4_g170492 = 0;
				float Out_Thickness4_g170492 = 0;
				float Out_Diffusion4_g170492 = 0;
				Out_Dummy4_g170492 = Data4_g170492.Dummy;
				Out_Albedo4_g170492 = Data4_g170492.Albedo;
				Out_NormalTS4_g170492 = Data4_g170492.NormalTS;
				Out_NormalWS4_g170492 = Data4_g170492.NormalWS;
				Out_Shader4_g170492 = Data4_g170492.Shader;
				Out_Emissive4_g170492= Data4_g170492.Emissive;
				Out_MultiMask4_g170492 = Data4_g170492.MultiMask;
				Out_Grayscale4_g170492 = Data4_g170492.Grayscale;
				Out_Luminosity4_g170492= Data4_g170492.Luminosity;
				Out_AlphaClip4_g170492 = Data4_g170492.AlphaClip;
				Out_AlphaFade4_g170492 = Data4_g170492.AlphaFade;
				Out_Translucency4_g170492 = Data4_g170492.Translucency;
				Out_Transmission4_g170492 = Data4_g170492.Transmission;
				Out_Thickness4_g170492 = Data4_g170492.Thickness;
				Out_Diffusion4_g170492 = Data4_g170492.Diffusion;
				float3 temp_output_297_0_g170481 = Out_Albedo4_g170492;
				float3 In_Albedo3_g170493 = temp_output_297_0_g170481;
				float2 In_NormalTS3_g170493 = Out_NormalTS4_g170492;
				float3 In_NormalWS3_g170493 = Out_NormalWS4_g170492;
				float4 In_Shader3_g170493 = Out_Shader4_g170492;
				float4 temp_cast_6 = (0.0).xxxx;
				half4 Visual_Emissive255_g170481 = Out_Emissive4_g170492;
				TVEModelData Data15_g170482 = Data16_g170157;
				float Out_Dummy15_g170482 = 0;
				float3 Out_PositionOS15_g170482 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170482 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170482 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170482 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170482 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170482 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170482 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170482 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170482 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170482 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170482 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170482 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170482 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170482 = float3( 0,0,0 );
				float4 Out_VertexData15_g170482 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170482 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170482 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170482 = float4( 0,0,0,0 );
				Out_Dummy15_g170482 = Data15_g170482.Dummy;
				Out_PositionOS15_g170482 = Data15_g170482.PositionOS;
				Out_PositionWS15_g170482 = Data15_g170482.PositionWS;
				Out_PositionWO15_g170482 = Data15_g170482.PositionWO;
				Out_PositionRawOS15_g170482 = Data15_g170482.PositionRawOS;
				Out_PositionAddOS15_g170482 = Data15_g170482.PositionAddOS;
				Out_PivotOS15_g170482 = Data15_g170482.PivotOS;
				Out_PivotWS15_g170482 = Data15_g170482.PivotWS;
				Out_PivotWO15_g170482 = Data15_g170482.PivotWO;
				Out_NormalOS15_g170482 = Data15_g170482.NormalOS;
				Out_NormalWS15_g170482 = Data15_g170482.NormalWS;
				Out_NormalRawOS15_g170482 = Data15_g170482.NormalRawOS;
				Out_NormalRawWS15_g170482 = Data15_g170482.NormalRawWS;
				Out_TangentOS15_g170482 = Data15_g170482.TangentOS;
				Out_ViewDirWS15_g170482 = Data15_g170482.ViewDirWS;
				Out_VertexData15_g170482 = Data15_g170482.VertexData;
				Out_MotionData15_g170482 = Data15_g170482.MotionData;
				Out_BoundsData15_g170482 = Data15_g170482.BoundsData;
				Out_RotationData15_g170482 = Data15_g170482.RotationData;
				half4 Model_VertexMasks216_g170481 = Out_VertexData15_g170482;
				float4 break251_g170481 = Model_VertexMasks216_g170481;
				float4 break33_g170486 = _emissive_vert_mode;
				float temp_output_30_0_g170486 = ( break251_g170481.x * break33_g170486.x );
				float temp_output_29_0_g170486 = ( break251_g170481.y * break33_g170486.y );
				float temp_output_31_0_g170486 = ( break251_g170481.z * break33_g170486.z );
				float temp_output_28_0_g170486 = ( temp_output_30_0_g170486 + temp_output_29_0_g170486 + temp_output_31_0_g170486 + ( break251_g170481.w * break33_g170486.w ) );
				float clampResult17_g170485 = clamp( temp_output_28_0_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170489 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170489 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170489 );
				float lerpResult303_g170481 = lerp( 1.0 , saturate( ( ( clampResult17_g170485 - temp_output_7_0_g170489 ) / ( temp_output_10_0_g170489 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170495 = lerpResult303_g170481;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170495 = ( temp_output_6_0_g170495 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170495 = temp_output_6_0_g170495;
				#endif
				float temp_output_263_0_g170481 = staticSwitch14_g170495;
				half Emissive_MeshMask221_g170481 = temp_output_263_0_g170481;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170484) = _EmissiveMaskTex;
				SamplerState Sampler276_g170484 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170490 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170490 = ( temp_output_6_0_g170490 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170490 = temp_output_6_0_g170490;
				#endif
				half4 Emissive_Coords167_g170481 = staticSwitch14_g170490;
				float4 temp_output_37_0_g170484 = Emissive_Coords167_g170481;
				half4 Coords276_g170484 = temp_output_37_0_g170484;
				half2 TexCoord276_g170484 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170484 = SampleMain( Texture276_g170484 , Sampler276_g170484 , Coords276_g170484 , TexCoord276_g170484 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170484) = _EmissiveMaskTex;
				SamplerState Sampler275_g170484 = sampler_Linear_Repeat;
				half4 Coords275_g170484 = temp_output_37_0_g170484;
				half2 TexCoord275_g170484 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170484 = SampleExtra( Texture275_g170484 , Sampler275_g170484 , Coords275_g170484 , TexCoord275_g170484 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170481 = localSampleMain276_g170484;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170481 = localSampleExtra275_g170484;
				#else
				float4 staticSwitch176_g170481 = localSampleMain276_g170484;
				#endif
				half4 Emissive_MaskTex201_g170481 = staticSwitch176_g170481;
				float clampResult17_g170488 = clamp( (Emissive_MaskTex201_g170481).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170487 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170487 );
				float lerpResult302_g170481 = lerp( 1.0 , saturate( ( ( clampResult17_g170488 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170481 = lerpResult302_g170481;
				float temp_output_279_0_g170481 = ( Emissive_MeshMask221_g170481 * Emissive_Mask103_g170481 );
				float3 appendResult293_g170481 = (float3(temp_output_279_0_g170481 , temp_output_279_0_g170481 , temp_output_279_0_g170481));
				half3 Local_EmissiveColor278_g170481 = appendResult293_g170481;
				float3 temp_cast_7 = (1.0).xxx;
				TVEGlobalData Data15_g170483 = Data204_g170159;
				float Out_Dummy15_g170483 = 0;
				float4 Out_CoatParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170483 = float4( 0,0,0,0 );
				Out_Dummy15_g170483 = Data15_g170483.Dummy;
				Out_CoatParams15_g170483 = Data15_g170483.CoatParams;
				Out_PaintParams15_g170483 = Data15_g170483.PaintParams;
				Out_GlowParams15_g170483 = Data15_g170483.GlowParams;
				Out_AtmoParams15_g170483= Data15_g170483.AtmoParams;
				Out_FadeParams15_g170483= Data15_g170483.FadeParams;
				Out_FormParams15_g170483 = Data15_g170483.FormParams;
				Out_LandParams15_g170483 = Data15_g170483.LandParams;
				Out_WindParams15_g170483 = Data15_g170483.WindParams;
				Out_PushParams15_g170483 = Data15_g170483.PushParams;
				half4 Global_GlowParams179_g170481 = Out_GlowParams15_g170483;
				float3 lerpResult299_g170481 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170481).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170481 = lerpResult299_g170481;
				#else
				float3 staticSwitch228_g170481 = temp_cast_7;
				#endif
				half3 Emissive_GlobalMask248_g170481 = staticSwitch228_g170481;
				half3 Local_EmissiveValue88_g170481 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170481 );
				half3 Emissive_Blend260_g170481 = ( ( (Visual_Emissive255_g170481).xyz * Local_EmissiveColor278_g170481 ) * Local_EmissiveValue88_g170481 );
				float3 temp_output_3_0_g170491 = Emissive_Blend260_g170481;
				float temp_output_15_0_g170491 = _emissive_power_value;
				float3 temp_output_23_0_g170491 = ( temp_output_3_0_g170491 * temp_output_15_0_g170491 );
				float4 appendResult295_g170481 = (float4(temp_output_23_0_g170491 , Emissive_Mask103_g170481));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170481 = appendResult295_g170481;
				#else
				float4 staticSwitch129_g170481 = temp_cast_6;
				#endif
				half4 Final_Emissive184_g170481 = staticSwitch129_g170481;
				float4 In_Emissive3_g170493 = Final_Emissive184_g170481;
				float In_Grayscale3_g170493 = Out_Grayscale4_g170492;
				float In_Luminosity3_g170493 = Out_Luminosity4_g170492;
				float temp_output_297_11_g170481 = Out_MultiMask4_g170492;
				float In_MultiMask3_g170493 = temp_output_297_11_g170481;
				float In_AlphaClip3_g170493 = Out_AlphaClip4_g170492;
				float In_AlphaFade3_g170493 = Out_AlphaFade4_g170492;
				float3 In_Translucency3_g170493 = Out_Translucency4_g170492;
				float In_Transmission3_g170493 = Out_Transmission4_g170492;
				float In_Thickness3_g170493 = Out_Thickness4_g170492;
				float In_Diffusion3_g170493 = Out_Diffusion4_g170492;
				Data3_g170493.Dummy = In_Dummy3_g170493;
				Data3_g170493.Albedo = In_Albedo3_g170493;
				Data3_g170493.NormalTS = In_NormalTS3_g170493;
				Data3_g170493.NormalWS = In_NormalWS3_g170493;
				Data3_g170493.Shader = In_Shader3_g170493;
				Data3_g170493.Emissive= In_Emissive3_g170493;
				Data3_g170493.MultiMask = In_MultiMask3_g170493;
				Data3_g170493.Grayscale = In_Grayscale3_g170493;
				Data3_g170493.Luminosity = In_Luminosity3_g170493;
				Data3_g170493.AlphaClip = In_AlphaClip3_g170493;
				Data3_g170493.AlphaFade = In_AlphaFade3_g170493;
				Data3_g170493.Translucency = In_Translucency3_g170493;
				Data3_g170493.Transmission = In_Transmission3_g170493;
				Data3_g170493.Thickness = In_Thickness3_g170493;
				Data3_g170493.Diffusion = In_Diffusion3_g170493;
				TVEVisualData Data4_g170517 = Data3_g170493;
				float Out_Dummy4_g170517 = 0;
				float3 Out_Albedo4_g170517 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170517 = float2( 0,0 );
				float3 Out_NormalWS4_g170517 = float3( 0,0,0 );
				float4 Out_Shader4_g170517 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170517 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170517 = 0;
				float Out_Grayscale4_g170517 = 0;
				float Out_Luminosity4_g170517 = 0;
				float Out_AlphaClip4_g170517 = 0;
				float Out_AlphaFade4_g170517 = 0;
				float3 Out_Translucency4_g170517 = float3( 0,0,0 );
				float Out_Transmission4_g170517 = 0;
				float Out_Thickness4_g170517 = 0;
				float Out_Diffusion4_g170517 = 0;
				Out_Dummy4_g170517 = Data4_g170517.Dummy;
				Out_Albedo4_g170517 = Data4_g170517.Albedo;
				Out_NormalTS4_g170517 = Data4_g170517.NormalTS;
				Out_NormalWS4_g170517 = Data4_g170517.NormalWS;
				Out_Shader4_g170517 = Data4_g170517.Shader;
				Out_Emissive4_g170517= Data4_g170517.Emissive;
				Out_MultiMask4_g170517 = Data4_g170517.MultiMask;
				Out_Grayscale4_g170517 = Data4_g170517.Grayscale;
				Out_Luminosity4_g170517= Data4_g170517.Luminosity;
				Out_AlphaClip4_g170517 = Data4_g170517.AlphaClip;
				Out_AlphaFade4_g170517 = Data4_g170517.AlphaFade;
				Out_Translucency4_g170517 = Data4_g170517.Translucency;
				Out_Transmission4_g170517 = Data4_g170517.Transmission;
				Out_Thickness4_g170517 = Data4_g170517.Thickness;
				Out_Diffusion4_g170517 = Data4_g170517.Diffusion;
				half3 Visual_Albedo199_g170516 = Out_Albedo4_g170517;
				half3 Final_Albedo312_g170516 = Visual_Albedo199_g170516;
				float3 In_Albedo3_g170518 = Final_Albedo312_g170516;
				float2 In_NormalTS3_g170518 = Out_NormalTS4_g170517;
				float3 In_NormalWS3_g170518 = Out_NormalWS4_g170517;
				float4 In_Shader3_g170518 = Out_Shader4_g170517;
				float4 In_Emissive3_g170518 = Out_Emissive4_g170517;
				float In_Grayscale3_g170518 = Out_Grayscale4_g170517;
				float In_Luminosity3_g170518 = Out_Luminosity4_g170517;
				float temp_output_301_11_g170516 = Out_MultiMask4_g170517;
				float In_MultiMask3_g170518 = temp_output_301_11_g170516;
				float In_AlphaClip3_g170518 = Out_AlphaClip4_g170517;
				float In_AlphaFade3_g170518 = Out_AlphaFade4_g170517;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170516 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170516 );
				half Visual_Transmission138_g170516 = Out_Transmission4_g170517;
				half Subsurface_Value268_g170516 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170520 = Data204_g170159;
				float Out_Dummy15_g170520 = 0;
				float4 Out_CoatParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170520 = float4( 0,0,0,0 );
				Out_Dummy15_g170520 = Data15_g170520.Dummy;
				Out_CoatParams15_g170520 = Data15_g170520.CoatParams;
				Out_PaintParams15_g170520 = Data15_g170520.PaintParams;
				Out_GlowParams15_g170520 = Data15_g170520.GlowParams;
				Out_AtmoParams15_g170520= Data15_g170520.AtmoParams;
				Out_FadeParams15_g170520= Data15_g170520.FadeParams;
				Out_FormParams15_g170520 = Data15_g170520.FormParams;
				Out_LandParams15_g170520 = Data15_g170520.LandParams;
				Out_WindParams15_g170520 = Data15_g170520.WindParams;
				Out_PushParams15_g170520 = Data15_g170520.PushParams;
				half4 Global_GlowParams373_g170516 = Out_GlowParams15_g170520;
				float lerpResult403_g170516 = lerp( 1.0 , saturate( (Global_GlowParams373_g170516).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170516 = lerpResult403_g170516;
				#else
				float staticSwitch367_g170516 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170516 = staticSwitch367_g170516;
				half Visual_MultiMask292_g170516 = temp_output_301_11_g170516;
				float lerpResult293_g170516 = lerp( 1.0 , Visual_MultiMask292_g170516 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170516 = lerpResult293_g170516;
				half Custom_Mask363_g170516 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170516 = ( Visual_Transmission138_g170516 * Subsurface_Value268_g170516 * Subsurface_GlobalMask369_g170516 * Subsurface_MultiMask296_g170516 * Custom_Mask363_g170516 );
				#else
				float staticSwitch345_g170516 = 0.0;
				#endif
				half Final_Transmission269_g170516 = staticSwitch345_g170516;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170516 = ( Subsurface_Color264_g170516 * Final_Transmission269_g170516 * 10.0 );
				#else
				float3 staticSwitch348_g170516 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170516 = staticSwitch348_g170516;
				float3 In_Translucency3_g170518 = Final_Translucency254_g170516;
				float In_Transmission3_g170518 = Final_Transmission269_g170516;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170516 = 0.0;
				#else
				float staticSwitch351_g170516 = 1.0;
				#endif
				half Final_Thickness275_g170516 = staticSwitch351_g170516;
				float In_Thickness3_g170518 = Final_Thickness275_g170516;
				float Final_Diffusion340_g170516 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170518 = Final_Diffusion340_g170516;
				Data3_g170518.Dummy = In_Dummy3_g170518;
				Data3_g170518.Albedo = In_Albedo3_g170518;
				Data3_g170518.NormalTS = In_NormalTS3_g170518;
				Data3_g170518.NormalWS = In_NormalWS3_g170518;
				Data3_g170518.Shader = In_Shader3_g170518;
				Data3_g170518.Emissive= In_Emissive3_g170518;
				Data3_g170518.MultiMask = In_MultiMask3_g170518;
				Data3_g170518.Grayscale = In_Grayscale3_g170518;
				Data3_g170518.Luminosity = In_Luminosity3_g170518;
				Data3_g170518.AlphaClip = In_AlphaClip3_g170518;
				Data3_g170518.AlphaFade = In_AlphaFade3_g170518;
				Data3_g170518.Translucency = In_Translucency3_g170518;
				Data3_g170518.Transmission = In_Transmission3_g170518;
				Data3_g170518.Thickness = In_Thickness3_g170518;
				Data3_g170518.Diffusion = In_Diffusion3_g170518;
				TVEVisualData Data4_g170529 = Data3_g170518;
				float Out_Dummy4_g170529 = 0;
				float3 Out_Albedo4_g170529 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170529 = float2( 0,0 );
				float3 Out_NormalWS4_g170529 = float3( 0,0,0 );
				float4 Out_Shader4_g170529 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170529 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170529 = 0;
				float Out_Grayscale4_g170529 = 0;
				float Out_Luminosity4_g170529 = 0;
				float Out_AlphaClip4_g170529 = 0;
				float Out_AlphaFade4_g170529 = 0;
				float3 Out_Translucency4_g170529 = float3( 0,0,0 );
				float Out_Transmission4_g170529 = 0;
				float Out_Thickness4_g170529 = 0;
				float Out_Diffusion4_g170529 = 0;
				Out_Dummy4_g170529 = Data4_g170529.Dummy;
				Out_Albedo4_g170529 = Data4_g170529.Albedo;
				Out_NormalTS4_g170529 = Data4_g170529.NormalTS;
				Out_NormalWS4_g170529 = Data4_g170529.NormalWS;
				Out_Shader4_g170529 = Data4_g170529.Shader;
				Out_Emissive4_g170529= Data4_g170529.Emissive;
				Out_MultiMask4_g170529 = Data4_g170529.MultiMask;
				Out_Grayscale4_g170529 = Data4_g170529.Grayscale;
				Out_Luminosity4_g170529= Data4_g170529.Luminosity;
				Out_AlphaClip4_g170529 = Data4_g170529.AlphaClip;
				Out_AlphaFade4_g170529 = Data4_g170529.AlphaFade;
				Out_Translucency4_g170529 = Data4_g170529.Translucency;
				Out_Transmission4_g170529 = Data4_g170529.Transmission;
				Out_Thickness4_g170529 = Data4_g170529.Thickness;
				Out_Diffusion4_g170529 = Data4_g170529.Diffusion;
				half3 Input_Albedo24_g170528 = Out_Albedo4_g170529;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170528 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g170528 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g170528 = staticSwitch22_g170528;
				float4 break24_g170523 = Out_Shader4_g170529;
				half Metallic95_g170523 = break24_g170523.x;
				half Input_Metallic25_g170528 = Metallic95_g170523;
				half OneMinusReflectivity31_g170528 = ( (ColorSpaceDielectricSpec23_g170528).w - ( (ColorSpaceDielectricSpec23_g170528).w * Input_Metallic25_g170528 ) );
				
				float3 appendResult23_g170523 = (float3(Out_NormalTS4_g170529 , 1.0));
				float3 temp_output_13_0_g170527 = appendResult23_g170523;
				float3 temp_output_33_0_g170527 = ( temp_output_13_0_g170527 * _render_normal );
				float3 switchResult12_g170527 = (((ase_vface>0)?(temp_output_13_0_g170527):(temp_output_33_0_g170527)));
				
				float3 lerpResult28_g170528 = lerp( (ColorSpaceDielectricSpec23_g170528).xyz , Input_Albedo24_g170528 , Input_Metallic25_g170528);
				half RenderSpec102_g170523 = _RenderSpecular;
				
				float localCustomAlphaClip19_g170530 = ( 0.0 );
				float temp_output_3_0_g170530 = Out_AlphaClip4_g170529;
				float Alpha19_g170530 = temp_output_3_0_g170530;
				float temp_output_15_0_g170530 = 0.0;
				float Treshold19_g170530 = temp_output_15_0_g170530;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170530 - Treshold19_g170530);
				#endif
				#else
				clip(Alpha19_g170530 - Treshold19_g170530);
				#endif
				#endif
				
				o.Albedo = ( Input_Albedo24_g170528 * OneMinusReflectivity31_g170528 );
				o.Normal = switchResult12_g170527;
				o.Emission = (Out_Emissive4_g170529).xyz;

				#if defined(ASE_LIGHTING_SIMPLE)
					o.Specular = 1;
					o.Gloss = 1;
				#else
					#if defined(_SPECULAR_SETUP)
						o.Specular = ( lerpResult28_g170528 * RenderSpec102_g170523 );
					#else
						o.Metallic = 0;
					#endif
					o.Occlusion = break24_g170523.y;
					o.Smoothness = break24_g170523.w;
				#endif

				o.Alpha = saturate( ( Alpha19_g170530 * Out_AlphaFade4_g170529 ) );
				float AlphaClipThreshold = 0.5;
				float AlphaClipThresholdShadow = 0.5;
				float3 BakedGI = 0;
				float3 RefractionColor = 1;
				float RefractionIndex = 1;
				float3 Transmission = 1;
				float3 Translucency = Out_Translucency4_g170529;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				#ifndef USING_DIRECTIONAL_LIGHT
					fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
				#else
					fixed3 lightDir = _WorldSpaceLightPos0.xyz;
				#endif

				fixed4 c = 0;
				float3 worldN;
				worldN.x = dot(IN.tSpace0.xyz, o.Normal);
				worldN.y = dot(IN.tSpace1.xyz, o.Normal);
				worldN.z = dot(IN.tSpace2.xyz, o.Normal);
				worldN = normalize(worldN);
				o.Normal = worldN;

				UnityGI gi;
				UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
				gi.indirect.diffuse = 0;
				gi.indirect.specular = 0;
				gi.light.color = _LightColor0.rgb;
				gi.light.dir = lightDir;

				UnityGIInput giInput;
				UNITY_INITIALIZE_OUTPUT(UnityGIInput, giInput);
				giInput.light = gi.light;
				giInput.worldPos = worldPos;
				giInput.worldViewDir = worldViewDir;
				giInput.atten = atten;
				#if defined(LIGHTMAP_ON) || defined(DYNAMICLIGHTMAP_ON)
					giInput.lightmapUV = IN.lmap;
				#else
					giInput.lightmapUV = 0.0;
				#endif
				#if UNITY_SHOULD_SAMPLE_SH && !UNITY_SAMPLE_FULL_SH_PER_PIXEL
					giInput.ambient = IN.sh;
				#else
					giInput.ambient.rgb = 0.0;
				#endif
				giInput.probeHDR[0] = unity_SpecCube0_HDR;
				giInput.probeHDR[1] = unity_SpecCube1_HDR;
				#if defined(UNITY_SPECCUBE_BLENDING) || defined(UNITY_SPECCUBE_BOX_PROJECTION)
					giInput.boxMin[0] = unity_SpecCube0_BoxMin;
				#endif
				#ifdef UNITY_SPECCUBE_BOX_PROJECTION
					giInput.boxMax[0] = unity_SpecCube0_BoxMax;
					giInput.probePosition[0] = unity_SpecCube0_ProbePosition;
					giInput.boxMax[1] = unity_SpecCube1_BoxMax;
					giInput.boxMin[1] = unity_SpecCube1_BoxMin;
					giInput.probePosition[1] = unity_SpecCube1_ProbePosition;
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						LightingBlinnPhong_GI(o, giInput, gi);
					#else
						LightingLambert_GI(o, giInput, gi);
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						LightingStandardSpecular_GI(o, giInput, gi);
					#else
						LightingStandard_GI(o, giInput, gi);
					#endif
				#endif

				#ifdef ASE_BAKEDGI
					gi.indirect.diffuse = BakedGI;
				#endif

				#if UNITY_SHOULD_SAMPLE_SH && !defined(LIGHTMAP_ON) && defined(ASE_NO_AMBIENT)
					gi.indirect.diffuse = 0;
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						c += LightingBlinnPhong (o, worldViewDir, gi);
					#else
						c += LightingLambert( o, gi );
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						c += LightingStandardSpecular (o, worldViewDir, gi);
					#else
						c += LightingStandard(o, worldViewDir, gi);
					#endif
				#endif

				#ifdef ASE_TRANSMISSION
				{
					float shadow = _TransmissionShadow;
					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 transmission = max(0 , -dot(o.Normal, gi.light.dir)) * lightAtten * Transmission;
					c.rgb += o.Albedo * transmission;
				}
				#endif

				#ifdef ASE_TRANSLUCENCY
				{
					float shadow = _TransShadow;
					float normal = _TransNormal;
					float scattering = _TransScattering;
					float direct = _TransDirect;
					float ambient = _TransAmbient;
					float strength = _TransStrength;

					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 lightDir = gi.light.dir + o.Normal * normal;
					half transVdotL = pow( saturate( dot( worldViewDir, -lightDir ) ), scattering );
					half3 translucency = lightAtten * (transVdotL * direct + gi.indirect.diffuse * ambient) * Translucency;
					c.rgb += o.Albedo * translucency * strength;
				}
				#endif

				//#ifdef ASE_REFRACTION
				//	float4 projScreenPos = ScreenPos / ScreenPos.w;
				//	float3 refractionOffset = ( RefractionIndex - 1.0 ) * mul( UNITY_MATRIX_V, WorldNormal ).xyz * ( 1.0 - dot( WorldNormal, WorldViewDirection ) );
				//	projScreenPos.xy += refractionOffset.xy;
				//	float3 refraction = UNITY_SAMPLE_SCREENSPACE_TEXTURE( _GrabTexture, projScreenPos ) * RefractionColor;
				//	color.rgb = lerp( refraction, color.rgb, color.a );
				//	color.a = 1;
				//#endif

				c.rgb += o.Emission;

				#ifdef ASE_FOG
					UNITY_APPLY_FOG(IN.fogCoord, c);
				#endif
				return c;
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "ForwardAdd"
			Tags { "LightMode"="ForwardAdd" }
			ZWrite Off
			Blend One One

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma shader_feature_local_fragment _ _SPECULARHIGHLIGHTS_OFF
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define ASE_TRANSLUCENCY 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _SPECULAR_SETUP 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants INSTANCING_ON
			#pragma multi_compile_fwdadd_fullshadows
			#ifndef UNITY_PASS_FORWARDADD
				#define UNITY_PASS_FORWARDADD
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "AutoLight.cginc"

			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_BITANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};
			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHTING_COORDS(1,2)
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_SHADOW_COORDS(1)
					#else
						SHADOW_COORDS(1)
					#endif
				#endif
				#ifdef ASE_FOG
					UNITY_FOG_COORDS(3)
				#endif
				float4 tSpace0 : TEXCOORD5;
				float4 tSpace1 : TEXCOORD6;
				float4 tSpace2 : TEXCOORD7;
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 screenPos : TEXCOORD8;
				#endif
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				float4 ase_texcoord12 : TEXCOORD12;
				float4 ase_color : COLOR;
				float4 ase_texcoord13 : TEXCOORD13;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TRANSMISSION
				float _TransmissionShadow;
			#endif
			#ifdef ASE_TRANSLUCENCY
				float _TransStrength;
				float _TransNormal;
				float _TransScattering;
				float _TransDirect;
				float _TransAmbient;
				float _TransShadow;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half4 _OverlayColoringOn;
			uniform half4 _OverlayColoringOff;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTex);
			SamplerState sampler_OverlayGlitterTex;
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterIntensityValue;
			uniform half _OverlayLiteInfo;
			uniform half4 _OverlayGlitterColor;
			uniform half _NormalLiteInfo;
			uniform half4 _NormalColoringStart;
			uniform half4 _NormalColoringEnd;
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceSpace;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			uniform half _RenderBakeGI;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderPriority;
			uniform half _RenderQueue;
			uniform half _RenderMotion;
			uniform half _RenderClip;
			uniform half _RenderShadow;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderFilter;
			uniform half _render_src;
			uniform half _render_cull;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsLiteShader;
			uniform half _IsSubsurfaceShader;
			uniform half _IsGeneralShader;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _NormalComputeValue;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionWindElementMode;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _InteractionLiteInfo;
			uniform half4 _InteractionColoring;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _MotionPushElementMode;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half _motion_small_mask_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			SamplerState sampler_Linear_Repeat;
			uniform half _MotionIntensityValue;
			uniform half _global_wind_layer_value;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			SamplerState sampler_Linear_Clamp;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_RenderNearCoords;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_WindParams;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half _motion_tiny_mask_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionDistValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half _motion_base_mask_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionDelayValue;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half4 _normal_vert_mode;
			uniform half4 _NormalMeshRemap;
			uniform half _NormalMeshValue;
			uniform half _NormalMeshMode;
			uniform half _DisableSRPBatcher;
			uniform half _VariationLiteInfo;
			uniform half4 _VariationColoring;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _VariationIntensityValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationMultiValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationNoisePivotsValue1;
			uniform half _VariationNoiseTillingValue;
			uniform half _TintingLiteInfo;
			uniform half4 _TintingColoring;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _TintingElementMode;
			uniform half _TintingIntensityValue;
			uniform float4 _TintingColor;
			uniform half _TintingGrayValue;
			uniform half _TintingMultiValue;
			uniform half _TintingLumaValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingMeshMode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half4 _TintingBlendRemap;
			uniform half _DrynessLiteInfo;
			uniform half4 _DrynessColoring;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _DrynessIntensityValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half _DrynessMultiValue;
			uniform half _DrynessLumaValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half4 _DrynessBlendRemap;
			uniform half _WetnessLiteInfo;
			uniform half4 _WetnessColoring;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _WetnessIntensityValue;
			uniform half _WetnessContrastValue;
			uniform half _WetnessSmoothnessValue;
			uniform half _WetnessWaterIntensityValue;
			uniform half4 _WetnessWaterColor;
			uniform half _WetnessWaterBaseValue;
			uniform half4 _WetnessWaterBlendRemap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTex);
			uniform float4 _WetnessDropsTex_ST;
			SamplerState sampler_WetnessDropsTex;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsDistValue;
			uniform half _CutoutLiteInfo;
			uniform half4 _CutoutColoring;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutSpace;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutMultiValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half4 _CutoutMeshRemap;
			uniform half _DitherLiteInfo;
			uniform half4 _DitherColoring;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityValue;
			uniform half _DitherProximityDistValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherDistanceValue;
			uniform half _DitherDistanceMaxValue;
			uniform half _DitherDistanceMinValue;
			uniform half _DitherMultiValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _PerspectiveLiteInfo;
			uniform half4 _PerspectiveColoring;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeLiteInfo;
			uniform half4 _SizeFadeColoring;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeScaleValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform float4 _OverlayGlitterTex_ST;
			uniform half _OverlayGlitterDistValue;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			SamplerState sampler_Point_Repeat;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half _GlobalLiteInfo;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half4 TVE_CoatParams;
			uniform half4 TVE_PaintParams;
			uniform half4 TVE_GlowParams;
			uniform half4 TVE_AtmoParams;
			uniform half4 TVE_FormParams;
			uniform half4 TVE_PushParams;
			uniform half TVE_IsEnabled;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThirdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThirdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half _GradientMultiValue;
			uniform half3 _motion_highlight_color;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			uniform half4 _OverlayBlendRemap1;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;
			uniform half3 _render_normal;
			uniform half _RenderSpecular;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g170515 = (TVEModelData)0;
				float In_Dummy16_g170515 = 0.0;
				TVEModelData Data16_g170498 = (TVEModelData)0;
				half Dummy1575_g170496 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170498 = Dummy1575_g170496;
				TVEModelData Data16_g170475 = (TVEModelData)0;
				float In_Dummy16_g170475 = 0.0;
				TVEModelData Data16_g170286 = (TVEModelData)0;
				half4 Dummy181_g170277 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g170286 = Dummy181_g170277.r;
				TVEModelData Data16_g170225 = (TVEModelData)0;
				float In_Dummy16_g170225 = 0.0;
				TVEModelData Data16_g170158 = (TVEModelData)0;
				half Dummy207_g170143 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g170158 = Dummy207_g170143;
				half3 PositionOS131_g170143 = v.vertex.xyz;
				float3 In_PositionOS16_g170158 = PositionOS131_g170143;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g170143 = ase_worldPos;
				half3 PositionWS122_g170143 = vertexToFrag73_g170143;
				float3 In_PositionWS16_g170158 = PositionWS122_g170143;
				float4x4 break19_g170145 = unity_ObjectToWorld;
				float3 appendResult20_g170145 = (float3(break19_g170145[ 0 ][ 3 ] , break19_g170145[ 1 ][ 3 ] , break19_g170145[ 2 ][ 3 ]));
				half3 ObjectData20_g170147 = appendResult20_g170145;
				half3 WorldData19_g170147 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170147 = WorldData19_g170147;
				#else
				float3 staticSwitch14_g170147 = ObjectData20_g170147;
				#endif
				float3 temp_output_124_0_g170145 = staticSwitch14_g170147;
				float3 temp_output_239_7_g170143 = temp_output_124_0_g170145;
				float4x4 break19_g170149 = unity_ObjectToWorld;
				float3 appendResult20_g170149 = (float3(break19_g170149[ 0 ][ 3 ] , break19_g170149[ 1 ][ 3 ] , break19_g170149[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170153 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g170143 = PositionOS131_g170143;
				float3 appendResult234_g170143 = (float3(break233_g170143.x , 0.0 , break233_g170143.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170143 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170143 = appendResult60_g170153;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170143 = appendResult234_g170143;
				#else
				float3 staticSwitch229_g170143 = _Vector0;
				#endif
				half3 PivotOS149_g170143 = staticSwitch229_g170143;
				float3 temp_output_122_0_g170149 = PivotOS149_g170143;
				float3 PivotsOnly105_g170149 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g170149 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g170151 = ( appendResult20_g170149 + PivotsOnly105_g170149 );
				half3 WorldData19_g170151 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170151 = WorldData19_g170151;
				#else
				float3 staticSwitch14_g170151 = ObjectData20_g170151;
				#endif
				float3 temp_output_124_0_g170149 = staticSwitch14_g170151;
				float3 temp_output_237_7_g170143 = temp_output_124_0_g170149;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170143 = temp_output_239_7_g170143;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170143 = temp_output_237_7_g170143;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170143 = temp_output_237_7_g170143;
				#else
				float3 staticSwitch236_g170143 = temp_output_239_7_g170143;
				#endif
				float3 vertexToFrag76_g170143 = staticSwitch236_g170143;
				half3 PivotWS121_g170143 = vertexToFrag76_g170143;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170143 = ( PositionWS122_g170143 - PivotWS121_g170143 );
				#else
				float3 staticSwitch204_g170143 = PositionWS122_g170143;
				#endif
				half3 PositionWO132_g170143 = ( staticSwitch204_g170143 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170158 = PositionWO132_g170143;
				float3 In_PositionRawOS16_g170158 = PositionOS131_g170143;
				float3 In_PositionAddOS16_g170158 = float3( 0,0,0 );
				float3 In_PivotOS16_g170158 = PivotOS149_g170143;
				float3 In_PivotWS16_g170158 = PivotWS121_g170143;
				half3 PivotWO133_g170143 = ( PivotWS121_g170143 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170158 = PivotWO133_g170143;
				half3 NormalOS134_g170143 = v.normal;
				float3 In_NormalOS16_g170158 = NormalOS134_g170143;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170143 = normalizedWorldNormal;
				float3 In_NormalWS16_g170158 = Normal_WS95_g170143;
				float3 In_NormalRawOS16_g170158 = NormalOS134_g170143;
				float3 objToWorldDir298_g170143 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g170143 = objToWorldDir298_g170143;
				float3 In_NormalRawWS16_g170158 = Normal_RawWS136_g170143;
				half4 TangentlOS153_g170143 = v.tangent;
				float4 In_TangentOS16_g170158 = TangentlOS153_g170143;
				float3 normalizeResult296_g170143 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170143 ) );
				half3 ViewDirWS169_g170143 = normalizeResult296_g170143;
				float3 In_ViewDirWS16_g170158 = ViewDirWS169_g170143;
				half4 VertexMasks171_g170143 = v.ase_color;
				float4 In_VertexData16_g170158 = VertexMasks171_g170143;
				float4 break33_g170156 = _object_phase_mode;
				float temp_output_30_0_g170156 = ( v.ase_color.r * break33_g170156.x );
				float temp_output_29_0_g170156 = ( v.ase_color.g * break33_g170156.y );
				float temp_output_31_0_g170156 = ( v.ase_color.b * break33_g170156.z );
				float temp_output_28_0_g170156 = ( temp_output_30_0_g170156 + temp_output_29_0_g170156 + temp_output_31_0_g170156 + ( v.ase_color.a * break33_g170156.w ) );
				float3 break243_g170143 = PivotWO133_g170143;
				float temp_output_315_0_g170143 = (frac( ( temp_output_28_0_g170156 + ( break243_g170143.x + break243_g170143.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g170143 = (float4(1.0 , 1.0 , temp_output_315_0_g170143 , 1.0));
				half4 MotionMasks176_g170143 = appendResult177_g170143;
				float4 In_MotionData16_g170158 = MotionMasks176_g170143;
				half Object_HeightValue267_g170143 = _ObjectHeightValue;
				half Object_RadiusValue268_g170143 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170143 = saturate( ( (PositionOS131_g170143).y / Object_HeightValue267_g170143 ) );
				half Bounds_SphereMask282_g170143 = saturate( ( length( PositionOS131_g170143 ) / max( Object_HeightValue267_g170143 , Object_RadiusValue268_g170143 ) ) );
				float4 appendResult253_g170143 = (float4(Object_HeightValue267_g170143 , Object_RadiusValue268_g170143 , Bounds_HeightMask274_g170143 , Bounds_SphereMask282_g170143));
				half4 BoundsData254_g170143 = appendResult253_g170143;
				float4 In_BoundsData16_g170158 = BoundsData254_g170143;
				float4 In_RotationData16_g170158 = float4( 0,0,0,0 );
				Data16_g170158.Dummy = In_Dummy16_g170158;
				Data16_g170158.PositionOS = In_PositionOS16_g170158;
				Data16_g170158.PositionWS = In_PositionWS16_g170158;
				Data16_g170158.PositionWO = In_PositionWO16_g170158;
				Data16_g170158.PositionRawOS = In_PositionRawOS16_g170158;
				Data16_g170158.PositionAddOS = In_PositionAddOS16_g170158;
				Data16_g170158.PivotOS = In_PivotOS16_g170158;
				Data16_g170158.PivotWS = In_PivotWS16_g170158;
				Data16_g170158.PivotWO = In_PivotWO16_g170158;
				Data16_g170158.NormalOS = In_NormalOS16_g170158;
				Data16_g170158.NormalWS = In_NormalWS16_g170158;
				Data16_g170158.NormalRawOS = In_NormalRawOS16_g170158;
				Data16_g170158.NormalRawWS = In_NormalRawWS16_g170158;
				Data16_g170158.TangentOS = In_TangentOS16_g170158;
				Data16_g170158.ViewDirWS = In_ViewDirWS16_g170158;
				Data16_g170158.VertexData = In_VertexData16_g170158;
				Data16_g170158.MotionData = In_MotionData16_g170158;
				Data16_g170158.BoundsData = In_BoundsData16_g170158;
				Data16_g170158.RotationData = In_RotationData16_g170158;
				TVEModelData Data15_g170226 = Data16_g170158;
				float Out_Dummy15_g170226 = 0;
				float3 Out_PositionOS15_g170226 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170226 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170226 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170226 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170226 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170226 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170226 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170226 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170226 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170226 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170226 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170226 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170226 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170226 = float3( 0,0,0 );
				float4 Out_VertexData15_g170226 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170226 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170226 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170226 = float4( 0,0,0,0 );
				Out_Dummy15_g170226 = Data15_g170226.Dummy;
				Out_PositionOS15_g170226 = Data15_g170226.PositionOS;
				Out_PositionWS15_g170226 = Data15_g170226.PositionWS;
				Out_PositionWO15_g170226 = Data15_g170226.PositionWO;
				Out_PositionRawOS15_g170226 = Data15_g170226.PositionRawOS;
				Out_PositionAddOS15_g170226 = Data15_g170226.PositionAddOS;
				Out_PivotOS15_g170226 = Data15_g170226.PivotOS;
				Out_PivotWS15_g170226 = Data15_g170226.PivotWS;
				Out_PivotWO15_g170226 = Data15_g170226.PivotWO;
				Out_NormalOS15_g170226 = Data15_g170226.NormalOS;
				Out_NormalWS15_g170226 = Data15_g170226.NormalWS;
				Out_NormalRawOS15_g170226 = Data15_g170226.NormalRawOS;
				Out_NormalRawWS15_g170226 = Data15_g170226.NormalRawWS;
				Out_TangentOS15_g170226 = Data15_g170226.TangentOS;
				Out_ViewDirWS15_g170226 = Data15_g170226.ViewDirWS;
				Out_VertexData15_g170226 = Data15_g170226.VertexData;
				Out_MotionData15_g170226 = Data15_g170226.MotionData;
				Out_BoundsData15_g170226 = Data15_g170226.BoundsData;
				Out_RotationData15_g170226 = Data15_g170226.RotationData;
				float3 temp_output_218_24_g170224 = Out_PivotOS15_g170226;
				float3 In_PositionOS16_g170225 = ( Out_PositionOS15_g170226 - temp_output_218_24_g170224 );
				float3 In_PositionWS16_g170225 = Out_PositionWS15_g170226;
				float3 In_PositionWO16_g170225 = Out_PositionWO15_g170226;
				float3 In_PositionRawOS16_g170225 = Out_PositionRawOS15_g170226;
				float3 In_PositionAddOS16_g170225 = Out_PositionAddOS15_g170226;
				float3 In_PivotOS16_g170225 = temp_output_218_24_g170224;
				float3 In_PivotWS16_g170225 = Out_PivotWS15_g170226;
				float3 In_PivotWO16_g170225 = Out_PivotWO15_g170226;
				float3 In_NormalOS16_g170225 = Out_NormalOS15_g170226;
				float3 In_NormalWS16_g170225 = Out_NormalWS15_g170226;
				float3 In_NormalRawOS16_g170225 = Out_NormalRawOS15_g170226;
				float3 In_NormalRawWS16_g170225 = Out_NormalRawWS15_g170226;
				float4 In_TangentOS16_g170225 = Out_TangentOS15_g170226;
				float3 In_ViewDirWS16_g170225 = Out_ViewDirWS15_g170226;
				float4 In_VertexData16_g170225 = Out_VertexData15_g170226;
				float4 In_MotionData16_g170225 = Out_MotionData15_g170226;
				float4 In_BoundsData16_g170225 = Out_BoundsData15_g170226;
				float4 In_RotationData16_g170225 = Out_RotationData15_g170226;
				Data16_g170225.Dummy = In_Dummy16_g170225;
				Data16_g170225.PositionOS = In_PositionOS16_g170225;
				Data16_g170225.PositionWS = In_PositionWS16_g170225;
				Data16_g170225.PositionWO = In_PositionWO16_g170225;
				Data16_g170225.PositionRawOS = In_PositionRawOS16_g170225;
				Data16_g170225.PositionAddOS = In_PositionAddOS16_g170225;
				Data16_g170225.PivotOS = In_PivotOS16_g170225;
				Data16_g170225.PivotWS = In_PivotWS16_g170225;
				Data16_g170225.PivotWO = In_PivotWO16_g170225;
				Data16_g170225.NormalOS = In_NormalOS16_g170225;
				Data16_g170225.NormalWS = In_NormalWS16_g170225;
				Data16_g170225.NormalRawOS = In_NormalRawOS16_g170225;
				Data16_g170225.NormalRawWS = In_NormalRawWS16_g170225;
				Data16_g170225.TangentOS = In_TangentOS16_g170225;
				Data16_g170225.ViewDirWS = In_ViewDirWS16_g170225;
				Data16_g170225.VertexData = In_VertexData16_g170225;
				Data16_g170225.MotionData = In_MotionData16_g170225;
				Data16_g170225.BoundsData = In_BoundsData16_g170225;
				Data16_g170225.RotationData = In_RotationData16_g170225;
				TVEModelData Data15_g170278 = Data16_g170225;
				float Out_Dummy15_g170278 = 0;
				float3 Out_PositionOS15_g170278 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170278 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170278 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170278 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170278 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170278 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170278 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170278 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170278 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170278 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170278 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170278 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170278 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170278 = float3( 0,0,0 );
				float4 Out_VertexData15_g170278 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170278 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170278 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170278 = float4( 0,0,0,0 );
				Out_Dummy15_g170278 = Data15_g170278.Dummy;
				Out_PositionOS15_g170278 = Data15_g170278.PositionOS;
				Out_PositionWS15_g170278 = Data15_g170278.PositionWS;
				Out_PositionWO15_g170278 = Data15_g170278.PositionWO;
				Out_PositionRawOS15_g170278 = Data15_g170278.PositionRawOS;
				Out_PositionAddOS15_g170278 = Data15_g170278.PositionAddOS;
				Out_PivotOS15_g170278 = Data15_g170278.PivotOS;
				Out_PivotWS15_g170278 = Data15_g170278.PivotWS;
				Out_PivotWO15_g170278 = Data15_g170278.PivotWO;
				Out_NormalOS15_g170278 = Data15_g170278.NormalOS;
				Out_NormalWS15_g170278 = Data15_g170278.NormalWS;
				Out_NormalRawOS15_g170278 = Data15_g170278.NormalRawOS;
				Out_NormalRawWS15_g170278 = Data15_g170278.NormalRawWS;
				Out_TangentOS15_g170278 = Data15_g170278.TangentOS;
				Out_ViewDirWS15_g170278 = Data15_g170278.ViewDirWS;
				Out_VertexData15_g170278 = Data15_g170278.VertexData;
				Out_MotionData15_g170278 = Data15_g170278.MotionData;
				Out_BoundsData15_g170278 = Data15_g170278.BoundsData;
				Out_RotationData15_g170278 = Data15_g170278.RotationData;
				float3 temp_output_1567_0_g170277 = Out_PositionOS15_g170278;
				float3 In_PositionOS16_g170286 = temp_output_1567_0_g170277;
				float3 temp_output_1567_16_g170277 = Out_PositionWS15_g170278;
				float3 In_PositionWS16_g170286 = temp_output_1567_16_g170277;
				float3 temp_output_1567_17_g170277 = Out_PositionWO15_g170278;
				float3 In_PositionWO16_g170286 = temp_output_1567_17_g170277;
				float3 In_PositionRawOS16_g170286 = Out_PositionRawOS15_g170278;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g170277 = Out_VertexData15_g170278;
				half4 Model_VertexMasks518_g170277 = temp_output_1567_29_g170277;
				float4 break1689_g170277 = Model_VertexMasks518_g170277;
				float4 break33_g170283 = _motion_small_vert_mode;
				float temp_output_30_0_g170283 = ( break1689_g170277.x * break33_g170283.x );
				float temp_output_29_0_g170283 = ( break1689_g170277.y * break33_g170283.y );
				float temp_output_31_0_g170283 = ( break1689_g170277.z * break33_g170283.z );
				float temp_output_28_0_g170283 = ( temp_output_30_0_g170283 + temp_output_29_0_g170283 + temp_output_31_0_g170283 + ( break1689_g170277.w * break33_g170283.w ) );
				float temp_output_1727_0_g170277 = temp_output_28_0_g170283;
				float4 temp_output_1567_30_g170277 = Out_BoundsData15_g170278;
				half4 Model_BoundsData1322_g170277 = temp_output_1567_30_g170277;
				float4 break33_g170288 = _motion_small_proc_mode;
				float temp_output_30_0_g170288 = ( (Model_BoundsData1322_g170277).z * break33_g170288.x );
				float temp_output_29_0_g170288 = ( (Model_BoundsData1322_g170277).w * break33_g170288.y );
				float temp_output_1734_0_g170277 = ( temp_output_30_0_g170288 + temp_output_29_0_g170288 );
				float lerpResult1866_g170277 = lerp( temp_output_1727_0_g170277 , temp_output_1734_0_g170277 , _motion_small_mask_mode);
				float enc1805_g170277 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170277 = DecodeFloatToVector2( enc1805_g170277 );
				float2 break1804_g170277 = localDecodeFloatToVector21805_g170277;
				half Small_Mask_Legacy1806_g170277 = break1804_g170277.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170277 = Small_Mask_Legacy1806_g170277;
				#else
				float staticSwitch1800_g170277 = lerpResult1866_g170277;
				#endif
				float clampResult17_g170290 = clamp( staticSwitch1800_g170277 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170291 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170291 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170291 );
				float temp_output_6_0_g170292 = saturate( ( ( clampResult17_g170290 - temp_output_7_0_g170291 ) / ( temp_output_10_0_g170291 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170292 = ( temp_output_6_0_g170292 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170292 = temp_output_6_0_g170292;
				#endif
				half Small_Mask640_g170277 = staticSwitch14_g170292;
				half3 Model_PositionOS147_g170277 = temp_output_1567_0_g170277;
				float3 normalizeResult1832_g170277 = normalize( Model_PositionOS147_g170277 );
				half3 Model_PositionWO162_g170277 = temp_output_1567_17_g170277;
				float3 temp_output_1567_19_g170277 = Out_PivotWO15_g170278;
				half3 Model_PivotWO402_g170277 = temp_output_1567_19_g170277;
				float3 lerpResult829_g170277 = lerp( Model_PositionWO162_g170277 , Model_PivotWO402_g170277 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170277 = Out_MotionData15_g170278;
				half4 Model_MotionMasks489_g170277 = temp_output_1567_27_g170277;
				half3 Base_Position1394_g170277 = ( lerpResult829_g170277 + ( (Model_MotionMasks489_g170277).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170304 = Base_Position1394_g170277;
				half Flow_Tillling1397_g170277 = _MotionTillingValue;
				half Input_MotionTilling321_g170304 = ( Flow_Tillling1397_g170277 + 0.2 );
				half2 Noise_Coord515_g170304 = ( -(Input_PositionWO419_g170304).xz * Input_MotionTilling321_g170304 * 0.005 );
				half4 Noise_Params535_g170304 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170304, 0.0 );
				float2 temp_output_648_0_g170304 = (Noise_Params535_g170304).rg;
				half Flow_Value1858_g170277 = _MotionIntensityValue;
				half Input_MotionValue629_g170304 = Flow_Value1858_g170277;
				float2 lerpResult645_g170304 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170304 , Input_MotionValue629_g170304);
				float3 appendResult566_g170304 = (float3(lerpResult645_g170304 , (Noise_Params535_g170304).b));
				float temp_output_136_0_g170305 = _global_wind_layer_value;
				float temp_output_19_0_g170307 = TVE_WindLayers[(int)temp_output_136_0_g170305];
				half3 Input_Position180_g170308 = Input_PositionWO419_g170304;
				float2 temp_output_75_0_g170308 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170308).xz ) );
				float temp_output_82_0_g170308 = temp_output_136_0_g170305;
				float2 temp_output_119_0_g170308 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170308).xz ) );
				float temp_output_7_0_g170313 = 1.0;
				float temp_output_10_0_g170313 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170313 );
				float4 lerpResult131_g170308 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170308,temp_output_82_0_g170308), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170308,temp_output_82_0_g170308), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170308 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170313 ) / temp_output_10_0_g170313 ) ));
				float4 temp_output_17_0_g170307 = lerpResult131_g170308;
				float4 temp_output_3_0_g170307 = TVE_WindParams;
				float4 ifLocalVar18_g170307 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170307 >= 0.5 )
				ifLocalVar18_g170307 = temp_output_17_0_g170307;
				else
				ifLocalVar18_g170307 = temp_output_3_0_g170307;
				float4 lerpResult22_g170307 = lerp( temp_output_3_0_g170307 , temp_output_17_0_g170307 , temp_output_19_0_g170307);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170307 = lerpResult22_g170307;
				#else
				float4 staticSwitch24_g170307 = ifLocalVar18_g170307;
				#endif
				float4 temp_output_610_0_g170304 = staticSwitch24_g170307;
				float3 appendResult643_g170304 = (float3((temp_output_610_0_g170304).rg , (temp_output_610_0_g170304).b));
				float3 lerpResult623_g170304 = lerp( appendResult566_g170304 , appendResult643_g170304 , (temp_output_610_0_g170304).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170304 = lerpResult623_g170304;
				#else
				float3 staticSwitch612_g170304 = appendResult566_g170304;
				#endif
				float3 temp_output_1947_567_g170277 = staticSwitch612_g170304;
				float2 break83_g170301 = ((temp_output_1947_567_g170277).xy*2.0 + -1.0);
				float3 appendResult79_g170301 = (float3(break83_g170301.x , 0.0 , break83_g170301.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170277 = (( mul( unity_WorldToObject, float4( appendResult79_g170301 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170277 = lerp( Model_PositionWO162_g170277 , Model_PivotWO402_g170277 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170277 = ( lerpResult1411_g170277 + ( (Model_MotionMasks489_g170277).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170319 = Small_Position1421_g170277;
				half Input_MotionTilling321_g170319 = ( Flow_Tillling1397_g170277 + 0.2 );
				half2 Noise_Coord515_g170319 = ( -(Input_PositionWO419_g170319).xz * Input_MotionTilling321_g170319 * 0.005 );
				half4 Noise_Params535_g170319 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170319, 0.0 );
				float2 temp_output_648_0_g170319 = (Noise_Params535_g170319).rg;
				half Input_MotionValue629_g170319 = Flow_Value1858_g170277;
				float2 lerpResult645_g170319 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170319 , Input_MotionValue629_g170319);
				float3 appendResult566_g170319 = (float3(lerpResult645_g170319 , (Noise_Params535_g170319).b));
				float temp_output_136_0_g170320 = _global_wind_layer_value;
				float temp_output_19_0_g170322 = TVE_WindLayers[(int)temp_output_136_0_g170320];
				half3 Input_Position180_g170323 = Input_PositionWO419_g170319;
				float2 temp_output_75_0_g170323 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170323).xz ) );
				float temp_output_82_0_g170323 = temp_output_136_0_g170320;
				float2 temp_output_119_0_g170323 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170323).xz ) );
				float temp_output_7_0_g170328 = 1.0;
				float temp_output_10_0_g170328 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170328 );
				float4 lerpResult131_g170323 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170323,temp_output_82_0_g170323), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170323,temp_output_82_0_g170323), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170323 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170328 ) / temp_output_10_0_g170328 ) ));
				float4 temp_output_17_0_g170322 = lerpResult131_g170323;
				float4 temp_output_3_0_g170322 = TVE_WindParams;
				float4 ifLocalVar18_g170322 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170322 >= 0.5 )
				ifLocalVar18_g170322 = temp_output_17_0_g170322;
				else
				ifLocalVar18_g170322 = temp_output_3_0_g170322;
				float4 lerpResult22_g170322 = lerp( temp_output_3_0_g170322 , temp_output_17_0_g170322 , temp_output_19_0_g170322);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170322 = lerpResult22_g170322;
				#else
				float4 staticSwitch24_g170322 = ifLocalVar18_g170322;
				#endif
				float4 temp_output_610_0_g170319 = staticSwitch24_g170322;
				float3 appendResult643_g170319 = (float3((temp_output_610_0_g170319).rg , (temp_output_610_0_g170319).b));
				float3 lerpResult623_g170319 = lerp( appendResult566_g170319 , appendResult643_g170319 , (temp_output_610_0_g170319).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170319 = lerpResult623_g170319;
				#else
				float3 staticSwitch612_g170319 = appendResult566_g170319;
				#endif
				float3 temp_output_1946_567_g170277 = staticSwitch612_g170319;
				float2 break83_g170302 = ((temp_output_1946_567_g170277).xy*2.0 + -1.0);
				float3 appendResult79_g170302 = (float3(break83_g170302.x , 0.0 , break83_g170302.y));
				half2 Small_Direction1489_g170277 = (( mul( unity_WorldToObject, float4( appendResult79_g170302 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170277 = Small_Direction1489_g170277;
				#else
				float2 staticSwitch1485_g170277 = Base_Direction893_g170277;
				#endif
				half2 Wave_Direction1486_g170277 = staticSwitch1485_g170277;
				float2 break1828_g170277 = -Wave_Direction1486_g170277;
				float3 appendResult1830_g170277 = (float3(break1828_g170277.x , 0.0 , break1828_g170277.y));
				float dotResult1831_g170277 = dot( normalizeResult1832_g170277 , appendResult1830_g170277 );
				float lerpResult1826_g170277 = lerp( 1.0 , (dotResult1831_g170277*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170277 = lerpResult1826_g170277;
				float2 break1922_g170277 = Small_Direction1489_g170277;
				half Small_Intensity1881_g170277 = length( Small_Direction1489_g170277 );
				float3 appendResult1920_g170277 = (float3(break1922_g170277.x , Small_Intensity1881_g170277 , break1922_g170277.y));
				half Small_Noise1427_g170277 = (temp_output_1946_567_g170277).z;
				float3 appendResult1921_g170277 = (float3(Small_Noise1427_g170277 , (Small_Noise1427_g170277*0.8 + -0.4) , Small_Noise1427_g170277));
				half3 Small_Motion789_g170277 = ( _MotionSmallIntensityValue * Small_Mask640_g170277 * Motion_FrontMask1142_g170277 * appendResult1920_g170277 * appendResult1921_g170277 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170277 = Small_Motion789_g170277;
				#else
				float3 staticSwitch495_g170277 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g170277 = Model_VertexMasks518_g170277;
				float4 break33_g170284 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170284 = ( break1710_g170277.x * break33_g170284.x );
				float temp_output_29_0_g170284 = ( break1710_g170277.y * break33_g170284.y );
				float temp_output_31_0_g170284 = ( break1710_g170277.z * break33_g170284.z );
				float temp_output_28_0_g170284 = ( temp_output_30_0_g170284 + temp_output_29_0_g170284 + temp_output_31_0_g170284 + ( break1710_g170277.w * break33_g170284.w ) );
				float temp_output_1729_0_g170277 = temp_output_28_0_g170284;
				float4 break33_g170289 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170289 = ( (Model_BoundsData1322_g170277).z * break33_g170289.x );
				float temp_output_29_0_g170289 = ( (Model_BoundsData1322_g170277).w * break33_g170289.y );
				float temp_output_1735_0_g170277 = ( temp_output_30_0_g170289 + temp_output_29_0_g170289 );
				float lerpResult1867_g170277 = lerp( temp_output_1729_0_g170277 , temp_output_1735_0_g170277 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170277 = break1804_g170277.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170277 = Tiny_Mask_Legacy1807_g170277;
				#else
				float staticSwitch1810_g170277 = lerpResult1867_g170277;
				#endif
				float clampResult17_g170293 = clamp( staticSwitch1810_g170277 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170294 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170294 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170294 );
				float temp_output_6_0_g170295 = saturate( ( ( clampResult17_g170293 - temp_output_7_0_g170294 ) / ( temp_output_10_0_g170294 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170295 = ( temp_output_6_0_g170295 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170295 = temp_output_6_0_g170295;
				#endif
				half Tiny_Mask218_g170277 = staticSwitch14_g170295;
				half3 Input_Position500_g170296 = Model_PositionWO162_g170277;
				float2 temp_output_498_0_g170296 = (Input_Position500_g170296).xz;
				float4 tex2DNode460_g170296 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, temp_output_498_0_g170296, 0.0 );
				float3 appendResult462_g170296 = (float3(tex2DNode460_g170296.a , tex2DNode460_g170296.a , tex2DNode460_g170296.a));
				half3 Flutter_Texture489_g170296 = (appendResult462_g170296*2.0 + -1.0);
				half3 Tiny_Direction859_g170277 = Flutter_Texture489_g170296;
				half3 Model_PositionWS1819_g170277 = temp_output_1567_16_g170277;
				half Motion_FadeMask1820_g170277 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170277 ) / _MotionDistValue ) ) );
				half Base_Intensity1878_g170277 = length( Base_Direction893_g170277 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1899_g170277 = Small_Intensity1881_g170277;
				#else
				float staticSwitch1899_g170277 = Base_Intensity1878_g170277;
				#endif
				half Wave_Intensity1900_g170277 = staticSwitch1899_g170277;
				half Base_Noise1159_g170277 = (temp_output_1947_567_g170277).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170277 = Small_Noise1427_g170277;
				#else
				float staticSwitch1453_g170277 = Base_Noise1159_g170277;
				#endif
				half Wave_Noise1475_g170277 = staticSwitch1453_g170277;
				half3 Tiny_Motion1451_g170277 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170277 * Tiny_Direction859_g170277 * Motion_FrontMask1142_g170277 * Motion_FadeMask1820_g170277 * Wave_Intensity1900_g170277 * Wave_Noise1475_g170277 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170277 = Tiny_Motion1451_g170277;
				#else
				float3 staticSwitch414_g170277 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g170277 = ( staticSwitch495_g170277 + staticSwitch414_g170277 );
				float3 In_PositionAddOS16_g170286 = Final_PositionADD1569_g170277;
				float3 temp_output_1567_24_g170277 = Out_PivotOS15_g170278;
				float3 In_PivotOS16_g170286 = temp_output_1567_24_g170277;
				float3 In_PivotWS16_g170286 = Out_PivotWS15_g170278;
				float3 In_PivotWO16_g170286 = temp_output_1567_19_g170277;
				float3 temp_output_1567_20_g170277 = Out_NormalOS15_g170278;
				float3 In_NormalOS16_g170286 = temp_output_1567_20_g170277;
				float3 In_NormalWS16_g170286 = Out_NormalWS15_g170278;
				float3 In_NormalRawOS16_g170286 = Out_NormalRawOS15_g170278;
				float3 In_NormalRawWS16_g170286 = Out_NormalRawWS15_g170278;
				float4 In_TangentOS16_g170286 = Out_TangentOS15_g170278;
				float3 In_ViewDirWS16_g170286 = Out_ViewDirWS15_g170278;
				float4 In_VertexData16_g170286 = temp_output_1567_29_g170277;
				float4 In_MotionData16_g170286 = temp_output_1567_27_g170277;
				float4 In_BoundsData16_g170286 = temp_output_1567_30_g170277;
				float2 temp_cast_17 = (0.0).xx;
				float4 break748_g170277 = Model_VertexMasks518_g170277;
				float4 break33_g170285 = _motion_base_vert_mode;
				float temp_output_30_0_g170285 = ( break748_g170277.x * break33_g170285.x );
				float temp_output_29_0_g170285 = ( break748_g170277.y * break33_g170285.y );
				float temp_output_31_0_g170285 = ( break748_g170277.z * break33_g170285.z );
				float temp_output_28_0_g170285 = ( temp_output_30_0_g170285 + temp_output_29_0_g170285 + temp_output_31_0_g170285 + ( break748_g170277.w * break33_g170285.w ) );
				float temp_output_1731_0_g170277 = temp_output_28_0_g170285;
				float4 break33_g170287 = _motion_base_proc_mode;
				float temp_output_30_0_g170287 = ( (Model_BoundsData1322_g170277).z * break33_g170287.x );
				float temp_output_29_0_g170287 = ( (Model_BoundsData1322_g170277).w * break33_g170287.y );
				float temp_output_1733_0_g170277 = ( temp_output_30_0_g170287 + temp_output_29_0_g170287 );
				float lerpResult1863_g170277 = lerp( temp_output_1731_0_g170277 , temp_output_1733_0_g170277 , _motion_base_mask_mode);
				float clampResult17_g170280 = clamp( lerpResult1863_g170277 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170281 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170281 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170281 );
				float temp_output_6_0_g170282 = saturate( ( ( clampResult17_g170280 - temp_output_7_0_g170281 ) / ( temp_output_10_0_g170281 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170282 = ( temp_output_6_0_g170282 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170282 = temp_output_6_0_g170282;
				#endif
				half Base_Mask217_g170277 = staticSwitch14_g170282;
				half Flow_Delay1939_g170277 = _MotionDelayValue;
				float lerpResult1908_g170277 = lerp( 1.0 , ( Base_Intensity1878_g170277 * Base_Intensity1878_g170277 ) , Flow_Delay1939_g170277);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170277 = ( _MotionBaseIntensityValue * Base_Mask217_g170277 * Base_Noise1159_g170277 * Base_Direction893_g170277 * lerpResult1908_g170277 );
				#else
				float2 staticSwitch1573_g170277 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g170277 = staticSwitch1573_g170277;
				half2 Final_VertexBend1570_g170277 = Base_Motion1440_g170277;
				float4 In_RotationData16_g170286 = float4( Final_VertexBend1570_g170277, 0.0 , 0.0 );
				Data16_g170286.Dummy = In_Dummy16_g170286;
				Data16_g170286.PositionOS = In_PositionOS16_g170286;
				Data16_g170286.PositionWS = In_PositionWS16_g170286;
				Data16_g170286.PositionWO = In_PositionWO16_g170286;
				Data16_g170286.PositionRawOS = In_PositionRawOS16_g170286;
				Data16_g170286.PositionAddOS = In_PositionAddOS16_g170286;
				Data16_g170286.PivotOS = In_PivotOS16_g170286;
				Data16_g170286.PivotWS = In_PivotWS16_g170286;
				Data16_g170286.PivotWO = In_PivotWO16_g170286;
				Data16_g170286.NormalOS = In_NormalOS16_g170286;
				Data16_g170286.NormalWS = In_NormalWS16_g170286;
				Data16_g170286.NormalRawOS = In_NormalRawOS16_g170286;
				Data16_g170286.NormalRawWS = In_NormalRawWS16_g170286;
				Data16_g170286.TangentOS = In_TangentOS16_g170286;
				Data16_g170286.ViewDirWS = In_ViewDirWS16_g170286;
				Data16_g170286.VertexData = In_VertexData16_g170286;
				Data16_g170286.MotionData = In_MotionData16_g170286;
				Data16_g170286.BoundsData = In_BoundsData16_g170286;
				Data16_g170286.RotationData = In_RotationData16_g170286;
				TVEModelData Data15_g170474 = Data16_g170286;
				float Out_Dummy15_g170474 = 0;
				float3 Out_PositionOS15_g170474 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170474 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170474 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170474 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170474 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170474 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170474 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170474 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170474 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170474 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170474 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170474 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170474 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170474 = float3( 0,0,0 );
				float4 Out_VertexData15_g170474 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170474 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170474 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170474 = float4( 0,0,0,0 );
				Out_Dummy15_g170474 = Data15_g170474.Dummy;
				Out_PositionOS15_g170474 = Data15_g170474.PositionOS;
				Out_PositionWS15_g170474 = Data15_g170474.PositionWS;
				Out_PositionWO15_g170474 = Data15_g170474.PositionWO;
				Out_PositionRawOS15_g170474 = Data15_g170474.PositionRawOS;
				Out_PositionAddOS15_g170474 = Data15_g170474.PositionAddOS;
				Out_PivotOS15_g170474 = Data15_g170474.PivotOS;
				Out_PivotWS15_g170474 = Data15_g170474.PivotWS;
				Out_PivotWO15_g170474 = Data15_g170474.PivotWO;
				Out_NormalOS15_g170474 = Data15_g170474.NormalOS;
				Out_NormalWS15_g170474 = Data15_g170474.NormalWS;
				Out_NormalRawOS15_g170474 = Data15_g170474.NormalRawOS;
				Out_NormalRawWS15_g170474 = Data15_g170474.NormalRawWS;
				Out_TangentOS15_g170474 = Data15_g170474.TangentOS;
				Out_ViewDirWS15_g170474 = Data15_g170474.ViewDirWS;
				Out_VertexData15_g170474 = Data15_g170474.VertexData;
				Out_MotionData15_g170474 = Data15_g170474.MotionData;
				Out_BoundsData15_g170474 = Data15_g170474.BoundsData;
				Out_RotationData15_g170474 = Data15_g170474.RotationData;
				half3 Model_PositionOS147_g170473 = Out_PositionOS15_g170474;
				half3 Input_False58_g170479 = Model_PositionOS147_g170473;
				half3 VertexPos40_g170476 = Model_PositionOS147_g170473;
				half3 VertexPos40_g170477 = VertexPos40_g170476;
				float3 appendResult74_g170477 = (float3(VertexPos40_g170477.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170477 = appendResult74_g170477;
				float3 break84_g170477 = VertexPos40_g170477;
				float3 appendResult81_g170477 = (float3(0.0 , break84_g170477.y , break84_g170477.z));
				half3 VertexPosOtherAxis82_g170477 = appendResult81_g170477;
				float4 temp_output_1567_33_g170473 = Out_RotationData15_g170474;
				half4 Model_VertexBend1569_g170473 = temp_output_1567_33_g170473;
				half2 Angle44_g170476 = (Model_VertexBend1569_g170473).xy;
				half Angle44_g170477 = (Angle44_g170476).y;
				half3 VertexPos40_g170478 = ( VertexPosRotationAxis50_g170477 + ( VertexPosOtherAxis82_g170477 * cos( Angle44_g170477 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170477 ) * sin( Angle44_g170477 ) ) );
				float3 appendResult74_g170478 = (float3(0.0 , 0.0 , VertexPos40_g170478.z));
				half3 VertexPosRotationAxis50_g170478 = appendResult74_g170478;
				float3 break84_g170478 = VertexPos40_g170478;
				float3 appendResult81_g170478 = (float3(break84_g170478.x , break84_g170478.y , 0.0));
				half3 VertexPosOtherAxis82_g170478 = appendResult81_g170478;
				half Angle44_g170478 = -(Angle44_g170476).x;
				half3 Input_True57_g170479 = ( VertexPosRotationAxis50_g170478 + ( VertexPosOtherAxis82_g170478 * cos( Angle44_g170478 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170478 ) * sin( Angle44_g170478 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170479 = Input_True57_g170479;
				#else
				float3 staticSwitch65_g170479 = Input_False58_g170479;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170479 = Input_True57_g170479;
				#else
				float3 staticSwitch67_g170479 = staticSwitch65_g170479;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170479 = Input_True57_g170479;
				#else
				float3 staticSwitch69_g170479 = staticSwitch67_g170479;
				#endif
				float3 temp_output_1578_0_g170473 = staticSwitch69_g170479;
				float3 temp_output_1567_31_g170473 = Out_PositionAddOS15_g170474;
				half3 Model_PositionADD1568_g170473 = temp_output_1567_31_g170473;
				half3 Final_PositionOS178_g170473 = ( temp_output_1578_0_g170473 + Model_PositionADD1568_g170473 );
				float3 In_PositionOS16_g170475 = Final_PositionOS178_g170473;
				float3 In_PositionWS16_g170475 = Out_PositionWS15_g170474;
				float3 In_PositionWO16_g170475 = Out_PositionWO15_g170474;
				float3 In_PositionRawOS16_g170475 = Out_PositionRawOS15_g170474;
				float3 In_PositionAddOS16_g170475 = temp_output_1567_31_g170473;
				float3 In_PivotOS16_g170475 = Out_PivotOS15_g170474;
				float3 In_PivotWS16_g170475 = Out_PivotWS15_g170474;
				float3 In_PivotWO16_g170475 = Out_PivotWO15_g170474;
				float3 In_NormalOS16_g170475 = Out_NormalOS15_g170474;
				float3 In_NormalWS16_g170475 = Out_NormalWS15_g170474;
				float3 In_NormalRawOS16_g170475 = Out_NormalRawOS15_g170474;
				float3 In_NormalRawWS16_g170475 = Out_NormalRawWS15_g170474;
				float4 In_TangentOS16_g170475 = Out_TangentOS15_g170474;
				float3 In_ViewDirWS16_g170475 = Out_ViewDirWS15_g170474;
				float4 In_VertexData16_g170475 = Out_VertexData15_g170474;
				float4 In_MotionData16_g170475 = Out_MotionData15_g170474;
				float4 In_BoundsData16_g170475 = Out_BoundsData15_g170474;
				float4 In_RotationData16_g170475 = temp_output_1567_33_g170473;
				Data16_g170475.Dummy = In_Dummy16_g170475;
				Data16_g170475.PositionOS = In_PositionOS16_g170475;
				Data16_g170475.PositionWS = In_PositionWS16_g170475;
				Data16_g170475.PositionWO = In_PositionWO16_g170475;
				Data16_g170475.PositionRawOS = In_PositionRawOS16_g170475;
				Data16_g170475.PositionAddOS = In_PositionAddOS16_g170475;
				Data16_g170475.PivotOS = In_PivotOS16_g170475;
				Data16_g170475.PivotWS = In_PivotWS16_g170475;
				Data16_g170475.PivotWO = In_PivotWO16_g170475;
				Data16_g170475.NormalOS = In_NormalOS16_g170475;
				Data16_g170475.NormalWS = In_NormalWS16_g170475;
				Data16_g170475.NormalRawOS = In_NormalRawOS16_g170475;
				Data16_g170475.NormalRawWS = In_NormalRawWS16_g170475;
				Data16_g170475.TangentOS = In_TangentOS16_g170475;
				Data16_g170475.ViewDirWS = In_ViewDirWS16_g170475;
				Data16_g170475.VertexData = In_VertexData16_g170475;
				Data16_g170475.MotionData = In_MotionData16_g170475;
				Data16_g170475.BoundsData = In_BoundsData16_g170475;
				Data16_g170475.RotationData = In_RotationData16_g170475;
				TVEModelData Data15_g170497 = Data16_g170475;
				float Out_Dummy15_g170497 = 0;
				float3 Out_PositionOS15_g170497 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170497 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170497 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170497 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170497 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170497 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170497 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170497 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170497 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170497 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170497 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170497 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170497 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170497 = float3( 0,0,0 );
				float4 Out_VertexData15_g170497 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170497 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170497 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170497 = float4( 0,0,0,0 );
				Out_Dummy15_g170497 = Data15_g170497.Dummy;
				Out_PositionOS15_g170497 = Data15_g170497.PositionOS;
				Out_PositionWS15_g170497 = Data15_g170497.PositionWS;
				Out_PositionWO15_g170497 = Data15_g170497.PositionWO;
				Out_PositionRawOS15_g170497 = Data15_g170497.PositionRawOS;
				Out_PositionAddOS15_g170497 = Data15_g170497.PositionAddOS;
				Out_PivotOS15_g170497 = Data15_g170497.PivotOS;
				Out_PivotWS15_g170497 = Data15_g170497.PivotWS;
				Out_PivotWO15_g170497 = Data15_g170497.PivotWO;
				Out_NormalOS15_g170497 = Data15_g170497.NormalOS;
				Out_NormalWS15_g170497 = Data15_g170497.NormalWS;
				Out_NormalRawOS15_g170497 = Data15_g170497.NormalRawOS;
				Out_NormalRawWS15_g170497 = Data15_g170497.NormalRawWS;
				Out_TangentOS15_g170497 = Data15_g170497.TangentOS;
				Out_ViewDirWS15_g170497 = Data15_g170497.ViewDirWS;
				Out_VertexData15_g170497 = Data15_g170497.VertexData;
				Out_MotionData15_g170497 = Data15_g170497.MotionData;
				Out_BoundsData15_g170497 = Data15_g170497.BoundsData;
				Out_RotationData15_g170497 = Data15_g170497.RotationData;
				float3 In_PositionOS16_g170498 = Out_PositionOS15_g170497;
				float3 In_PositionWS16_g170498 = Out_PositionWS15_g170497;
				float3 In_PositionWO16_g170498 = Out_PositionWO15_g170497;
				float3 temp_output_1567_26_g170496 = Out_PositionRawOS15_g170497;
				float3 In_PositionRawOS16_g170498 = temp_output_1567_26_g170496;
				float3 In_PositionAddOS16_g170498 = Out_PositionAddOS15_g170497;
				float3 In_PivotOS16_g170498 = Out_PivotOS15_g170497;
				float3 In_PivotWS16_g170498 = Out_PivotWS15_g170497;
				float3 In_PivotWO16_g170498 = Out_PivotWO15_g170497;
				half3 Model_NormalOS1568_g170496 = Out_NormalOS15_g170497;
				float3 lerpResult1617_g170496 = lerp( Model_NormalOS1568_g170496 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170496 = temp_output_1567_26_g170496;
				float3 normalizeResult1641_g170496 = ASESafeNormalize( ( Model_PositionRAW1592_g170496 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170496 = lerp( lerpResult1617_g170496 , normalizeResult1641_g170496 , _NormalSphereValue);
				float4 temp_output_1567_30_g170496 = Out_BoundsData15_g170497;
				half4 Model_VertexData1608_g170496 = temp_output_1567_30_g170496;
				float4 break1673_g170496 = Model_VertexData1608_g170496;
				float4 break33_g170499 = _normal_vert_mode;
				float temp_output_30_0_g170499 = ( break1673_g170496.x * break33_g170499.x );
				float temp_output_29_0_g170499 = ( break1673_g170496.y * break33_g170499.y );
				float temp_output_31_0_g170499 = ( break1673_g170496.z * break33_g170499.z );
				float temp_output_28_0_g170499 = ( temp_output_30_0_g170499 + temp_output_29_0_g170499 + temp_output_31_0_g170499 + ( break1673_g170496.w * break33_g170499.w ) );
				float clampResult17_g170501 = clamp( temp_output_28_0_g170499 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170500 = _NormalMeshRemap.x;
				float temp_output_10_0_g170500 = ( _NormalMeshRemap.y - temp_output_7_0_g170500 );
				float lerpResult1682_g170496 = lerp( 1.0 , saturate( ( ( clampResult17_g170501 - temp_output_7_0_g170500 ) / ( temp_output_10_0_g170500 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170502 = lerpResult1682_g170496;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170502 = ( temp_output_6_0_g170502 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170502 = temp_output_6_0_g170502;
				#endif
				float temp_output_1679_0_g170496 = staticSwitch14_g170502;
				half Normal_MeskMask1684_g170496 = temp_output_1679_0_g170496;
				float3 lerpResult1667_g170496 = lerp( Model_NormalOS1568_g170496 , lerpResult1616_g170496 , Normal_MeskMask1684_g170496);
				half3 Final_NormalOS1666_g170496 = lerpResult1667_g170496;
				float3 In_NormalOS16_g170498 = Final_NormalOS1666_g170496;
				float3 temp_output_1567_21_g170496 = Out_NormalWS15_g170497;
				float3 In_NormalWS16_g170498 = temp_output_1567_21_g170496;
				float3 In_NormalRawOS16_g170498 = Out_NormalRawOS15_g170497;
				float3 In_NormalRawWS16_g170498 = Out_NormalRawWS15_g170497;
				float4 In_TangentOS16_g170498 = Out_TangentOS15_g170497;
				float3 In_ViewDirWS16_g170498 = Out_ViewDirWS15_g170497;
				float4 In_VertexData16_g170498 = Out_VertexData15_g170497;
				float4 In_MotionData16_g170498 = Out_MotionData15_g170497;
				float4 In_BoundsData16_g170498 = temp_output_1567_30_g170496;
				float4 In_RotationData16_g170498 = Out_RotationData15_g170497;
				Data16_g170498.Dummy = In_Dummy16_g170498;
				Data16_g170498.PositionOS = In_PositionOS16_g170498;
				Data16_g170498.PositionWS = In_PositionWS16_g170498;
				Data16_g170498.PositionWO = In_PositionWO16_g170498;
				Data16_g170498.PositionRawOS = In_PositionRawOS16_g170498;
				Data16_g170498.PositionAddOS = In_PositionAddOS16_g170498;
				Data16_g170498.PivotOS = In_PivotOS16_g170498;
				Data16_g170498.PivotWS = In_PivotWS16_g170498;
				Data16_g170498.PivotWO = In_PivotWO16_g170498;
				Data16_g170498.NormalOS = In_NormalOS16_g170498;
				Data16_g170498.NormalWS = In_NormalWS16_g170498;
				Data16_g170498.NormalRawOS = In_NormalRawOS16_g170498;
				Data16_g170498.NormalRawWS = In_NormalRawWS16_g170498;
				Data16_g170498.TangentOS = In_TangentOS16_g170498;
				Data16_g170498.ViewDirWS = In_ViewDirWS16_g170498;
				Data16_g170498.VertexData = In_VertexData16_g170498;
				Data16_g170498.MotionData = In_MotionData16_g170498;
				Data16_g170498.BoundsData = In_BoundsData16_g170498;
				Data16_g170498.RotationData = In_RotationData16_g170498;
				TVEModelData Data15_g170514 = Data16_g170498;
				float Out_Dummy15_g170514 = 0;
				float3 Out_PositionOS15_g170514 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170514 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170514 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170514 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170514 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170514 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170514 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170514 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170514 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170514 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170514 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170514 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170514 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170514 = float3( 0,0,0 );
				float4 Out_VertexData15_g170514 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170514 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170514 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170514 = float4( 0,0,0,0 );
				Out_Dummy15_g170514 = Data15_g170514.Dummy;
				Out_PositionOS15_g170514 = Data15_g170514.PositionOS;
				Out_PositionWS15_g170514 = Data15_g170514.PositionWS;
				Out_PositionWO15_g170514 = Data15_g170514.PositionWO;
				Out_PositionRawOS15_g170514 = Data15_g170514.PositionRawOS;
				Out_PositionAddOS15_g170514 = Data15_g170514.PositionAddOS;
				Out_PivotOS15_g170514 = Data15_g170514.PivotOS;
				Out_PivotWS15_g170514 = Data15_g170514.PivotWS;
				Out_PivotWO15_g170514 = Data15_g170514.PivotWO;
				Out_NormalOS15_g170514 = Data15_g170514.NormalOS;
				Out_NormalWS15_g170514 = Data15_g170514.NormalWS;
				Out_NormalRawOS15_g170514 = Data15_g170514.NormalRawOS;
				Out_NormalRawWS15_g170514 = Data15_g170514.NormalRawWS;
				Out_TangentOS15_g170514 = Data15_g170514.TangentOS;
				Out_ViewDirWS15_g170514 = Data15_g170514.ViewDirWS;
				Out_VertexData15_g170514 = Data15_g170514.VertexData;
				Out_MotionData15_g170514 = Data15_g170514.MotionData;
				Out_BoundsData15_g170514 = Data15_g170514.BoundsData;
				Out_RotationData15_g170514 = Data15_g170514.RotationData;
				float3 temp_output_217_24_g170513 = Out_PivotOS15_g170514;
				float3 In_PositionOS16_g170515 = ( Out_PositionOS15_g170514 + temp_output_217_24_g170513 );
				float3 In_PositionWS16_g170515 = Out_PositionWS15_g170514;
				float3 In_PositionWO16_g170515 = Out_PositionWO15_g170514;
				float3 In_PositionRawOS16_g170515 = Out_PositionRawOS15_g170514;
				float3 In_PositionAddOS16_g170515 = Out_PositionAddOS15_g170514;
				float3 In_PivotOS16_g170515 = temp_output_217_24_g170513;
				float3 In_PivotWS16_g170515 = Out_PivotWS15_g170514;
				float3 In_PivotWO16_g170515 = Out_PivotWO15_g170514;
				float3 In_NormalOS16_g170515 = Out_NormalOS15_g170514;
				float3 In_NormalWS16_g170515 = Out_NormalWS15_g170514;
				float3 In_NormalRawOS16_g170515 = Out_NormalRawOS15_g170514;
				float3 In_NormalRawWS16_g170515 = Out_NormalRawWS15_g170514;
				float4 In_TangentOS16_g170515 = Out_TangentOS15_g170514;
				float3 In_ViewDirWS16_g170515 = Out_ViewDirWS15_g170514;
				float4 In_VertexData16_g170515 = Out_VertexData15_g170514;
				float4 In_MotionData16_g170515 = Out_MotionData15_g170514;
				float4 In_BoundsData16_g170515 = Out_BoundsData15_g170514;
				float4 In_RotationData16_g170515 = Out_RotationData15_g170514;
				Data16_g170515.Dummy = In_Dummy16_g170515;
				Data16_g170515.PositionOS = In_PositionOS16_g170515;
				Data16_g170515.PositionWS = In_PositionWS16_g170515;
				Data16_g170515.PositionWO = In_PositionWO16_g170515;
				Data16_g170515.PositionRawOS = In_PositionRawOS16_g170515;
				Data16_g170515.PositionAddOS = In_PositionAddOS16_g170515;
				Data16_g170515.PivotOS = In_PivotOS16_g170515;
				Data16_g170515.PivotWS = In_PivotWS16_g170515;
				Data16_g170515.PivotWO = In_PivotWO16_g170515;
				Data16_g170515.NormalOS = In_NormalOS16_g170515;
				Data16_g170515.NormalWS = In_NormalWS16_g170515;
				Data16_g170515.NormalRawOS = In_NormalRawOS16_g170515;
				Data16_g170515.NormalRawWS = In_NormalRawWS16_g170515;
				Data16_g170515.TangentOS = In_TangentOS16_g170515;
				Data16_g170515.ViewDirWS = In_ViewDirWS16_g170515;
				Data16_g170515.VertexData = In_VertexData16_g170515;
				Data16_g170515.MotionData = In_MotionData16_g170515;
				Data16_g170515.BoundsData = In_BoundsData16_g170515;
				Data16_g170515.RotationData = In_RotationData16_g170515;
				TVEModelData Data15_g170526 = Data16_g170515;
				float Out_Dummy15_g170526 = 0;
				float3 Out_PositionOS15_g170526 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170526 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170526 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170526 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170526 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170526 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170526 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170526 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170526 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170526 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170526 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170526 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170526 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170526 = float3( 0,0,0 );
				float4 Out_VertexData15_g170526 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170526 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170526 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170526 = float4( 0,0,0,0 );
				Out_Dummy15_g170526 = Data15_g170526.Dummy;
				Out_PositionOS15_g170526 = Data15_g170526.PositionOS;
				Out_PositionWS15_g170526 = Data15_g170526.PositionWS;
				Out_PositionWO15_g170526 = Data15_g170526.PositionWO;
				Out_PositionRawOS15_g170526 = Data15_g170526.PositionRawOS;
				Out_PositionAddOS15_g170526 = Data15_g170526.PositionAddOS;
				Out_PivotOS15_g170526 = Data15_g170526.PivotOS;
				Out_PivotWS15_g170526 = Data15_g170526.PivotWS;
				Out_PivotWO15_g170526 = Data15_g170526.PivotWO;
				Out_NormalOS15_g170526 = Data15_g170526.NormalOS;
				Out_NormalWS15_g170526 = Data15_g170526.NormalWS;
				Out_NormalRawOS15_g170526 = Data15_g170526.NormalRawOS;
				Out_NormalRawWS15_g170526 = Data15_g170526.NormalRawWS;
				Out_TangentOS15_g170526 = Data15_g170526.TangentOS;
				Out_ViewDirWS15_g170526 = Data15_g170526.ViewDirWS;
				Out_VertexData15_g170526 = Data15_g170526.VertexData;
				Out_MotionData15_g170526 = Data15_g170526.MotionData;
				Out_BoundsData15_g170526 = Data15_g170526.BoundsData;
				Out_RotationData15_g170526 = Data15_g170526.RotationData;
				float3 temp_output_31_0_g170523 = Out_PositionOS15_g170526;
				
				float4 temp_output_6_0_g170538 = Out_TangentOS15_g170526;
				float2 uv_WetnessDropsTex = v.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data2262 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + 0.0 ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + 0.0 ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170538 = ( temp_output_6_0_g170538 + ( Dummy_Data2262 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170538 = temp_output_6_0_g170538;
				#endif
				
				o.ase_texcoord11.xyz = vertexToFrag73_g170143;
				o.ase_texcoord12.xyz = vertexToFrag76_g170143;
				float temp_output_6_0_g170303 = ( _MotionHighlightValue * Motion_FadeMask1820_g170277 * Wave_Intensity1900_g170277 * ( Base_Mask217_g170277 * Base_Mask217_g170277 ) * ( Wave_Noise1475_g170277 * Wave_Noise1475_g170277 * Wave_Noise1475_g170277 * Wave_Noise1475_g170277 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170303 = ( temp_output_6_0_g170303 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170303 = temp_output_6_0_g170303;
				#endif
				half Wave_Mask2479 = staticSwitch14_g170303;
				float4 appendResult23_g170419 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask2479));
				float4 vertexToFrag24_g170419 = appendResult23_g170419;
				o.ase_texcoord13 = vertexToFrag24_g170419;
				
				o.ase_texcoord9 = v.ase_texcoord;
				o.ase_texcoord10.xy = v.texcoord2.xyzw.xy;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord10.zw = 0;
				o.ase_texcoord11.w = 0;
				o.ase_texcoord12.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g170523 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g170526;
				v.tangent = staticSwitch14_g170538;

				o.pos = UnityObjectToClipPos(v.vertex);
				float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
				fixed3 worldNormal = UnityObjectToWorldNormal(v.normal);
				fixed3 worldTangent = UnityObjectToWorldDir(v.tangent.xyz);
				fixed tangentSign = v.tangent.w * unity_WorldTransformParams.w;
				fixed3 worldBinormal = cross(worldNormal, worldTangent) * tangentSign;
				o.tSpace0 = float4(worldTangent.x, worldBinormal.x, worldNormal.x, worldPos.x);
				o.tSpace1 = float4(worldTangent.y, worldBinormal.y, worldNormal.y, worldPos.y);
				o.tSpace2 = float4(worldTangent.z, worldBinormal.z, worldNormal.z, worldPos.z);

				#if UNITY_VERSION >= 201810 && defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_TRANSFER_LIGHTING(o, v.texcoord1.xy);
				#elif defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					#if UNITY_VERSION >= 201710
						UNITY_TRANSFER_SHADOW(o, v.texcoord1.xy);
					#else
						TRANSFER_SHADOW(o);
					#endif
				#endif

				#ifdef ASE_FOG
					UNITY_TRANSFER_FOG(o,o.pos);
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
					o.screenPos = ComputeScreenPos(o.pos);
				#endif
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag ( v2f IN , bool ase_vface : SV_IsFrontFace
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float3 WorldTangent = float3(IN.tSpace0.x,IN.tSpace1.x,IN.tSpace2.x);
				float3 WorldBiTangent = float3(IN.tSpace0.y,IN.tSpace1.y,IN.tSpace2.y);
				float3 WorldNormal = float3(IN.tSpace0.z,IN.tSpace1.z,IN.tSpace2.z);
				float3 worldPos = float3(IN.tSpace0.w,IN.tSpace1.w,IN.tSpace2.w);
				float3 worldViewDir = normalize(UnityWorldSpaceViewDir(worldPos));
				#if defined(ASE_NEEDS_FRAG_SHADOWCOORDS)
					UNITY_LIGHT_ATTENUATION(atten, IN, worldPos)
				#else
					half atten = 1;
				#endif
				#if defined(ASE_NEEDS_FRAG_SCREEN_POSITION)
				float4 ScreenPos = IN.screenPos;
				#endif


				float localBreakData4_g170529 = ( 0.0 );
				float localCompData3_g170518 = ( 0.0 );
				TVEVisualData Data3_g170518 = (TVEVisualData)0;
				half Dummy145_g170516 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170518 = Dummy145_g170516;
				float localBreakData4_g170517 = ( 0.0 );
				float localCompData3_g170493 = ( 0.0 );
				TVEVisualData Data3_g170493 = (TVEVisualData)0;
				half Dummy145_g170481 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170493 = Dummy145_g170481;
				float localBreakData4_g170492 = ( 0.0 );
				float localCompData3_g170446 = ( 0.0 );
				TVEVisualData Data3_g170446 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = IN.ase_texcoord9.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g170443 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g170446 = Dummy594_g170443.r;
				float localBreakData4_g170444 = ( 0.0 );
				float localCompData3_g170442 = ( 0.0 );
				TVEVisualData Data3_g170442 = (TVEVisualData)0;
				float In_Dummy3_g170442 = 0.0;
				float localBreakData4_g170441 = ( 0.0 );
				float localCompData3_g170434 = ( 0.0 );
				TVEVisualData Data3_g170434 = (TVEVisualData)0;
				half Dummy220_g170430 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170434 = Dummy220_g170430;
				float localBreakData4_g170433 = ( 0.0 );
				float localCompData3_g170422 = ( 0.0 );
				TVEVisualData Data3_g170422 = (TVEVisualData)0;
				half Dummy202_g170420 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170422 = Dummy202_g170420;
				float localBreakData4_g170421 = ( 0.0 );
				float localCompData3_g170403 = ( 0.0 );
				TVEVisualData Data3_g170403 = (TVEVisualData)0;
				half4 Dummy944_g170386 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170403 = Dummy944_g170386.x;
				float localBreakData4_g170402 = ( 0.0 );
				float localCompData3_g170363 = ( 0.0 );
				TVEVisualData Data3_g170363 = (TVEVisualData)0;
				half4 Dummy946_g170352 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170363 = Dummy946_g170352.x;
				float localBreakData4_g170366 = ( 0.0 );
				float localCompData3_g170344 = ( 0.0 );
				TVEVisualData Data3_g170344 = (TVEVisualData)0;
				half4 Dummy130_g170334 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170344 = Dummy130_g170334.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170345) = _MainAlbedoTex;
				float localFilterTexture19_g170348 = ( 0.0 );
				SamplerState SamplerDefault19_g170348 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170348 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170348 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170348 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170348 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170348 = SamplerDefault19_g170348;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170348 = SamplerDefault19_g170348;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170348 = SamplerPoint19_g170348;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170348 = SamplerLow19_g170348;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170348 = SamplerMedium19_g170348;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170348 = SamplerHigh19_g170348;
				#endif
				SamplerState Sampler276_g170345 = SS19_g170348;
				half4 Local_Coords180_g170334 = _main_coord_value;
				float4 temp_output_37_0_g170345 = Local_Coords180_g170334;
				half4 Coords276_g170345 = temp_output_37_0_g170345;
				half2 TexCoord276_g170345 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170345 = SampleMain( Texture276_g170345 , Sampler276_g170345 , Coords276_g170345 , TexCoord276_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170345) = _MainAlbedoTex;
				SamplerState Sampler275_g170345 = SS19_g170348;
				half4 Coords275_g170345 = temp_output_37_0_g170345;
				half2 TexCoord275_g170345 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170345 = SampleExtra( Texture275_g170345 , Sampler275_g170345 , Coords275_g170345 , TexCoord275_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170345) = _MainAlbedoTex;
				SamplerState Sampler238_g170345 = SS19_g170348;
				half4 Coords238_g170345 = temp_output_37_0_g170345;
				TVEModelData Data16_g170157 = (TVEModelData)0;
				float In_Dummy16_g170157 = 0.0;
				float3 In_PositionOS16_g170157 = float3( 0,0,0 );
				float3 vertexToFrag73_g170143 = IN.ase_texcoord11.xyz;
				half3 PositionWS122_g170143 = vertexToFrag73_g170143;
				float3 In_PositionWS16_g170157 = PositionWS122_g170143;
				float3 vertexToFrag76_g170143 = IN.ase_texcoord12.xyz;
				half3 PivotWS121_g170143 = vertexToFrag76_g170143;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170143 = ( PositionWS122_g170143 - PivotWS121_g170143 );
				#else
				float3 staticSwitch204_g170143 = PositionWS122_g170143;
				#endif
				half3 PositionWO132_g170143 = ( staticSwitch204_g170143 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170157 = PositionWO132_g170143;
				float3 In_PositionRawOS16_g170157 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170157 = float3( 0,0,0 );
				float3 In_PivotOS16_g170157 = float3( 0,0,0 );
				float3 In_PivotWS16_g170157 = PivotWS121_g170143;
				half3 PivotWO133_g170143 = ( PivotWS121_g170143 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170157 = PivotWO133_g170143;
				float3 In_NormalOS16_g170157 = float3( 0,0,0 );
				float3 normalizedWorldNormal = normalize( WorldNormal );
				half3 Normal_WS95_g170143 = normalizedWorldNormal;
				float3 In_NormalWS16_g170157 = Normal_WS95_g170143;
				float3 In_NormalRawOS16_g170157 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170157 = float3( 0,0,0 );
				float4 In_TangentOS16_g170157 = float4( 0,1,0,1 );
				float3 normalizeResult296_g170143 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170143 ) );
				half3 ViewDirWS169_g170143 = normalizeResult296_g170143;
				float3 In_ViewDirWS16_g170157 = ViewDirWS169_g170143;
				half4 VertexMasks171_g170143 = IN.ase_color;
				float4 In_VertexData16_g170157 = VertexMasks171_g170143;
				float4 In_MotionData16_g170157 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170157 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170157 = float4( 0,0,0,0 );
				Data16_g170157.Dummy = In_Dummy16_g170157;
				Data16_g170157.PositionOS = In_PositionOS16_g170157;
				Data16_g170157.PositionWS = In_PositionWS16_g170157;
				Data16_g170157.PositionWO = In_PositionWO16_g170157;
				Data16_g170157.PositionRawOS = In_PositionRawOS16_g170157;
				Data16_g170157.PositionAddOS = In_PositionAddOS16_g170157;
				Data16_g170157.PivotOS = In_PivotOS16_g170157;
				Data16_g170157.PivotWS = In_PivotWS16_g170157;
				Data16_g170157.PivotWO = In_PivotWO16_g170157;
				Data16_g170157.NormalOS = In_NormalOS16_g170157;
				Data16_g170157.NormalWS = In_NormalWS16_g170157;
				Data16_g170157.NormalRawOS = In_NormalRawOS16_g170157;
				Data16_g170157.NormalRawWS = In_NormalRawWS16_g170157;
				Data16_g170157.TangentOS = In_TangentOS16_g170157;
				Data16_g170157.ViewDirWS = In_ViewDirWS16_g170157;
				Data16_g170157.VertexData = In_VertexData16_g170157;
				Data16_g170157.MotionData = In_MotionData16_g170157;
				Data16_g170157.BoundsData = In_BoundsData16_g170157;
				Data16_g170157.RotationData = In_RotationData16_g170157;
				TVEModelData Data15_g170335 = Data16_g170157;
				float Out_Dummy15_g170335 = 0;
				float3 Out_PositionOS15_g170335 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170335 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170335 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170335 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170335 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170335 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170335 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170335 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170335 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170335 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170335 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170335 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170335 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170335 = float3( 0,0,0 );
				float4 Out_VertexData15_g170335 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170335 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170335 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170335 = float4( 0,0,0,0 );
				Out_Dummy15_g170335 = Data15_g170335.Dummy;
				Out_PositionOS15_g170335 = Data15_g170335.PositionOS;
				Out_PositionWS15_g170335 = Data15_g170335.PositionWS;
				Out_PositionWO15_g170335 = Data15_g170335.PositionWO;
				Out_PositionRawOS15_g170335 = Data15_g170335.PositionRawOS;
				Out_PositionAddOS15_g170335 = Data15_g170335.PositionAddOS;
				Out_PivotOS15_g170335 = Data15_g170335.PivotOS;
				Out_PivotWS15_g170335 = Data15_g170335.PivotWS;
				Out_PivotWO15_g170335 = Data15_g170335.PivotWO;
				Out_NormalOS15_g170335 = Data15_g170335.NormalOS;
				Out_NormalWS15_g170335 = Data15_g170335.NormalWS;
				Out_NormalRawOS15_g170335 = Data15_g170335.NormalRawOS;
				Out_NormalRawWS15_g170335 = Data15_g170335.NormalRawWS;
				Out_TangentOS15_g170335 = Data15_g170335.TangentOS;
				Out_ViewDirWS15_g170335 = Data15_g170335.ViewDirWS;
				Out_VertexData15_g170335 = Data15_g170335.VertexData;
				Out_MotionData15_g170335 = Data15_g170335.MotionData;
				Out_BoundsData15_g170335 = Data15_g170335.BoundsData;
				Out_RotationData15_g170335 = Data15_g170335.RotationData;
				half3 Model_PositionWO222_g170334 = Out_PositionWO15_g170335;
				float3 temp_output_279_0_g170345 = Model_PositionWO222_g170334;
				half3 WorldPosition238_g170345 = temp_output_279_0_g170345;
				half4 localSamplePlanar2D238_g170345 = SamplePlanar2D( Texture238_g170345 , Sampler238_g170345 , Coords238_g170345 , WorldPosition238_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170345) = _MainAlbedoTex;
				SamplerState Sampler246_g170345 = SS19_g170348;
				half4 Coords246_g170345 = temp_output_37_0_g170345;
				half3 WorldPosition246_g170345 = temp_output_279_0_g170345;
				half3 Model_NormalWS226_g170334 = Out_NormalWS15_g170335;
				float3 temp_output_280_0_g170345 = Model_NormalWS226_g170334;
				half3 WorldNormal246_g170345 = temp_output_280_0_g170345;
				half4 localSamplePlanar3D246_g170345 = SamplePlanar3D( Texture246_g170345 , Sampler246_g170345 , Coords246_g170345 , WorldPosition246_g170345 , WorldNormal246_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170345) = _MainAlbedoTex;
				SamplerState Sampler234_g170345 = SS19_g170348;
				float4 Coords234_g170345 = temp_output_37_0_g170345;
				float3 WorldPosition234_g170345 = temp_output_279_0_g170345;
				float4 localSampleStochastic2D234_g170345 = SampleStochastic2D( Texture234_g170345 , Sampler234_g170345 , Coords234_g170345 , WorldPosition234_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170345) = _MainAlbedoTex;
				SamplerState Sampler263_g170345 = SS19_g170348;
				half4 Coords263_g170345 = temp_output_37_0_g170345;
				half3 WorldPosition263_g170345 = temp_output_279_0_g170345;
				half3 WorldNormal263_g170345 = temp_output_280_0_g170345;
				half4 localSampleStochastic3D263_g170345 = SampleStochastic3D( Texture263_g170345 , Sampler263_g170345 , Coords263_g170345 , WorldPosition263_g170345 , WorldNormal263_g170345 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170334 = localSampleMain276_g170345;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170334 = localSampleExtra275_g170345;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170334 = localSamplePlanar2D238_g170345;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170334 = localSamplePlanar3D246_g170345;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170334 = localSampleStochastic2D234_g170345;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170334 = localSampleStochastic3D263_g170345;
				#else
				float4 staticSwitch184_g170334 = localSampleMain276_g170345;
				#endif
				half4 Local_AlbedoTex185_g170334 = staticSwitch184_g170334;
				float3 lerpResult53_g170334 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170334).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170334 = lerpResult53_g170334;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170347) = _MainShaderTex;
				float localFilterTexture30_g170350 = ( 0.0 );
				SamplerState SamplerDefault30_g170350 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170350 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170350 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170350 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170350 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170350 = SamplerDefault30_g170350;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170350 = SamplerDefault30_g170350;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170350 = SamplerPoint30_g170350;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170350 = SamplerLow30_g170350;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170350 = SamplerMedium30_g170350;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170350 = SamplerHigh30_g170350;
				#endif
				SamplerState Sampler276_g170347 = SS30_g170350;
				float4 temp_output_37_0_g170347 = Local_Coords180_g170334;
				half4 Coords276_g170347 = temp_output_37_0_g170347;
				half2 TexCoord276_g170347 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170347 = SampleMain( Texture276_g170347 , Sampler276_g170347 , Coords276_g170347 , TexCoord276_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170347) = _MainShaderTex;
				SamplerState Sampler275_g170347 = SS30_g170350;
				half4 Coords275_g170347 = temp_output_37_0_g170347;
				half2 TexCoord275_g170347 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170347 = SampleExtra( Texture275_g170347 , Sampler275_g170347 , Coords275_g170347 , TexCoord275_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170347) = _MainShaderTex;
				SamplerState Sampler238_g170347 = SS30_g170350;
				half4 Coords238_g170347 = temp_output_37_0_g170347;
				float3 temp_output_279_0_g170347 = Model_PositionWO222_g170334;
				half3 WorldPosition238_g170347 = temp_output_279_0_g170347;
				half4 localSamplePlanar2D238_g170347 = SamplePlanar2D( Texture238_g170347 , Sampler238_g170347 , Coords238_g170347 , WorldPosition238_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170347) = _MainShaderTex;
				SamplerState Sampler246_g170347 = SS30_g170350;
				half4 Coords246_g170347 = temp_output_37_0_g170347;
				half3 WorldPosition246_g170347 = temp_output_279_0_g170347;
				float3 temp_output_280_0_g170347 = Model_NormalWS226_g170334;
				half3 WorldNormal246_g170347 = temp_output_280_0_g170347;
				half4 localSamplePlanar3D246_g170347 = SamplePlanar3D( Texture246_g170347 , Sampler246_g170347 , Coords246_g170347 , WorldPosition246_g170347 , WorldNormal246_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170347) = _MainShaderTex;
				SamplerState Sampler234_g170347 = SS30_g170350;
				float4 Coords234_g170347 = temp_output_37_0_g170347;
				float3 WorldPosition234_g170347 = temp_output_279_0_g170347;
				float4 localSampleStochastic2D234_g170347 = SampleStochastic2D( Texture234_g170347 , Sampler234_g170347 , Coords234_g170347 , WorldPosition234_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170347) = _MainShaderTex;
				SamplerState Sampler263_g170347 = SS30_g170350;
				half4 Coords263_g170347 = temp_output_37_0_g170347;
				half3 WorldPosition263_g170347 = temp_output_279_0_g170347;
				half3 WorldNormal263_g170347 = temp_output_280_0_g170347;
				half4 localSampleStochastic3D263_g170347 = SampleStochastic3D( Texture263_g170347 , Sampler263_g170347 , Coords263_g170347 , WorldPosition263_g170347 , WorldNormal263_g170347 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170334 = localSampleMain276_g170347;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170334 = localSampleExtra275_g170347;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170334 = localSamplePlanar2D238_g170347;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170334 = localSamplePlanar3D246_g170347;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170334 = localSampleStochastic2D234_g170347;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170334 = localSampleStochastic3D263_g170347;
				#else
				float4 staticSwitch198_g170334 = localSampleMain276_g170347;
				#endif
				half4 Local_MasksTex199_g170334 = staticSwitch198_g170334;
				float lerpResult23_g170334 = lerp( 1.0 , (Local_MasksTex199_g170334).y , _MainOcclusionValue);
				float4 appendResult73_g170334 = (float4(( (Local_MasksTex199_g170334).x * _MainMetallicValue ) , lerpResult23_g170334 , (Local_MasksTex199_g170334).z , ( (Local_MasksTex199_g170334).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170334 = appendResult73_g170334;
				float clampResult17_g170340 = clamp( (Local_Masks109_g170334).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170341 = _MainMultiRemap.x;
				float temp_output_10_0_g170341 = ( _MainMultiRemap.y - temp_output_7_0_g170341 );
				half Local_MultiMask78_g170334 = saturate( ( ( clampResult17_g170340 - temp_output_7_0_g170341 ) / ( temp_output_10_0_g170341 + 0.0001 ) ) );
				float lerpResult58_g170334 = lerp( 1.0 , Local_MultiMask78_g170334 , _MainColorMode);
				float4 lerpResult62_g170334 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170334);
				half3 Local_ColorRGB93_g170334 = (lerpResult62_g170334).rgb;
				half3 Local_Albedo139_g170334 = ( Local_AlbedoRGB107_g170334 * Local_ColorRGB93_g170334 );
				float3 In_Albedo3_g170344 = Local_Albedo139_g170334;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170346) = _MainNormalTex;
				float localFilterTexture29_g170349 = ( 0.0 );
				SamplerState SamplerDefault29_g170349 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170349 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170349 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170349 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170349 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170349 = SamplerDefault29_g170349;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170349 = SamplerDefault29_g170349;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170349 = SamplerPoint29_g170349;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170349 = SamplerLow29_g170349;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170349 = SamplerMedium29_g170349;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170349 = SamplerHigh29_g170349;
				#endif
				SamplerState Sampler276_g170346 = SS29_g170349;
				float4 temp_output_37_0_g170346 = Local_Coords180_g170334;
				half4 Coords276_g170346 = temp_output_37_0_g170346;
				half2 TexCoord276_g170346 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170346 = SampleMain( Texture276_g170346 , Sampler276_g170346 , Coords276_g170346 , TexCoord276_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170346) = _MainNormalTex;
				SamplerState Sampler275_g170346 = SS29_g170349;
				half4 Coords275_g170346 = temp_output_37_0_g170346;
				half2 TexCoord275_g170346 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170346 = SampleExtra( Texture275_g170346 , Sampler275_g170346 , Coords275_g170346 , TexCoord275_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170346) = _MainNormalTex;
				SamplerState Sampler238_g170346 = SS29_g170349;
				half4 Coords238_g170346 = temp_output_37_0_g170346;
				float3 temp_output_279_0_g170346 = Model_PositionWO222_g170334;
				half3 WorldPosition238_g170346 = temp_output_279_0_g170346;
				half4 localSamplePlanar2D238_g170346 = SamplePlanar2D( Texture238_g170346 , Sampler238_g170346 , Coords238_g170346 , WorldPosition238_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170346) = _MainNormalTex;
				SamplerState Sampler246_g170346 = SS29_g170349;
				half4 Coords246_g170346 = temp_output_37_0_g170346;
				half3 WorldPosition246_g170346 = temp_output_279_0_g170346;
				float3 temp_output_280_0_g170346 = Model_NormalWS226_g170334;
				half3 WorldNormal246_g170346 = temp_output_280_0_g170346;
				half4 localSamplePlanar3D246_g170346 = SamplePlanar3D( Texture246_g170346 , Sampler246_g170346 , Coords246_g170346 , WorldPosition246_g170346 , WorldNormal246_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170346) = _MainNormalTex;
				SamplerState Sampler234_g170346 = SS29_g170349;
				float4 Coords234_g170346 = temp_output_37_0_g170346;
				float3 WorldPosition234_g170346 = temp_output_279_0_g170346;
				float4 localSampleStochastic2D234_g170346 = SampleStochastic2D( Texture234_g170346 , Sampler234_g170346 , Coords234_g170346 , WorldPosition234_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170346) = _MainNormalTex;
				SamplerState Sampler263_g170346 = SS29_g170349;
				half4 Coords263_g170346 = temp_output_37_0_g170346;
				half3 WorldPosition263_g170346 = temp_output_279_0_g170346;
				half3 WorldNormal263_g170346 = temp_output_280_0_g170346;
				half4 localSampleStochastic3D263_g170346 = SampleStochastic3D( Texture263_g170346 , Sampler263_g170346 , Coords263_g170346 , WorldPosition263_g170346 , WorldNormal263_g170346 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170334 = localSampleMain276_g170346;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170334 = localSampleExtra275_g170346;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170334 = localSamplePlanar2D238_g170346;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170334 = localSamplePlanar3D246_g170346;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170334 = localSampleStochastic2D234_g170346;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170334 = localSampleStochastic3D263_g170346;
				#else
				float4 staticSwitch193_g170334 = localSampleMain276_g170346;
				#endif
				half4 Local_NormaTex191_g170334 = staticSwitch193_g170334;
				half4 Normal_Packed45_g170336 = Local_NormaTex191_g170334;
				float2 appendResult58_g170336 = (float2(( (Normal_Packed45_g170336).x * (Normal_Packed45_g170336).w ) , (Normal_Packed45_g170336).y));
				half2 Normal_Default50_g170336 = appendResult58_g170336;
				half2 Normal_ASTC41_g170336 = (Normal_Packed45_g170336).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170336 = Normal_ASTC41_g170336;
				#else
				float2 staticSwitch38_g170336 = Normal_Default50_g170336;
				#endif
				half2 Normal_NO_DTX544_g170336 = (Normal_Packed45_g170336).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170336 = Normal_NO_DTX544_g170336;
				#else
				float2 staticSwitch37_g170336 = staticSwitch38_g170336;
				#endif
				float2 temp_output_26_0_g170334 = ( (staticSwitch37_g170336*2.0 + -1.0) * _MainNormalValue );
				float3x3 ase_worldToTangent = float3x3(WorldTangent,WorldBiTangent,WorldNormal);
				half2 Normal_Planar45_g170337 = temp_output_26_0_g170334;
				float2 break71_g170337 = Normal_Planar45_g170337;
				float3 appendResult72_g170337 = (float3(break71_g170337.x , 0.0 , break71_g170337.y));
				float2 temp_output_205_0_g170334 = (mul( ase_worldToTangent, appendResult72_g170337 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170334 = temp_output_26_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170334 = temp_output_26_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170334 = temp_output_205_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170334 = temp_output_205_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170334 = temp_output_205_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170334 = temp_output_205_0_g170334;
				#else
				float2 staticSwitch204_g170334 = temp_output_26_0_g170334;
				#endif
				half2 Local_NormalTS108_g170334 = staticSwitch204_g170334;
				float2 In_NormalTS3_g170344 = Local_NormalTS108_g170334;
				float3 appendResult68_g170338 = (float3(Local_NormalTS108_g170334 , 1.0));
				float3 tanToWorld0 = float3( WorldTangent.x, WorldBiTangent.x, WorldNormal.x );
				float3 tanToWorld1 = float3( WorldTangent.y, WorldBiTangent.y, WorldNormal.y );
				float3 tanToWorld2 = float3( WorldTangent.z, WorldBiTangent.z, WorldNormal.z );
				float3 tanNormal74_g170338 = appendResult68_g170338;
				float3 worldNormal74_g170338 = normalize( float3(dot(tanToWorld0,tanNormal74_g170338), dot(tanToWorld1,tanNormal74_g170338), dot(tanToWorld2,tanNormal74_g170338)) );
				half3 Local_NormalWS250_g170334 = worldNormal74_g170338;
				float3 In_NormalWS3_g170344 = Local_NormalWS250_g170334;
				float4 In_Shader3_g170344 = Local_Masks109_g170334;
				float4 In_Emissive3_g170344 = half4(1,1,1,1);
				float3 temp_output_3_0_g170339 = Local_Albedo139_g170334;
				float dotResult20_g170339 = dot( temp_output_3_0_g170339 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170334 = dotResult20_g170339;
				float In_Grayscale3_g170344 = Local_Grayscale110_g170334;
				float clampResult144_g170334 = clamp( saturate( ( Local_Grayscale110_g170334 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170334 = clampResult144_g170334;
				float In_Luminosity3_g170344 = Local_Luminosity145_g170334;
				float In_MultiMask3_g170344 = Local_MultiMask78_g170334;
				float temp_output_187_0_g170334 = (Local_AlbedoTex185_g170334).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170334 = ( temp_output_187_0_g170334 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170334 = temp_output_187_0_g170334;
				#endif
				half Local_AlphaClip111_g170334 = staticSwitch236_g170334;
				float In_AlphaClip3_g170344 = Local_AlphaClip111_g170334;
				half Local_AlphaFade246_g170334 = (lerpResult62_g170334).a;
				float In_AlphaFade3_g170344 = Local_AlphaFade246_g170334;
				float3 temp_cast_5 = (1.0).xxx;
				float3 In_Translucency3_g170344 = temp_cast_5;
				float In_Transmission3_g170344 = 1.0;
				float In_Thickness3_g170344 = 0.0;
				float In_Diffusion3_g170344 = 0.0;
				Data3_g170344.Dummy = In_Dummy3_g170344;
				Data3_g170344.Albedo = In_Albedo3_g170344;
				Data3_g170344.NormalTS = In_NormalTS3_g170344;
				Data3_g170344.NormalWS = In_NormalWS3_g170344;
				Data3_g170344.Shader = In_Shader3_g170344;
				Data3_g170344.Emissive= In_Emissive3_g170344;
				Data3_g170344.MultiMask = In_MultiMask3_g170344;
				Data3_g170344.Grayscale = In_Grayscale3_g170344;
				Data3_g170344.Luminosity = In_Luminosity3_g170344;
				Data3_g170344.AlphaClip = In_AlphaClip3_g170344;
				Data3_g170344.AlphaFade = In_AlphaFade3_g170344;
				Data3_g170344.Translucency = In_Translucency3_g170344;
				Data3_g170344.Transmission = In_Transmission3_g170344;
				Data3_g170344.Thickness = In_Thickness3_g170344;
				Data3_g170344.Diffusion = In_Diffusion3_g170344;
				TVEVisualData Data4_g170366 = Data3_g170344;
				float Out_Dummy4_g170366 = 0;
				float3 Out_Albedo4_g170366 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170366 = float2( 0,0 );
				float3 Out_NormalWS4_g170366 = float3( 0,0,0 );
				float4 Out_Shader4_g170366 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170366 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170366 = 0;
				float Out_Grayscale4_g170366 = 0;
				float Out_Luminosity4_g170366 = 0;
				float Out_AlphaClip4_g170366 = 0;
				float Out_AlphaFade4_g170366 = 0;
				float3 Out_Translucency4_g170366 = float3( 0,0,0 );
				float Out_Transmission4_g170366 = 0;
				float Out_Thickness4_g170366 = 0;
				float Out_Diffusion4_g170366 = 0;
				Out_Dummy4_g170366 = Data4_g170366.Dummy;
				Out_Albedo4_g170366 = Data4_g170366.Albedo;
				Out_NormalTS4_g170366 = Data4_g170366.NormalTS;
				Out_NormalWS4_g170366 = Data4_g170366.NormalWS;
				Out_Shader4_g170366 = Data4_g170366.Shader;
				Out_Emissive4_g170366= Data4_g170366.Emissive;
				Out_MultiMask4_g170366 = Data4_g170366.MultiMask;
				Out_Grayscale4_g170366 = Data4_g170366.Grayscale;
				Out_Luminosity4_g170366= Data4_g170366.Luminosity;
				Out_AlphaClip4_g170366 = Data4_g170366.AlphaClip;
				Out_AlphaFade4_g170366 = Data4_g170366.AlphaFade;
				Out_Translucency4_g170366 = Data4_g170366.Translucency;
				Out_Transmission4_g170366 = Data4_g170366.Transmission;
				Out_Thickness4_g170366 = Data4_g170366.Thickness;
				Out_Diffusion4_g170366 = Data4_g170366.Diffusion;
				half3 Visual_Albedo527_g170352 = Out_Albedo4_g170366;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170353) = _SecondAlbedoTex;
				float localFilterTexture19_g170383 = ( 0.0 );
				SamplerState SamplerDefault19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170383 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170383 = SamplerDefault19_g170383;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170383 = SamplerDefault19_g170383;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170383 = SamplerPoint19_g170383;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170383 = SamplerLow19_g170383;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170383 = SamplerMedium19_g170383;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170383 = SamplerHigh19_g170383;
				#endif
				SamplerState Sampler276_g170353 = SS19_g170383;
				half4 Local_LayerCoords790_g170352 = _second_coord_value;
				float4 temp_output_37_0_g170353 = Local_LayerCoords790_g170352;
				half4 Coords276_g170353 = temp_output_37_0_g170353;
				half2 TexCoord276_g170353 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170353 = SampleMain( Texture276_g170353 , Sampler276_g170353 , Coords276_g170353 , TexCoord276_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170353) = _SecondAlbedoTex;
				SamplerState Sampler275_g170353 = SS19_g170383;
				half4 Coords275_g170353 = temp_output_37_0_g170353;
				half2 TexCoord275_g170353 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170353 = SampleExtra( Texture275_g170353 , Sampler275_g170353 , Coords275_g170353 , TexCoord275_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170353) = _SecondAlbedoTex;
				SamplerState Sampler238_g170353 = SS19_g170383;
				half4 Coords238_g170353 = temp_output_37_0_g170353;
				TVEModelData Data15_g170364 = Data16_g170157;
				float Out_Dummy15_g170364 = 0;
				float3 Out_PositionOS15_g170364 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170364 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170364 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170364 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170364 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170364 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170364 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170364 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170364 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170364 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170364 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170364 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170364 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170364 = float3( 0,0,0 );
				float4 Out_VertexData15_g170364 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170364 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170364 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170364 = float4( 0,0,0,0 );
				Out_Dummy15_g170364 = Data15_g170364.Dummy;
				Out_PositionOS15_g170364 = Data15_g170364.PositionOS;
				Out_PositionWS15_g170364 = Data15_g170364.PositionWS;
				Out_PositionWO15_g170364 = Data15_g170364.PositionWO;
				Out_PositionRawOS15_g170364 = Data15_g170364.PositionRawOS;
				Out_PositionAddOS15_g170364 = Data15_g170364.PositionAddOS;
				Out_PivotOS15_g170364 = Data15_g170364.PivotOS;
				Out_PivotWS15_g170364 = Data15_g170364.PivotWS;
				Out_PivotWO15_g170364 = Data15_g170364.PivotWO;
				Out_NormalOS15_g170364 = Data15_g170364.NormalOS;
				Out_NormalWS15_g170364 = Data15_g170364.NormalWS;
				Out_NormalRawOS15_g170364 = Data15_g170364.NormalRawOS;
				Out_NormalRawWS15_g170364 = Data15_g170364.NormalRawWS;
				Out_TangentOS15_g170364 = Data15_g170364.TangentOS;
				Out_ViewDirWS15_g170364 = Data15_g170364.ViewDirWS;
				Out_VertexData15_g170364 = Data15_g170364.VertexData;
				Out_MotionData15_g170364 = Data15_g170364.MotionData;
				Out_BoundsData15_g170364 = Data15_g170364.BoundsData;
				Out_RotationData15_g170364 = Data15_g170364.RotationData;
				half3 Model_PositionWO636_g170352 = Out_PositionWO15_g170364;
				float3 temp_output_279_0_g170353 = Model_PositionWO636_g170352;
				half3 WorldPosition238_g170353 = temp_output_279_0_g170353;
				half4 localSamplePlanar2D238_g170353 = SamplePlanar2D( Texture238_g170353 , Sampler238_g170353 , Coords238_g170353 , WorldPosition238_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170353) = _SecondAlbedoTex;
				SamplerState Sampler246_g170353 = SS19_g170383;
				half4 Coords246_g170353 = temp_output_37_0_g170353;
				half3 WorldPosition246_g170353 = temp_output_279_0_g170353;
				half3 Model_NormalWS869_g170352 = Out_NormalWS15_g170364;
				float3 temp_output_280_0_g170353 = Model_NormalWS869_g170352;
				half3 WorldNormal246_g170353 = temp_output_280_0_g170353;
				half4 localSamplePlanar3D246_g170353 = SamplePlanar3D( Texture246_g170353 , Sampler246_g170353 , Coords246_g170353 , WorldPosition246_g170353 , WorldNormal246_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170353) = _SecondAlbedoTex;
				SamplerState Sampler234_g170353 = SS19_g170383;
				float4 Coords234_g170353 = temp_output_37_0_g170353;
				float3 WorldPosition234_g170353 = temp_output_279_0_g170353;
				float4 localSampleStochastic2D234_g170353 = SampleStochastic2D( Texture234_g170353 , Sampler234_g170353 , Coords234_g170353 , WorldPosition234_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170353) = _SecondAlbedoTex;
				SamplerState Sampler263_g170353 = SS19_g170383;
				half4 Coords263_g170353 = temp_output_37_0_g170353;
				half3 WorldPosition263_g170353 = temp_output_279_0_g170353;
				half3 WorldNormal263_g170353 = temp_output_280_0_g170353;
				half4 localSampleStochastic3D263_g170353 = SampleStochastic3D( Texture263_g170353 , Sampler263_g170353 , Coords263_g170353 , WorldPosition263_g170353 , WorldNormal263_g170353 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170352 = localSampleMain276_g170353;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170352 = localSampleExtra275_g170353;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170352 = localSamplePlanar2D238_g170353;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170352 = localSamplePlanar3D246_g170353;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170352 = localSampleStochastic2D234_g170353;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170352 = localSampleStochastic3D263_g170353;
				#else
				float4 staticSwitch693_g170352 = localSampleMain276_g170353;
				#endif
				half4 Local_AlbedoTex777_g170352 = staticSwitch693_g170352;
				float3 lerpResult716_g170352 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170352).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170352 = lerpResult716_g170352;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170355) = _SecondShaderTex;
				float localFilterTexture30_g170385 = ( 0.0 );
				SamplerState SamplerDefault30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170385 = SamplerDefault30_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170385 = SamplerDefault30_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170385 = SamplerPoint30_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170385 = SamplerLow30_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170385 = SamplerMedium30_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170385 = SamplerHigh30_g170385;
				#endif
				SamplerState Sampler276_g170355 = SS30_g170385;
				float4 temp_output_37_0_g170355 = Local_LayerCoords790_g170352;
				half4 Coords276_g170355 = temp_output_37_0_g170355;
				half2 TexCoord276_g170355 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170355 = SampleMain( Texture276_g170355 , Sampler276_g170355 , Coords276_g170355 , TexCoord276_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170355) = _SecondShaderTex;
				SamplerState Sampler275_g170355 = SS30_g170385;
				half4 Coords275_g170355 = temp_output_37_0_g170355;
				half2 TexCoord275_g170355 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170355 = SampleExtra( Texture275_g170355 , Sampler275_g170355 , Coords275_g170355 , TexCoord275_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170355) = _SecondShaderTex;
				SamplerState Sampler238_g170355 = SS30_g170385;
				half4 Coords238_g170355 = temp_output_37_0_g170355;
				float3 temp_output_279_0_g170355 = Model_PositionWO636_g170352;
				half3 WorldPosition238_g170355 = temp_output_279_0_g170355;
				half4 localSamplePlanar2D238_g170355 = SamplePlanar2D( Texture238_g170355 , Sampler238_g170355 , Coords238_g170355 , WorldPosition238_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170355) = _SecondShaderTex;
				SamplerState Sampler246_g170355 = SS30_g170385;
				half4 Coords246_g170355 = temp_output_37_0_g170355;
				half3 WorldPosition246_g170355 = temp_output_279_0_g170355;
				float3 temp_output_280_0_g170355 = Model_NormalWS869_g170352;
				half3 WorldNormal246_g170355 = temp_output_280_0_g170355;
				half4 localSamplePlanar3D246_g170355 = SamplePlanar3D( Texture246_g170355 , Sampler246_g170355 , Coords246_g170355 , WorldPosition246_g170355 , WorldNormal246_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170355) = _SecondShaderTex;
				SamplerState Sampler234_g170355 = SS30_g170385;
				float4 Coords234_g170355 = temp_output_37_0_g170355;
				float3 WorldPosition234_g170355 = temp_output_279_0_g170355;
				float4 localSampleStochastic2D234_g170355 = SampleStochastic2D( Texture234_g170355 , Sampler234_g170355 , Coords234_g170355 , WorldPosition234_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170355) = _SecondShaderTex;
				SamplerState Sampler263_g170355 = SS30_g170385;
				half4 Coords263_g170355 = temp_output_37_0_g170355;
				half3 WorldPosition263_g170355 = temp_output_279_0_g170355;
				half3 WorldNormal263_g170355 = temp_output_280_0_g170355;
				half4 localSampleStochastic3D263_g170355 = SampleStochastic3D( Texture263_g170355 , Sampler263_g170355 , Coords263_g170355 , WorldPosition263_g170355 , WorldNormal263_g170355 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170352 = localSampleMain276_g170355;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170352 = localSampleExtra275_g170355;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170352 = localSamplePlanar2D238_g170355;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170352 = localSamplePlanar3D246_g170355;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170352 = localSampleStochastic2D234_g170355;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170352 = localSampleStochastic3D263_g170355;
				#else
				float4 staticSwitch722_g170352 = localSampleMain276_g170355;
				#endif
				half4 Local_ShaderTex775_g170352 = staticSwitch722_g170352;
				float lerpResult739_g170352 = lerp( 1.0 , (Local_ShaderTex775_g170352).y , _SecondOcclusionValue);
				float4 appendResult749_g170352 = (float4(( (Local_ShaderTex775_g170352).x * _SecondMetallicValue ) , lerpResult739_g170352 , (Local_ShaderTex775_g170352).z , ( (Local_ShaderTex775_g170352).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170352 = appendResult749_g170352;
				float clampResult17_g170359 = clamp( (Local_Masks750_g170352).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170360 = _SecondMultiRemap.x;
				float temp_output_10_0_g170360 = ( _SecondMultiRemap.y - temp_output_7_0_g170360 );
				float temp_output_765_0_g170352 = saturate( ( ( clampResult17_g170359 - temp_output_7_0_g170360 ) / ( temp_output_10_0_g170360 + 0.0001 ) ) );
				half Local_MultiMask767_g170352 = temp_output_765_0_g170352;
				float lerpResult705_g170352 = lerp( 1.0 , Local_MultiMask767_g170352 , _SecondColorMode);
				float4 lerpResult706_g170352 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170352);
				half3 Local_ColorRGB774_g170352 = (lerpResult706_g170352).rgb;
				half3 Local_Albedo768_g170352 = ( Local_AlbedoRGB771_g170352 * Local_ColorRGB774_g170352 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170379 = 2.0;
				#else
				float staticSwitch1_g170379 = 4.594794;
				#endif
				float3 lerpResult985_g170352 = lerp( Local_Albedo768_g170352 , ( Visual_Albedo527_g170352 * Local_Albedo768_g170352 * staticSwitch1_g170379 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170356) = _SecondMaskTex;
				SamplerState Sampler276_g170356 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170352 = _second_mask_coord_value;
				float4 temp_output_37_0_g170356 = Local_BlendCoords813_g170352;
				half4 Coords276_g170356 = temp_output_37_0_g170356;
				half2 TexCoord276_g170356 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170356 = SampleMain( Texture276_g170356 , Sampler276_g170356 , Coords276_g170356 , TexCoord276_g170356 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170356) = _SecondMaskTex;
				SamplerState Sampler275_g170356 = sampler_Linear_Repeat;
				half4 Coords275_g170356 = temp_output_37_0_g170356;
				half2 TexCoord275_g170356 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170356 = SampleExtra( Texture275_g170356 , Sampler275_g170356 , Coords275_g170356 , TexCoord275_g170356 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170356) = _SecondMaskTex;
				SamplerState Sampler238_g170356 = sampler_Linear_Repeat;
				half4 Coords238_g170356 = temp_output_37_0_g170356;
				float3 temp_output_279_0_g170356 = Model_PositionWO636_g170352;
				half3 WorldPosition238_g170356 = temp_output_279_0_g170356;
				half4 localSamplePlanar2D238_g170356 = SamplePlanar2D( Texture238_g170356 , Sampler238_g170356 , Coords238_g170356 , WorldPosition238_g170356 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170356) = _SecondMaskTex;
				SamplerState Sampler246_g170356 = sampler_Linear_Repeat;
				half4 Coords246_g170356 = temp_output_37_0_g170356;
				half3 WorldPosition246_g170356 = temp_output_279_0_g170356;
				float3 temp_output_280_0_g170356 = Model_NormalWS869_g170352;
				half3 WorldNormal246_g170356 = temp_output_280_0_g170356;
				half4 localSamplePlanar3D246_g170356 = SamplePlanar3D( Texture246_g170356 , Sampler246_g170356 , Coords246_g170356 , WorldPosition246_g170356 , WorldNormal246_g170356 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170352 = localSampleMain276_g170356;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170352 = localSampleExtra275_g170356;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170352 = localSamplePlanar2D238_g170356;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170352 = localSamplePlanar3D246_g170356;
				#else
				float4 staticSwitch817_g170352 = localSampleMain276_g170356;
				#endif
				half4 Local_MaskTex861_g170352 = staticSwitch817_g170352;
				float clampResult17_g170370 = clamp( (Local_MaskTex861_g170352).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170369 = _SecondMaskRemap.x;
				float temp_output_10_0_g170369 = ( _SecondMaskRemap.y - temp_output_7_0_g170369 );
				float lerpResult1015_g170352 = lerp( 1.0 , saturate( ( ( clampResult17_g170370 - temp_output_7_0_g170369 ) / ( temp_output_10_0_g170369 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170352 = lerpResult1015_g170352;
				half3 Visual_NormalWS951_g170352 = Out_NormalWS4_g170366;
				float clampResult17_g170371 = clamp( saturate( (Visual_NormalWS951_g170352).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170372 = _SecondProjRemap.x;
				float temp_output_10_0_g170372 = ( _SecondProjRemap.y - temp_output_7_0_g170372 );
				float lerpResult996_g170352 = lerp( 1.0 , saturate( ( ( clampResult17_g170371 - temp_output_7_0_g170372 ) / ( temp_output_10_0_g170372 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170352 = lerpResult996_g170352;
				half4 Model_VertexMasks964_g170352 = Out_VertexData15_g170364;
				float4 break965_g170352 = Model_VertexMasks964_g170352;
				float4 break33_g170373 = _second_vert_mode;
				float temp_output_30_0_g170373 = ( break965_g170352.x * break33_g170373.x );
				float temp_output_29_0_g170373 = ( break965_g170352.y * break33_g170373.y );
				float temp_output_31_0_g170373 = ( break965_g170352.z * break33_g170373.z );
				float temp_output_28_0_g170373 = ( temp_output_30_0_g170373 + temp_output_29_0_g170373 + temp_output_31_0_g170373 + ( break965_g170352.w * break33_g170373.w ) );
				float clampResult17_g170367 = clamp( temp_output_28_0_g170373 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170368 = _SecondMeshRemap.x;
				float temp_output_10_0_g170368 = ( _SecondMeshRemap.y - temp_output_7_0_g170368 );
				float lerpResult1017_g170352 = lerp( 1.0 , saturate( ( ( clampResult17_g170367 - temp_output_7_0_g170368 ) / ( temp_output_10_0_g170368 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170381 = lerpResult1017_g170352;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170381 = ( temp_output_6_0_g170381 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170381 = temp_output_6_0_g170381;
				#endif
				float temp_output_987_0_g170352 = staticSwitch14_g170381;
				half Blend_VertMask918_g170352 = temp_output_987_0_g170352;
				float localBuildGlobalData204_g170159 = ( 0.0 );
				TVEGlobalData Data204_g170159 = (TVEGlobalData)0;
				half Dummy211_g170159 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g170159 = Dummy211_g170159;
				float4 temp_output_362_164_g170159 = TVE_CoatParams;
				half4 Coat_Params302_g170159 = temp_output_362_164_g170159;
				float4 In_CoatParams204_g170159 = Coat_Params302_g170159;
				float4 temp_output_361_164_g170159 = TVE_PaintParams;
				half4 Paint_Params71_g170159 = temp_output_361_164_g170159;
				float4 In_PaintParams204_g170159 = Paint_Params71_g170159;
				float4 temp_output_365_163_g170159 = TVE_GlowParams;
				half4 Glow_Params248_g170159 = temp_output_365_163_g170159;
				float4 In_GlowParams204_g170159 = Glow_Params248_g170159;
				float4 temp_output_363_141_g170159 = TVE_AtmoParams;
				half4 Atmo_Params80_g170159 = temp_output_363_141_g170159;
				float4 In_AtmoParams204_g170159 = Atmo_Params80_g170159;
				float4 temp_output_364_139_g170159 = TVE_FormParams;
				half4 Form_Params112_g170159 = temp_output_364_139_g170159;
				float4 In_FormParams204_g170159 = Form_Params112_g170159;
				float4 temp_output_366_145_g170159 = TVE_WindParams;
				half4 Wind_Params88_g170159 = temp_output_366_145_g170159;
				float4 In_WindParams204_g170159 = Wind_Params88_g170159;
				float4 temp_output_367_145_g170159 = TVE_PushParams;
				half4 Push_Params335_g170159 = temp_output_367_145_g170159;
				float4 In_PushParams204_g170159 = Push_Params335_g170159;
				Data204_g170159.Dummy = In_Dummy204_g170159;
				Data204_g170159.CoatParams = In_CoatParams204_g170159;
				Data204_g170159.PaintParams = In_PaintParams204_g170159;
				Data204_g170159.GlowParams = In_GlowParams204_g170159;
				Data204_g170159.AtmoParams = In_AtmoParams204_g170159;
				Data204_g170159.FormParams= In_FormParams204_g170159;
				Data204_g170159.WindParams = In_WindParams204_g170159;
				Data204_g170159.PushParams = In_PushParams204_g170159;
				TVEGlobalData Data15_g170365 = Data204_g170159;
				float Out_Dummy15_g170365 = 0;
				float4 Out_CoatParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170365 = float4( 0,0,0,0 );
				Out_Dummy15_g170365 = Data15_g170365.Dummy;
				Out_CoatParams15_g170365 = Data15_g170365.CoatParams;
				Out_PaintParams15_g170365 = Data15_g170365.PaintParams;
				Out_GlowParams15_g170365 = Data15_g170365.GlowParams;
				Out_AtmoParams15_g170365= Data15_g170365.AtmoParams;
				Out_FadeParams15_g170365= Data15_g170365.FadeParams;
				Out_FormParams15_g170365 = Data15_g170365.FormParams;
				Out_LandParams15_g170365 = Data15_g170365.LandParams;
				Out_WindParams15_g170365 = Data15_g170365.WindParams;
				Out_PushParams15_g170365 = Data15_g170365.PushParams;
				half4 Global_CoatParams975_g170352 = Out_CoatParams15_g170365;
				float lerpResult1013_g170352 = lerp( 1.0 , (Global_CoatParams975_g170352).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170352 = lerpResult1013_g170352;
				#else
				float staticSwitch971_g170352 = 1.0;
				#endif
				half Blend_GlobalMask972_g170352 = staticSwitch971_g170352;
				float temp_output_432_0_g170352 = ( _SecondIntensityValue * Blend_TexMask429_g170352 * Blend_ProjMask434_g170352 * Blend_VertMask918_g170352 * Blend_GlobalMask972_g170352 );
				float clampResult17_g170375 = clamp( temp_output_432_0_g170352 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170374 = _SecondBlendRemap.x;
				float temp_output_10_0_g170374 = ( _SecondBlendRemap.y - temp_output_7_0_g170374 );
				half Blend_Mask412_g170352 = ( saturate( ( ( clampResult17_g170375 - temp_output_7_0_g170374 ) / ( temp_output_10_0_g170374 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170352 = lerp( Visual_Albedo527_g170352 , lerpResult985_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170352 = lerpResult403_g170352;
				#else
				float3 staticSwitch415_g170352 = Visual_Albedo527_g170352;
				#endif
				half3 Final_Albedo601_g170352 = staticSwitch415_g170352;
				float3 In_Albedo3_g170363 = Final_Albedo601_g170352;
				half2 Visual_NormalTS529_g170352 = Out_NormalTS4_g170366;
				float2 lerpResult40_g170377 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170352 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170354) = _SecondNormalTex;
				float localFilterTexture29_g170384 = ( 0.0 );
				SamplerState SamplerDefault29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170384 = SamplerDefault29_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170384 = SamplerDefault29_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170384 = SamplerPoint29_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170384 = SamplerLow29_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170384 = SamplerMedium29_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170384 = SamplerHigh29_g170384;
				#endif
				SamplerState Sampler276_g170354 = SS29_g170384;
				float4 temp_output_37_0_g170354 = Local_LayerCoords790_g170352;
				half4 Coords276_g170354 = temp_output_37_0_g170354;
				half2 TexCoord276_g170354 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170354 = SampleMain( Texture276_g170354 , Sampler276_g170354 , Coords276_g170354 , TexCoord276_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170354) = _SecondNormalTex;
				SamplerState Sampler275_g170354 = SS29_g170384;
				half4 Coords275_g170354 = temp_output_37_0_g170354;
				half2 TexCoord275_g170354 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170354 = SampleExtra( Texture275_g170354 , Sampler275_g170354 , Coords275_g170354 , TexCoord275_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170354) = _SecondNormalTex;
				SamplerState Sampler238_g170354 = SS29_g170384;
				half4 Coords238_g170354 = temp_output_37_0_g170354;
				float3 temp_output_279_0_g170354 = Model_PositionWO636_g170352;
				half3 WorldPosition238_g170354 = temp_output_279_0_g170354;
				half4 localSamplePlanar2D238_g170354 = SamplePlanar2D( Texture238_g170354 , Sampler238_g170354 , Coords238_g170354 , WorldPosition238_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170354) = _SecondNormalTex;
				SamplerState Sampler246_g170354 = SS29_g170384;
				half4 Coords246_g170354 = temp_output_37_0_g170354;
				half3 WorldPosition246_g170354 = temp_output_279_0_g170354;
				float3 temp_output_280_0_g170354 = Model_NormalWS869_g170352;
				half3 WorldNormal246_g170354 = temp_output_280_0_g170354;
				half4 localSamplePlanar3D246_g170354 = SamplePlanar3D( Texture246_g170354 , Sampler246_g170354 , Coords246_g170354 , WorldPosition246_g170354 , WorldNormal246_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170354) = _SecondNormalTex;
				SamplerState Sampler234_g170354 = SS29_g170384;
				float4 Coords234_g170354 = temp_output_37_0_g170354;
				float3 WorldPosition234_g170354 = temp_output_279_0_g170354;
				float4 localSampleStochastic2D234_g170354 = SampleStochastic2D( Texture234_g170354 , Sampler234_g170354 , Coords234_g170354 , WorldPosition234_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170354) = _SecondNormalTex;
				SamplerState Sampler263_g170354 = SS29_g170384;
				half4 Coords263_g170354 = temp_output_37_0_g170354;
				half3 WorldPosition263_g170354 = temp_output_279_0_g170354;
				half3 WorldNormal263_g170354 = temp_output_280_0_g170354;
				half4 localSampleStochastic3D263_g170354 = SampleStochastic3D( Texture263_g170354 , Sampler263_g170354 , Coords263_g170354 , WorldPosition263_g170354 , WorldNormal263_g170354 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170352 = localSampleMain276_g170354;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170352 = localSampleExtra275_g170354;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170352 = localSamplePlanar2D238_g170354;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170352 = localSamplePlanar3D246_g170354;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170352 = localSampleStochastic2D234_g170354;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170352 = localSampleStochastic3D263_g170354;
				#else
				float4 staticSwitch698_g170352 = localSampleMain276_g170354;
				#endif
				half4 Local_NormalTex776_g170352 = staticSwitch698_g170352;
				half4 Normal_Packed45_g170357 = Local_NormalTex776_g170352;
				float2 appendResult58_g170357 = (float2(( (Normal_Packed45_g170357).x * (Normal_Packed45_g170357).w ) , (Normal_Packed45_g170357).y));
				half2 Normal_Default50_g170357 = appendResult58_g170357;
				half2 Normal_ASTC41_g170357 = (Normal_Packed45_g170357).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170357 = Normal_ASTC41_g170357;
				#else
				float2 staticSwitch38_g170357 = Normal_Default50_g170357;
				#endif
				half2 Normal_NO_DTX544_g170357 = (Normal_Packed45_g170357).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170357 = Normal_NO_DTX544_g170357;
				#else
				float2 staticSwitch37_g170357 = staticSwitch38_g170357;
				#endif
				float2 temp_output_724_0_g170352 = ( (staticSwitch37_g170357*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170358 = temp_output_724_0_g170352;
				float2 break71_g170358 = Normal_Planar45_g170358;
				float3 appendResult72_g170358 = (float3(break71_g170358.x , 0.0 , break71_g170358.y));
				float2 temp_output_858_0_g170352 = (mul( ase_worldToTangent, appendResult72_g170358 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170352 = temp_output_724_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170352 = temp_output_724_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170352 = temp_output_858_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170352 = temp_output_858_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170352 = temp_output_858_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170352 = temp_output_858_0_g170352;
				#else
				float2 staticSwitch727_g170352 = temp_output_724_0_g170352;
				#endif
				half2 Local_NormalTS729_g170352 = staticSwitch727_g170352;
				float2 temp_output_36_0_g170377 = ( lerpResult40_g170377 + Local_NormalTS729_g170352 );
				float2 lerpResult405_g170352 = lerp( Visual_NormalTS529_g170352 , temp_output_36_0_g170377 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170352 = lerpResult405_g170352;
				#else
				float2 staticSwitch418_g170352 = Visual_NormalTS529_g170352;
				#endif
				half2 Final_NormalTS612_g170352 = staticSwitch418_g170352;
				float2 In_NormalTS3_g170363 = Final_NormalTS612_g170352;
				float3 appendResult68_g170378 = (float3(Final_NormalTS612_g170352 , 1.0));
				float3 tanNormal74_g170378 = appendResult68_g170378;
				float3 worldNormal74_g170378 = normalize( float3(dot(tanToWorld0,tanNormal74_g170378), dot(tanToWorld1,tanNormal74_g170378), dot(tanToWorld2,tanNormal74_g170378)) );
				half3 Final_NormalWS950_g170352 = worldNormal74_g170378;
				float3 In_NormalWS3_g170363 = Final_NormalWS950_g170352;
				half4 Visual_Shader531_g170352 = Out_Shader4_g170366;
				float4 lerpResult994_g170352 = lerp( Local_Masks750_g170352 , ( Visual_Shader531_g170352 * Local_Masks750_g170352 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170352 = lerp( Visual_Shader531_g170352 , lerpResult994_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170352 = lerpResult440_g170352;
				#else
				float4 staticSwitch451_g170352 = Visual_Shader531_g170352;
				#endif
				half4 Final_Masks613_g170352 = staticSwitch451_g170352;
				float4 In_Shader3_g170363 = Final_Masks613_g170352;
				float4 In_Emissive3_g170363 = Out_Emissive4_g170366;
				float3 temp_output_3_0_g170380 = Final_Albedo601_g170352;
				float dotResult20_g170380 = dot( temp_output_3_0_g170380 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170352 = dotResult20_g170380;
				float In_Grayscale3_g170363 = Final_Grayscale615_g170352;
				float clampResult651_g170352 = clamp( saturate( ( Final_Grayscale615_g170352 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170352 = clampResult651_g170352;
				float In_Luminosity3_g170363 = Final_Luminosity652_g170352;
				half Visual_MultiMask547_g170352 = Out_MultiMask4_g170366;
				float lerpResult477_g170352 = lerp( Visual_MultiMask547_g170352 , Local_MultiMask767_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float staticSwitch482_g170352 = lerpResult477_g170352;
				#else
				float staticSwitch482_g170352 = Visual_MultiMask547_g170352;
				#endif
				half Final_MultiMask572_g170352 = staticSwitch482_g170352;
				float In_MultiMask3_g170363 = Final_MultiMask572_g170352;
				half Visual_AlphaClip559_g170352 = Out_AlphaClip4_g170366;
				float temp_output_718_0_g170352 = (Local_AlbedoTex777_g170352).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170352 = ( temp_output_718_0_g170352 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170352 = temp_output_718_0_g170352;
				#endif
				half Local_AlphaClip772_g170352 = staticSwitch932_g170352;
				float lerpResult448_g170352 = lerp( Visual_AlphaClip559_g170352 , Local_AlphaClip772_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float staticSwitch564_g170352 = lerpResult448_g170352;
				#else
				float staticSwitch564_g170352 = Visual_AlphaClip559_g170352;
				#endif
				half Final_AlphaClip602_g170352 = staticSwitch564_g170352;
				float In_AlphaClip3_g170363 = Final_AlphaClip602_g170352;
				half Visual_AlphaFade588_g170352 = Out_AlphaFade4_g170366;
				half Local_AlphaFade773_g170352 = (lerpResult706_g170352).a;
				float lerpResult604_g170352 = lerp( Visual_AlphaFade588_g170352 , Local_AlphaFade773_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float staticSwitch608_g170352 = lerpResult604_g170352;
				#else
				float staticSwitch608_g170352 = Visual_AlphaFade588_g170352;
				#endif
				half Final_AlphaFade611_g170352 = staticSwitch608_g170352;
				float In_AlphaFade3_g170363 = Final_AlphaFade611_g170352;
				float3 In_Translucency3_g170363 = Out_Translucency4_g170366;
				float In_Transmission3_g170363 = Out_Transmission4_g170366;
				float In_Thickness3_g170363 = Out_Thickness4_g170366;
				float In_Diffusion3_g170363 = Out_Diffusion4_g170366;
				Data3_g170363.Dummy = In_Dummy3_g170363;
				Data3_g170363.Albedo = In_Albedo3_g170363;
				Data3_g170363.NormalTS = In_NormalTS3_g170363;
				Data3_g170363.NormalWS = In_NormalWS3_g170363;
				Data3_g170363.Shader = In_Shader3_g170363;
				Data3_g170363.Emissive= In_Emissive3_g170363;
				Data3_g170363.MultiMask = In_MultiMask3_g170363;
				Data3_g170363.Grayscale = In_Grayscale3_g170363;
				Data3_g170363.Luminosity = In_Luminosity3_g170363;
				Data3_g170363.AlphaClip = In_AlphaClip3_g170363;
				Data3_g170363.AlphaFade = In_AlphaFade3_g170363;
				Data3_g170363.Translucency = In_Translucency3_g170363;
				Data3_g170363.Transmission = In_Transmission3_g170363;
				Data3_g170363.Thickness = In_Thickness3_g170363;
				Data3_g170363.Diffusion = In_Diffusion3_g170363;
				TVEVisualData Data4_g170402 = Data3_g170363;
				float Out_Dummy4_g170402 = 0;
				float3 Out_Albedo4_g170402 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170402 = float2( 0,0 );
				float3 Out_NormalWS4_g170402 = float3( 0,0,0 );
				float4 Out_Shader4_g170402 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170402 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170402 = 0;
				float Out_Grayscale4_g170402 = 0;
				float Out_Luminosity4_g170402 = 0;
				float Out_AlphaClip4_g170402 = 0;
				float Out_AlphaFade4_g170402 = 0;
				float3 Out_Translucency4_g170402 = float3( 0,0,0 );
				float Out_Transmission4_g170402 = 0;
				float Out_Thickness4_g170402 = 0;
				float Out_Diffusion4_g170402 = 0;
				Out_Dummy4_g170402 = Data4_g170402.Dummy;
				Out_Albedo4_g170402 = Data4_g170402.Albedo;
				Out_NormalTS4_g170402 = Data4_g170402.NormalTS;
				Out_NormalWS4_g170402 = Data4_g170402.NormalWS;
				Out_Shader4_g170402 = Data4_g170402.Shader;
				Out_Emissive4_g170402= Data4_g170402.Emissive;
				Out_MultiMask4_g170402 = Data4_g170402.MultiMask;
				Out_Grayscale4_g170402 = Data4_g170402.Grayscale;
				Out_Luminosity4_g170402= Data4_g170402.Luminosity;
				Out_AlphaClip4_g170402 = Data4_g170402.AlphaClip;
				Out_AlphaFade4_g170402 = Data4_g170402.AlphaFade;
				Out_Translucency4_g170402 = Data4_g170402.Translucency;
				Out_Transmission4_g170402 = Data4_g170402.Transmission;
				Out_Thickness4_g170402 = Data4_g170402.Thickness;
				Out_Diffusion4_g170402 = Data4_g170402.Diffusion;
				half3 Visual_Albedo527_g170386 = Out_Albedo4_g170402;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170387) = _ThirdAlbedoTex;
				float localFilterTexture19_g170416 = ( 0.0 );
				SamplerState SamplerDefault19_g170416 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170416 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170416 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170416 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170416 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170416 = SamplerDefault19_g170416;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170416 = SamplerDefault19_g170416;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170416 = SamplerPoint19_g170416;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170416 = SamplerLow19_g170416;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170416 = SamplerMedium19_g170416;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170416 = SamplerHigh19_g170416;
				#endif
				SamplerState Sampler276_g170387 = SS19_g170416;
				half4 Local_LayerCoords790_g170386 = _third_coord_value;
				float4 temp_output_37_0_g170387 = Local_LayerCoords790_g170386;
				half4 Coords276_g170387 = temp_output_37_0_g170387;
				half2 TexCoord276_g170387 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170387 = SampleMain( Texture276_g170387 , Sampler276_g170387 , Coords276_g170387 , TexCoord276_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170387 = SS19_g170416;
				half4 Coords275_g170387 = temp_output_37_0_g170387;
				half2 TexCoord275_g170387 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170387 = SampleExtra( Texture275_g170387 , Sampler275_g170387 , Coords275_g170387 , TexCoord275_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170387 = SS19_g170416;
				half4 Coords238_g170387 = temp_output_37_0_g170387;
				TVEModelData Data15_g170414 = Data16_g170157;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionOS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170414 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170414 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170414 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170414 = float4( 0,0,0,0 );
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionOS15_g170414 = Data15_g170414.PositionOS;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PositionRawOS15_g170414 = Data15_g170414.PositionRawOS;
				Out_PositionAddOS15_g170414 = Data15_g170414.PositionAddOS;
				Out_PivotOS15_g170414 = Data15_g170414.PivotOS;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalOS15_g170414 = Data15_g170414.NormalOS;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_NormalRawOS15_g170414 = Data15_g170414.NormalRawOS;
				Out_NormalRawWS15_g170414 = Data15_g170414.NormalRawWS;
				Out_TangentOS15_g170414 = Data15_g170414.TangentOS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_MotionData15_g170414 = Data15_g170414.MotionData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				Out_RotationData15_g170414 = Data15_g170414.RotationData;
				half3 Model_PositionWO636_g170386 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170387 = Model_PositionWO636_g170386;
				half3 WorldPosition238_g170387 = temp_output_279_0_g170387;
				half4 localSamplePlanar2D238_g170387 = SamplePlanar2D( Texture238_g170387 , Sampler238_g170387 , Coords238_g170387 , WorldPosition238_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170387 = SS19_g170416;
				half4 Coords246_g170387 = temp_output_37_0_g170387;
				half3 WorldPosition246_g170387 = temp_output_279_0_g170387;
				half3 Model_NormalWS869_g170386 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170387 = Model_NormalWS869_g170386;
				half3 WorldNormal246_g170387 = temp_output_280_0_g170387;
				half4 localSamplePlanar3D246_g170387 = SamplePlanar3D( Texture246_g170387 , Sampler246_g170387 , Coords246_g170387 , WorldPosition246_g170387 , WorldNormal246_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170387 = SS19_g170416;
				float4 Coords234_g170387 = temp_output_37_0_g170387;
				float3 WorldPosition234_g170387 = temp_output_279_0_g170387;
				float4 localSampleStochastic2D234_g170387 = SampleStochastic2D( Texture234_g170387 , Sampler234_g170387 , Coords234_g170387 , WorldPosition234_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170387 = SS19_g170416;
				half4 Coords263_g170387 = temp_output_37_0_g170387;
				half3 WorldPosition263_g170387 = temp_output_279_0_g170387;
				half3 WorldNormal263_g170387 = temp_output_280_0_g170387;
				half4 localSampleStochastic3D263_g170387 = SampleStochastic3D( Texture263_g170387 , Sampler263_g170387 , Coords263_g170387 , WorldPosition263_g170387 , WorldNormal263_g170387 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170386 = localSampleMain276_g170387;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170386 = localSampleExtra275_g170387;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170386 = localSamplePlanar2D238_g170387;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170386 = localSamplePlanar3D246_g170387;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170386 = localSampleStochastic2D234_g170387;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170386 = localSampleStochastic3D263_g170387;
				#else
				float4 staticSwitch693_g170386 = localSampleMain276_g170387;
				#endif
				half4 Local_AlbedoTex777_g170386 = staticSwitch693_g170386;
				float3 lerpResult716_g170386 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170386).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170386 = lerpResult716_g170386;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170389) = _ThirdShaderTex;
				float localFilterTexture30_g170418 = ( 0.0 );
				SamplerState SamplerDefault30_g170418 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170418 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170418 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170418 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170418 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170418 = SamplerDefault30_g170418;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170418 = SamplerDefault30_g170418;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170418 = SamplerPoint30_g170418;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170418 = SamplerLow30_g170418;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170418 = SamplerMedium30_g170418;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170418 = SamplerHigh30_g170418;
				#endif
				SamplerState Sampler276_g170389 = SS30_g170418;
				float4 temp_output_37_0_g170389 = Local_LayerCoords790_g170386;
				half4 Coords276_g170389 = temp_output_37_0_g170389;
				half2 TexCoord276_g170389 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170389 = SampleMain( Texture276_g170389 , Sampler276_g170389 , Coords276_g170389 , TexCoord276_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170389) = _ThirdShaderTex;
				SamplerState Sampler275_g170389 = SS30_g170418;
				half4 Coords275_g170389 = temp_output_37_0_g170389;
				half2 TexCoord275_g170389 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170389 = SampleExtra( Texture275_g170389 , Sampler275_g170389 , Coords275_g170389 , TexCoord275_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170389) = _ThirdShaderTex;
				SamplerState Sampler238_g170389 = SS30_g170418;
				half4 Coords238_g170389 = temp_output_37_0_g170389;
				float3 temp_output_279_0_g170389 = Model_PositionWO636_g170386;
				half3 WorldPosition238_g170389 = temp_output_279_0_g170389;
				half4 localSamplePlanar2D238_g170389 = SamplePlanar2D( Texture238_g170389 , Sampler238_g170389 , Coords238_g170389 , WorldPosition238_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170389) = _ThirdShaderTex;
				SamplerState Sampler246_g170389 = SS30_g170418;
				half4 Coords246_g170389 = temp_output_37_0_g170389;
				half3 WorldPosition246_g170389 = temp_output_279_0_g170389;
				float3 temp_output_280_0_g170389 = Model_NormalWS869_g170386;
				half3 WorldNormal246_g170389 = temp_output_280_0_g170389;
				half4 localSamplePlanar3D246_g170389 = SamplePlanar3D( Texture246_g170389 , Sampler246_g170389 , Coords246_g170389 , WorldPosition246_g170389 , WorldNormal246_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170389) = _ThirdShaderTex;
				SamplerState Sampler234_g170389 = SS30_g170418;
				float4 Coords234_g170389 = temp_output_37_0_g170389;
				float3 WorldPosition234_g170389 = temp_output_279_0_g170389;
				float4 localSampleStochastic2D234_g170389 = SampleStochastic2D( Texture234_g170389 , Sampler234_g170389 , Coords234_g170389 , WorldPosition234_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170389) = _ThirdShaderTex;
				SamplerState Sampler263_g170389 = SS30_g170418;
				half4 Coords263_g170389 = temp_output_37_0_g170389;
				half3 WorldPosition263_g170389 = temp_output_279_0_g170389;
				half3 WorldNormal263_g170389 = temp_output_280_0_g170389;
				half4 localSampleStochastic3D263_g170389 = SampleStochastic3D( Texture263_g170389 , Sampler263_g170389 , Coords263_g170389 , WorldPosition263_g170389 , WorldNormal263_g170389 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170386 = localSampleMain276_g170389;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170386 = localSampleExtra275_g170389;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170386 = localSamplePlanar2D238_g170389;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170386 = localSamplePlanar3D246_g170389;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170386 = localSampleStochastic2D234_g170389;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170386 = localSampleStochastic3D263_g170389;
				#else
				float4 staticSwitch722_g170386 = localSampleMain276_g170389;
				#endif
				half4 Local_ShaderTex775_g170386 = staticSwitch722_g170386;
				float lerpResult739_g170386 = lerp( 1.0 , (Local_ShaderTex775_g170386).y , _ThirdOcclusionValue);
				float4 appendResult749_g170386 = (float4(( (Local_ShaderTex775_g170386).x * _ThirdMetallicValue ) , lerpResult739_g170386 , (Local_ShaderTex775_g170386).z , ( (Local_ShaderTex775_g170386).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170386 = appendResult749_g170386;
				float clampResult17_g170392 = clamp( (Local_Masks750_g170386).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170393 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170393 = ( _ThirdMultiRemap.y - temp_output_7_0_g170393 );
				float temp_output_765_0_g170386 = saturate( ( ( clampResult17_g170392 - temp_output_7_0_g170393 ) / ( temp_output_10_0_g170393 + 0.0001 ) ) );
				half Local_MultiMask767_g170386 = temp_output_765_0_g170386;
				float lerpResult705_g170386 = lerp( 1.0 , Local_MultiMask767_g170386 , _ThirdColorMode);
				float4 lerpResult706_g170386 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170386);
				half3 Local_ColorRGB774_g170386 = (lerpResult706_g170386).rgb;
				half3 Local_Albedo768_g170386 = ( Local_AlbedoRGB771_g170386 * Local_ColorRGB774_g170386 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170410 = 2.0;
				#else
				float staticSwitch1_g170410 = 4.594794;
				#endif
				float3 lerpResult985_g170386 = lerp( Local_Albedo768_g170386 , ( Visual_Albedo527_g170386 * Local_Albedo768_g170386 * staticSwitch1_g170410 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170413) = _ThirdMaskTex;
				SamplerState Sampler276_g170413 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170386 = _third_mask_coord_value;
				float4 temp_output_37_0_g170413 = Local_MaskCoords813_g170386;
				half4 Coords276_g170413 = temp_output_37_0_g170413;
				half2 TexCoord276_g170413 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170413 = SampleMain( Texture276_g170413 , Sampler276_g170413 , Coords276_g170413 , TexCoord276_g170413 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170413) = _ThirdMaskTex;
				SamplerState Sampler275_g170413 = sampler_Linear_Repeat;
				half4 Coords275_g170413 = temp_output_37_0_g170413;
				half2 TexCoord275_g170413 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170413 = SampleExtra( Texture275_g170413 , Sampler275_g170413 , Coords275_g170413 , TexCoord275_g170413 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170413) = _ThirdMaskTex;
				SamplerState Sampler238_g170413 = sampler_Linear_Repeat;
				half4 Coords238_g170413 = temp_output_37_0_g170413;
				float3 temp_output_279_0_g170413 = Model_PositionWO636_g170386;
				half3 WorldPosition238_g170413 = temp_output_279_0_g170413;
				half4 localSamplePlanar2D238_g170413 = SamplePlanar2D( Texture238_g170413 , Sampler238_g170413 , Coords238_g170413 , WorldPosition238_g170413 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170413) = _ThirdMaskTex;
				SamplerState Sampler246_g170413 = sampler_Linear_Repeat;
				half4 Coords246_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition246_g170413 = temp_output_279_0_g170413;
				float3 temp_output_280_0_g170413 = Model_NormalWS869_g170386;
				half3 WorldNormal246_g170413 = temp_output_280_0_g170413;
				half4 localSamplePlanar3D246_g170413 = SamplePlanar3D( Texture246_g170413 , Sampler246_g170413 , Coords246_g170413 , WorldPosition246_g170413 , WorldNormal246_g170413 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170386 = localSampleMain276_g170413;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170386 = localSampleExtra275_g170413;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170386 = localSamplePlanar2D238_g170413;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170386 = localSamplePlanar3D246_g170413;
				#else
				float4 staticSwitch817_g170386 = localSampleMain276_g170413;
				#endif
				half4 Local_MaskTex861_g170386 = staticSwitch817_g170386;
				float clampResult17_g170397 = clamp( (Local_MaskTex861_g170386).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170398 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170398 = ( _ThirdMaskRemap.y - temp_output_7_0_g170398 );
				float lerpResult1028_g170386 = lerp( 1.0 , saturate( ( ( clampResult17_g170397 - temp_output_7_0_g170398 ) / ( temp_output_10_0_g170398 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170386 = lerpResult1028_g170386;
				half4 Model_VertexMasks960_g170386 = Out_VertexData15_g170414;
				float4 break961_g170386 = Model_VertexMasks960_g170386;
				float4 break33_g170401 = _third_vert_mode;
				float temp_output_30_0_g170401 = ( break961_g170386.x * break33_g170401.x );
				float temp_output_29_0_g170401 = ( break961_g170386.y * break33_g170401.y );
				float temp_output_31_0_g170401 = ( break961_g170386.z * break33_g170401.z );
				float temp_output_28_0_g170401 = ( temp_output_30_0_g170401 + temp_output_29_0_g170401 + temp_output_31_0_g170401 + ( break961_g170386.w * break33_g170401.w ) );
				float clampResult17_g170395 = clamp( temp_output_28_0_g170401 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170396 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170396 = ( _ThirdMeshRemap.y - temp_output_7_0_g170396 );
				float lerpResult1026_g170386 = lerp( 1.0 , saturate( ( ( clampResult17_g170395 - temp_output_7_0_g170396 ) / ( temp_output_10_0_g170396 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170412 = lerpResult1026_g170386;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170412 = ( temp_output_6_0_g170412 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170412 = temp_output_6_0_g170412;
				#endif
				float temp_output_992_0_g170386 = staticSwitch14_g170412;
				half Blend_VertMask913_g170386 = temp_output_992_0_g170386;
				half3 Visual_NormalWS953_g170386 = Out_NormalWS4_g170402;
				float clampResult17_g170399 = clamp( saturate( (Visual_NormalWS953_g170386).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170400 = _ThirdProjRemap.x;
				float temp_output_10_0_g170400 = ( _ThirdProjRemap.y - temp_output_7_0_g170400 );
				float lerpResult1004_g170386 = lerp( 1.0 , saturate( ( ( clampResult17_g170399 - temp_output_7_0_g170400 ) / ( temp_output_10_0_g170400 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170386 = lerpResult1004_g170386;
				TVEGlobalData Data15_g170404 = Data204_g170159;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170404 = float4( 0,0,0,0 );
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatParams15_g170404 = Data15_g170404.CoatParams;
				Out_PaintParams15_g170404 = Data15_g170404.PaintParams;
				Out_GlowParams15_g170404 = Data15_g170404.GlowParams;
				Out_AtmoParams15_g170404= Data15_g170404.AtmoParams;
				Out_FadeParams15_g170404= Data15_g170404.FadeParams;
				Out_FormParams15_g170404 = Data15_g170404.FormParams;
				Out_LandParams15_g170404 = Data15_g170404.LandParams;
				Out_WindParams15_g170404 = Data15_g170404.WindParams;
				Out_PushParams15_g170404 = Data15_g170404.PushParams;
				half4 Global_CoatParams972_g170386 = Out_CoatParams15_g170404;
				float lerpResult1023_g170386 = lerp( 1.0 , (Global_CoatParams972_g170386).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170386 = lerpResult1023_g170386;
				#else
				float staticSwitch965_g170386 = 1.0;
				#endif
				half Blend_GlobalMask968_g170386 = staticSwitch965_g170386;
				float temp_output_432_0_g170386 = ( _ThirdIntensityValue * Detail_TexMask429_g170386 * Blend_VertMask913_g170386 * Blend_ProjMask912_g170386 * Blend_GlobalMask968_g170386 );
				float clampResult17_g170406 = clamp( temp_output_432_0_g170386 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170405 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170405 = ( _ThirdBlendRemap.y - temp_output_7_0_g170405 );
				half Detail_Mask412_g170386 = ( saturate( ( ( clampResult17_g170406 - temp_output_7_0_g170405 ) / ( temp_output_10_0_g170405 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170386 = lerp( Visual_Albedo527_g170386 , lerpResult985_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170386 = lerpResult989_g170386;
				#else
				float3 staticSwitch415_g170386 = Visual_Albedo527_g170386;
				#endif
				half3 Final_Albedo601_g170386 = staticSwitch415_g170386;
				float3 In_Albedo3_g170403 = Final_Albedo601_g170386;
				half2 Visual_NormalTS529_g170386 = Out_NormalTS4_g170402;
				float2 lerpResult40_g170408 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170386 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170388) = _ThirdNormalTex;
				float localFilterTexture29_g170417 = ( 0.0 );
				SamplerState SamplerDefault29_g170417 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170417 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170417 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170417 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170417 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170417 = SamplerDefault29_g170417;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170417 = SamplerDefault29_g170417;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170417 = SamplerPoint29_g170417;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170417 = SamplerLow29_g170417;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170417 = SamplerMedium29_g170417;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170417 = SamplerHigh29_g170417;
				#endif
				SamplerState Sampler276_g170388 = SS29_g170417;
				float4 temp_output_37_0_g170388 = Local_LayerCoords790_g170386;
				half4 Coords276_g170388 = temp_output_37_0_g170388;
				half2 TexCoord276_g170388 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170388 = SampleMain( Texture276_g170388 , Sampler276_g170388 , Coords276_g170388 , TexCoord276_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170388) = _ThirdNormalTex;
				SamplerState Sampler275_g170388 = SS29_g170417;
				half4 Coords275_g170388 = temp_output_37_0_g170388;
				half2 TexCoord275_g170388 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170388 = SampleExtra( Texture275_g170388 , Sampler275_g170388 , Coords275_g170388 , TexCoord275_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170388) = _ThirdNormalTex;
				SamplerState Sampler238_g170388 = SS29_g170417;
				half4 Coords238_g170388 = temp_output_37_0_g170388;
				float3 temp_output_279_0_g170388 = Model_PositionWO636_g170386;
				half3 WorldPosition238_g170388 = temp_output_279_0_g170388;
				half4 localSamplePlanar2D238_g170388 = SamplePlanar2D( Texture238_g170388 , Sampler238_g170388 , Coords238_g170388 , WorldPosition238_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170388) = _ThirdNormalTex;
				SamplerState Sampler246_g170388 = SS29_g170417;
				half4 Coords246_g170388 = temp_output_37_0_g170388;
				half3 WorldPosition246_g170388 = temp_output_279_0_g170388;
				float3 temp_output_280_0_g170388 = Model_NormalWS869_g170386;
				half3 WorldNormal246_g170388 = temp_output_280_0_g170388;
				half4 localSamplePlanar3D246_g170388 = SamplePlanar3D( Texture246_g170388 , Sampler246_g170388 , Coords246_g170388 , WorldPosition246_g170388 , WorldNormal246_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170388) = _ThirdNormalTex;
				SamplerState Sampler234_g170388 = SS29_g170417;
				float4 Coords234_g170388 = temp_output_37_0_g170388;
				float3 WorldPosition234_g170388 = temp_output_279_0_g170388;
				float4 localSampleStochastic2D234_g170388 = SampleStochastic2D( Texture234_g170388 , Sampler234_g170388 , Coords234_g170388 , WorldPosition234_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170388) = _ThirdNormalTex;
				SamplerState Sampler263_g170388 = SS29_g170417;
				half4 Coords263_g170388 = temp_output_37_0_g170388;
				half3 WorldPosition263_g170388 = temp_output_279_0_g170388;
				half3 WorldNormal263_g170388 = temp_output_280_0_g170388;
				half4 localSampleStochastic3D263_g170388 = SampleStochastic3D( Texture263_g170388 , Sampler263_g170388 , Coords263_g170388 , WorldPosition263_g170388 , WorldNormal263_g170388 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170386 = localSampleMain276_g170388;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170386 = localSampleExtra275_g170388;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170386 = localSamplePlanar2D238_g170388;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170386 = localSamplePlanar3D246_g170388;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170386 = localSampleStochastic2D234_g170388;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170386 = localSampleStochastic3D263_g170388;
				#else
				float4 staticSwitch698_g170386 = localSampleMain276_g170388;
				#endif
				half4 Local_NormalTex776_g170386 = staticSwitch698_g170386;
				half4 Normal_Packed45_g170390 = Local_NormalTex776_g170386;
				float2 appendResult58_g170390 = (float2(( (Normal_Packed45_g170390).x * (Normal_Packed45_g170390).w ) , (Normal_Packed45_g170390).y));
				half2 Normal_Default50_g170390 = appendResult58_g170390;
				half2 Normal_ASTC41_g170390 = (Normal_Packed45_g170390).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170390 = Normal_ASTC41_g170390;
				#else
				float2 staticSwitch38_g170390 = Normal_Default50_g170390;
				#endif
				half2 Normal_NO_DTX544_g170390 = (Normal_Packed45_g170390).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170390 = Normal_NO_DTX544_g170390;
				#else
				float2 staticSwitch37_g170390 = staticSwitch38_g170390;
				#endif
				float2 temp_output_724_0_g170386 = ( (staticSwitch37_g170390*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170391 = temp_output_724_0_g170386;
				float2 break71_g170391 = Normal_Planar45_g170391;
				float3 appendResult72_g170391 = (float3(break71_g170391.x , 0.0 , break71_g170391.y));
				float2 temp_output_858_0_g170386 = (mul( ase_worldToTangent, appendResult72_g170391 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170386 = temp_output_724_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170386 = temp_output_724_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170386 = temp_output_858_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170386 = temp_output_858_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170386 = temp_output_858_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170386 = temp_output_858_0_g170386;
				#else
				float2 staticSwitch727_g170386 = temp_output_724_0_g170386;
				#endif
				half2 Local_NormalTS729_g170386 = staticSwitch727_g170386;
				float2 temp_output_36_0_g170408 = ( lerpResult40_g170408 + Local_NormalTS729_g170386 );
				float2 lerpResult405_g170386 = lerp( Visual_NormalTS529_g170386 , temp_output_36_0_g170408 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170386 = lerpResult405_g170386;
				#else
				float2 staticSwitch418_g170386 = Visual_NormalTS529_g170386;
				#endif
				half2 Final_NormalTS612_g170386 = staticSwitch418_g170386;
				float2 In_NormalTS3_g170403 = Final_NormalTS612_g170386;
				float3 appendResult68_g170409 = (float3(Final_NormalTS612_g170386 , 1.0));
				float3 tanNormal74_g170409 = appendResult68_g170409;
				float3 worldNormal74_g170409 = normalize( float3(dot(tanToWorld0,tanNormal74_g170409), dot(tanToWorld1,tanNormal74_g170409), dot(tanToWorld2,tanNormal74_g170409)) );
				half3 Final_NormalWS956_g170386 = worldNormal74_g170409;
				float3 In_NormalWS3_g170403 = Final_NormalWS956_g170386;
				half4 Visual_Shader531_g170386 = Out_Shader4_g170402;
				float4 lerpResult1000_g170386 = lerp( Local_Masks750_g170386 , ( Visual_Shader531_g170386 * Local_Masks750_g170386 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170386 = lerp( Visual_Shader531_g170386 , lerpResult1000_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170386 = lerpResult998_g170386;
				#else
				float4 staticSwitch451_g170386 = Visual_Shader531_g170386;
				#endif
				half4 Final_Masks613_g170386 = staticSwitch451_g170386;
				float4 In_Shader3_g170403 = Final_Masks613_g170386;
				float4 In_Emissive3_g170403 = Out_Emissive4_g170402;
				float3 temp_output_3_0_g170411 = Final_Albedo601_g170386;
				float dotResult20_g170411 = dot( temp_output_3_0_g170411 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170386 = dotResult20_g170411;
				float In_Grayscale3_g170403 = Final_Grayscale615_g170386;
				float clampResult651_g170386 = clamp( saturate( ( Final_Grayscale615_g170386 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170386 = clampResult651_g170386;
				float In_Luminosity3_g170403 = Final_Luminosity652_g170386;
				half Visual_MultiMask547_g170386 = Out_MultiMask4_g170402;
				float lerpResult477_g170386 = lerp( Visual_MultiMask547_g170386 , Local_MultiMask767_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float staticSwitch482_g170386 = lerpResult477_g170386;
				#else
				float staticSwitch482_g170386 = Visual_MultiMask547_g170386;
				#endif
				half Final_MultiMask572_g170386 = staticSwitch482_g170386;
				float In_MultiMask3_g170403 = Final_MultiMask572_g170386;
				half Visual_AlphaClip559_g170386 = Out_AlphaClip4_g170402;
				float temp_output_718_0_g170386 = (Local_AlbedoTex777_g170386).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170386 = ( temp_output_718_0_g170386 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170386 = temp_output_718_0_g170386;
				#endif
				half Local_AlphaClip772_g170386 = staticSwitch924_g170386;
				float lerpResult448_g170386 = lerp( Visual_AlphaClip559_g170386 , Local_AlphaClip772_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float staticSwitch564_g170386 = lerpResult448_g170386;
				#else
				float staticSwitch564_g170386 = Visual_AlphaClip559_g170386;
				#endif
				half Final_AlphaClip602_g170386 = staticSwitch564_g170386;
				float In_AlphaClip3_g170403 = Final_AlphaClip602_g170386;
				half Visual_AlphaFade588_g170386 = Out_AlphaFade4_g170402;
				half Local_AlphaFade773_g170386 = (lerpResult706_g170386).a;
				float lerpResult604_g170386 = lerp( Visual_AlphaFade588_g170386 , Local_AlphaFade773_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float staticSwitch608_g170386 = lerpResult604_g170386;
				#else
				float staticSwitch608_g170386 = Visual_AlphaFade588_g170386;
				#endif
				half Final_AlphaFade611_g170386 = staticSwitch608_g170386;
				float In_AlphaFade3_g170403 = Final_AlphaFade611_g170386;
				float3 In_Translucency3_g170403 = Out_Translucency4_g170402;
				float In_Transmission3_g170403 = Out_Transmission4_g170402;
				float In_Thickness3_g170403 = Out_Thickness4_g170402;
				float In_Diffusion3_g170403 = Out_Diffusion4_g170402;
				Data3_g170403.Dummy = In_Dummy3_g170403;
				Data3_g170403.Albedo = In_Albedo3_g170403;
				Data3_g170403.NormalTS = In_NormalTS3_g170403;
				Data3_g170403.NormalWS = In_NormalWS3_g170403;
				Data3_g170403.Shader = In_Shader3_g170403;
				Data3_g170403.Emissive= In_Emissive3_g170403;
				Data3_g170403.MultiMask = In_MultiMask3_g170403;
				Data3_g170403.Grayscale = In_Grayscale3_g170403;
				Data3_g170403.Luminosity = In_Luminosity3_g170403;
				Data3_g170403.AlphaClip = In_AlphaClip3_g170403;
				Data3_g170403.AlphaFade = In_AlphaFade3_g170403;
				Data3_g170403.Translucency = In_Translucency3_g170403;
				Data3_g170403.Transmission = In_Transmission3_g170403;
				Data3_g170403.Thickness = In_Thickness3_g170403;
				Data3_g170403.Diffusion = In_Diffusion3_g170403;
				TVEVisualData Data4_g170421 = Data3_g170403;
				float Out_Dummy4_g170421 = 0;
				float3 Out_Albedo4_g170421 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170421 = float2( 0,0 );
				float3 Out_NormalWS4_g170421 = float3( 0,0,0 );
				float4 Out_Shader4_g170421 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170421 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170421 = 0;
				float Out_Grayscale4_g170421 = 0;
				float Out_Luminosity4_g170421 = 0;
				float Out_AlphaClip4_g170421 = 0;
				float Out_AlphaFade4_g170421 = 0;
				float3 Out_Translucency4_g170421 = float3( 0,0,0 );
				float Out_Transmission4_g170421 = 0;
				float Out_Thickness4_g170421 = 0;
				float Out_Diffusion4_g170421 = 0;
				Out_Dummy4_g170421 = Data4_g170421.Dummy;
				Out_Albedo4_g170421 = Data4_g170421.Albedo;
				Out_NormalTS4_g170421 = Data4_g170421.NormalTS;
				Out_NormalWS4_g170421 = Data4_g170421.NormalWS;
				Out_Shader4_g170421 = Data4_g170421.Shader;
				Out_Emissive4_g170421= Data4_g170421.Emissive;
				Out_MultiMask4_g170421 = Data4_g170421.MultiMask;
				Out_Grayscale4_g170421 = Data4_g170421.Grayscale;
				Out_Luminosity4_g170421= Data4_g170421.Luminosity;
				Out_AlphaClip4_g170421 = Data4_g170421.AlphaClip;
				Out_AlphaFade4_g170421 = Data4_g170421.AlphaFade;
				Out_Translucency4_g170421 = Data4_g170421.Translucency;
				Out_Transmission4_g170421 = Data4_g170421.Transmission;
				Out_Thickness4_g170421 = Data4_g170421.Thickness;
				Out_Diffusion4_g170421 = Data4_g170421.Diffusion;
				half3 Visual_Albedo127_g170420 = Out_Albedo4_g170421;
				TVEModelData Data15_g170423 = Data16_g170157;
				float Out_Dummy15_g170423 = 0;
				float3 Out_PositionOS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170423 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170423 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170423 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170423 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170423 = float3( 0,0,0 );
				float4 Out_VertexData15_g170423 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170423 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170423 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170423 = float4( 0,0,0,0 );
				Out_Dummy15_g170423 = Data15_g170423.Dummy;
				Out_PositionOS15_g170423 = Data15_g170423.PositionOS;
				Out_PositionWS15_g170423 = Data15_g170423.PositionWS;
				Out_PositionWO15_g170423 = Data15_g170423.PositionWO;
				Out_PositionRawOS15_g170423 = Data15_g170423.PositionRawOS;
				Out_PositionAddOS15_g170423 = Data15_g170423.PositionAddOS;
				Out_PivotOS15_g170423 = Data15_g170423.PivotOS;
				Out_PivotWS15_g170423 = Data15_g170423.PivotWS;
				Out_PivotWO15_g170423 = Data15_g170423.PivotWO;
				Out_NormalOS15_g170423 = Data15_g170423.NormalOS;
				Out_NormalWS15_g170423 = Data15_g170423.NormalWS;
				Out_NormalRawOS15_g170423 = Data15_g170423.NormalRawOS;
				Out_NormalRawWS15_g170423 = Data15_g170423.NormalRawWS;
				Out_TangentOS15_g170423 = Data15_g170423.TangentOS;
				Out_ViewDirWS15_g170423 = Data15_g170423.ViewDirWS;
				Out_VertexData15_g170423 = Data15_g170423.VertexData;
				Out_MotionData15_g170423 = Data15_g170423.MotionData;
				Out_BoundsData15_g170423 = Data15_g170423.BoundsData;
				Out_RotationData15_g170423 = Data15_g170423.RotationData;
				half4 Model_VertexData206_g170420 = Out_VertexData15_g170423;
				float4 break208_g170420 = Model_VertexData206_g170420;
				float4 break33_g170428 = _occlusion_vert_mode;
				float temp_output_30_0_g170428 = ( break208_g170420.x * break33_g170428.x );
				float temp_output_29_0_g170428 = ( break208_g170420.y * break33_g170428.y );
				float temp_output_31_0_g170428 = ( break208_g170420.z * break33_g170428.z );
				float temp_output_28_0_g170428 = ( temp_output_30_0_g170428 + temp_output_29_0_g170428 + temp_output_31_0_g170428 + ( break208_g170420.w * break33_g170428.w ) );
				float temp_output_194_0_g170420 = temp_output_28_0_g170428;
				float clampResult17_g170426 = clamp( temp_output_194_0_g170420 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170425 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170425 );
				float temp_output_6_0_g170427 = saturate( ( ( clampResult17_g170426 - temp_output_7_0_g170425 ) / ( temp_output_10_0_g170425 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170427 = ( temp_output_6_0_g170427 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170427 = temp_output_6_0_g170427;
				#endif
				half Occlusion_Mask82_g170420 = staticSwitch14_g170427;
				float3 lerpResult75_g170420 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170420);
				float3 lerpResult186_g170420 = lerp( Visual_Albedo127_g170420 , ( Visual_Albedo127_g170420 * lerpResult75_g170420 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170420 = lerpResult186_g170420;
				#else
				float3 staticSwitch171_g170420 = Visual_Albedo127_g170420;
				#endif
				half3 Final_Albedo160_g170420 = staticSwitch171_g170420;
				float3 In_Albedo3_g170422 = Final_Albedo160_g170420;
				float2 In_NormalTS3_g170422 = Out_NormalTS4_g170421;
				float3 In_NormalWS3_g170422 = Out_NormalWS4_g170421;
				float4 In_Shader3_g170422 = Out_Shader4_g170421;
				float4 In_Emissive3_g170422 = Out_Emissive4_g170421;
				float3 temp_output_3_0_g170424 = Final_Albedo160_g170420;
				float dotResult20_g170424 = dot( temp_output_3_0_g170424 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170420 = dotResult20_g170424;
				float In_Grayscale3_g170422 = Final_Grayscale164_g170420;
				float clampResult180_g170420 = clamp( saturate( ( Final_Grayscale164_g170420 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170420 = clampResult180_g170420;
				float In_Luminosity3_g170422 = Final_Shading181_g170420;
				float In_MultiMask3_g170422 = Out_MultiMask4_g170421;
				float In_AlphaClip3_g170422 = Out_AlphaClip4_g170421;
				float In_AlphaFade3_g170422 = Out_AlphaFade4_g170421;
				float3 In_Translucency3_g170422 = Out_Translucency4_g170421;
				float In_Transmission3_g170422 = Out_Transmission4_g170421;
				float In_Thickness3_g170422 = Out_Thickness4_g170421;
				float In_Diffusion3_g170422 = Out_Diffusion4_g170421;
				Data3_g170422.Dummy = In_Dummy3_g170422;
				Data3_g170422.Albedo = In_Albedo3_g170422;
				Data3_g170422.NormalTS = In_NormalTS3_g170422;
				Data3_g170422.NormalWS = In_NormalWS3_g170422;
				Data3_g170422.Shader = In_Shader3_g170422;
				Data3_g170422.Emissive= In_Emissive3_g170422;
				Data3_g170422.MultiMask = In_MultiMask3_g170422;
				Data3_g170422.Grayscale = In_Grayscale3_g170422;
				Data3_g170422.Luminosity = In_Luminosity3_g170422;
				Data3_g170422.AlphaClip = In_AlphaClip3_g170422;
				Data3_g170422.AlphaFade = In_AlphaFade3_g170422;
				Data3_g170422.Translucency = In_Translucency3_g170422;
				Data3_g170422.Transmission = In_Transmission3_g170422;
				Data3_g170422.Thickness = In_Thickness3_g170422;
				Data3_g170422.Diffusion = In_Diffusion3_g170422;
				TVEVisualData Data4_g170433 = Data3_g170422;
				float Out_Dummy4_g170433 = 0;
				float3 Out_Albedo4_g170433 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170433 = float2( 0,0 );
				float3 Out_NormalWS4_g170433 = float3( 0,0,0 );
				float4 Out_Shader4_g170433 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170433 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170433 = 0;
				float Out_Grayscale4_g170433 = 0;
				float Out_Luminosity4_g170433 = 0;
				float Out_AlphaClip4_g170433 = 0;
				float Out_AlphaFade4_g170433 = 0;
				float3 Out_Translucency4_g170433 = float3( 0,0,0 );
				float Out_Transmission4_g170433 = 0;
				float Out_Thickness4_g170433 = 0;
				float Out_Diffusion4_g170433 = 0;
				Out_Dummy4_g170433 = Data4_g170433.Dummy;
				Out_Albedo4_g170433 = Data4_g170433.Albedo;
				Out_NormalTS4_g170433 = Data4_g170433.NormalTS;
				Out_NormalWS4_g170433 = Data4_g170433.NormalWS;
				Out_Shader4_g170433 = Data4_g170433.Shader;
				Out_Emissive4_g170433= Data4_g170433.Emissive;
				Out_MultiMask4_g170433 = Data4_g170433.MultiMask;
				Out_Grayscale4_g170433 = Data4_g170433.Grayscale;
				Out_Luminosity4_g170433= Data4_g170433.Luminosity;
				Out_AlphaClip4_g170433 = Data4_g170433.AlphaClip;
				Out_AlphaFade4_g170433 = Data4_g170433.AlphaFade;
				Out_Translucency4_g170433 = Data4_g170433.Translucency;
				Out_Transmission4_g170433 = Data4_g170433.Transmission;
				Out_Thickness4_g170433 = Data4_g170433.Thickness;
				Out_Diffusion4_g170433 = Data4_g170433.Diffusion;
				half3 Visual_Albedo127_g170430 = Out_Albedo4_g170433;
				TVEModelData Data15_g170431 = Data16_g170157;
				float Out_Dummy15_g170431 = 0;
				float3 Out_PositionOS15_g170431 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170431 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170431 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170431 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170431 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170431 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170431 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170431 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170431 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170431 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170431 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170431 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170431 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170431 = float3( 0,0,0 );
				float4 Out_VertexData15_g170431 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170431 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170431 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170431 = float4( 0,0,0,0 );
				Out_Dummy15_g170431 = Data15_g170431.Dummy;
				Out_PositionOS15_g170431 = Data15_g170431.PositionOS;
				Out_PositionWS15_g170431 = Data15_g170431.PositionWS;
				Out_PositionWO15_g170431 = Data15_g170431.PositionWO;
				Out_PositionRawOS15_g170431 = Data15_g170431.PositionRawOS;
				Out_PositionAddOS15_g170431 = Data15_g170431.PositionAddOS;
				Out_PivotOS15_g170431 = Data15_g170431.PivotOS;
				Out_PivotWS15_g170431 = Data15_g170431.PivotWS;
				Out_PivotWO15_g170431 = Data15_g170431.PivotWO;
				Out_NormalOS15_g170431 = Data15_g170431.NormalOS;
				Out_NormalWS15_g170431 = Data15_g170431.NormalWS;
				Out_NormalRawOS15_g170431 = Data15_g170431.NormalRawOS;
				Out_NormalRawWS15_g170431 = Data15_g170431.NormalRawWS;
				Out_TangentOS15_g170431 = Data15_g170431.TangentOS;
				Out_ViewDirWS15_g170431 = Data15_g170431.ViewDirWS;
				Out_VertexData15_g170431 = Data15_g170431.VertexData;
				Out_MotionData15_g170431 = Data15_g170431.MotionData;
				Out_BoundsData15_g170431 = Data15_g170431.BoundsData;
				Out_RotationData15_g170431 = Data15_g170431.RotationData;
				half4 Model_VertexData224_g170430 = Out_VertexData15_g170431;
				float4 break226_g170430 = Model_VertexData224_g170430;
				float4 break33_g170432 = _gradient_vert_mode;
				float temp_output_30_0_g170432 = ( break226_g170430.x * break33_g170432.x );
				float temp_output_29_0_g170432 = ( break226_g170430.y * break33_g170432.y );
				float temp_output_31_0_g170432 = ( break226_g170430.z * break33_g170432.z );
				float temp_output_28_0_g170432 = ( temp_output_30_0_g170432 + temp_output_29_0_g170432 + temp_output_31_0_g170432 + ( break226_g170430.w * break33_g170432.w ) );
				float temp_output_211_0_g170430 = temp_output_28_0_g170432;
				float clampResult17_g170437 = clamp( temp_output_211_0_g170430 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _GradientMeshRemap.x;
				float temp_output_10_0_g170438 = ( _GradientMeshRemap.y - temp_output_7_0_g170438 );
				float temp_output_6_0_g170439 = saturate( ( ( clampResult17_g170437 - temp_output_7_0_g170438 ) / ( temp_output_10_0_g170438 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170439 = ( temp_output_6_0_g170439 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170439 = temp_output_6_0_g170439;
				#endif
				half Gradient_VertMask82_g170430 = staticSwitch14_g170439;
				half Gradient_Mask200_g170430 = Gradient_VertMask82_g170430;
				float3 lerpResult75_g170430 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170430);
				float temp_output_162_11_g170430 = Out_MultiMask4_g170433;
				half Visual_MultiMask196_g170430 = temp_output_162_11_g170430;
				float lerpResult190_g170430 = lerp( 1.0 , Visual_MultiMask196_g170430 , _GradientMultiValue);
				half Gradient_MultiMask194_g170430 = lerpResult190_g170430;
				float3 lerpResult186_g170430 = lerp( Visual_Albedo127_g170430 , ( Visual_Albedo127_g170430 * lerpResult75_g170430 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170430 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170430 = lerpResult186_g170430;
				#else
				float3 staticSwitch171_g170430 = Visual_Albedo127_g170430;
				#endif
				half3 Final_Albedo160_g170430 = staticSwitch171_g170430;
				float3 In_Albedo3_g170434 = Final_Albedo160_g170430;
				float2 In_NormalTS3_g170434 = Out_NormalTS4_g170433;
				float3 In_NormalWS3_g170434 = Out_NormalWS4_g170433;
				float4 In_Shader3_g170434 = Out_Shader4_g170433;
				float4 In_Emissive3_g170434 = Out_Emissive4_g170433;
				float3 temp_output_3_0_g170435 = Final_Albedo160_g170430;
				float dotResult20_g170435 = dot( temp_output_3_0_g170435 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170430 = dotResult20_g170435;
				float In_Grayscale3_g170434 = Final_Grayscale164_g170430;
				float clampResult180_g170430 = clamp( saturate( ( Final_Grayscale164_g170430 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170430 = clampResult180_g170430;
				float In_Luminosity3_g170434 = Final_Luminosity181_g170430;
				float In_MultiMask3_g170434 = temp_output_162_11_g170430;
				float In_AlphaClip3_g170434 = Out_AlphaClip4_g170433;
				float In_AlphaFade3_g170434 = Out_AlphaFade4_g170433;
				float3 In_Translucency3_g170434 = Out_Translucency4_g170433;
				float In_Transmission3_g170434 = Out_Transmission4_g170433;
				float In_Thickness3_g170434 = Out_Thickness4_g170433;
				float In_Diffusion3_g170434 = Out_Diffusion4_g170433;
				Data3_g170434.Dummy = In_Dummy3_g170434;
				Data3_g170434.Albedo = In_Albedo3_g170434;
				Data3_g170434.NormalTS = In_NormalTS3_g170434;
				Data3_g170434.NormalWS = In_NormalWS3_g170434;
				Data3_g170434.Shader = In_Shader3_g170434;
				Data3_g170434.Emissive= In_Emissive3_g170434;
				Data3_g170434.MultiMask = In_MultiMask3_g170434;
				Data3_g170434.Grayscale = In_Grayscale3_g170434;
				Data3_g170434.Luminosity = In_Luminosity3_g170434;
				Data3_g170434.AlphaClip = In_AlphaClip3_g170434;
				Data3_g170434.AlphaFade = In_AlphaFade3_g170434;
				Data3_g170434.Translucency = In_Translucency3_g170434;
				Data3_g170434.Transmission = In_Transmission3_g170434;
				Data3_g170434.Thickness = In_Thickness3_g170434;
				Data3_g170434.Diffusion = In_Diffusion3_g170434;
				TVEVisualData Data4_g170441 = Data3_g170434;
				float Out_Dummy4_g170441 = 0;
				float3 Out_Albedo4_g170441 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170441 = float2( 0,0 );
				float3 Out_NormalWS4_g170441 = float3( 0,0,0 );
				float4 Out_Shader4_g170441 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170441 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170441 = 0;
				float Out_Grayscale4_g170441 = 0;
				float Out_Luminosity4_g170441 = 0;
				float Out_AlphaClip4_g170441 = 0;
				float Out_AlphaFade4_g170441 = 0;
				float3 Out_Translucency4_g170441 = float3( 0,0,0 );
				float Out_Transmission4_g170441 = 0;
				float Out_Thickness4_g170441 = 0;
				float Out_Diffusion4_g170441 = 0;
				Out_Dummy4_g170441 = Data4_g170441.Dummy;
				Out_Albedo4_g170441 = Data4_g170441.Albedo;
				Out_NormalTS4_g170441 = Data4_g170441.NormalTS;
				Out_NormalWS4_g170441 = Data4_g170441.NormalWS;
				Out_Shader4_g170441 = Data4_g170441.Shader;
				Out_Emissive4_g170441= Data4_g170441.Emissive;
				Out_MultiMask4_g170441 = Data4_g170441.MultiMask;
				Out_Grayscale4_g170441 = Data4_g170441.Grayscale;
				Out_Luminosity4_g170441= Data4_g170441.Luminosity;
				Out_AlphaClip4_g170441 = Data4_g170441.AlphaClip;
				Out_AlphaFade4_g170441 = Data4_g170441.AlphaFade;
				Out_Translucency4_g170441 = Data4_g170441.Translucency;
				Out_Transmission4_g170441 = Data4_g170441.Transmission;
				Out_Thickness4_g170441 = Data4_g170441.Thickness;
				Out_Diffusion4_g170441 = Data4_g170441.Diffusion;
				half3 Visual_Albedo127_g170440 = Out_Albedo4_g170441;
				float4 vertexToFrag24_g170419 = IN.ase_texcoord13;
				half4 Interp_Data2469 = vertexToFrag24_g170419;
				float clampResult208_g170440 = clamp( (Interp_Data2469).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170440 = ( Visual_Albedo127_g170440 + ( ( Visual_Albedo127_g170440 * Visual_Albedo127_g170440 * 200.0 * _motion_highlight_color ) * clampResult208_g170440 ) );
				#else
				float3 staticSwitch214_g170440 = Visual_Albedo127_g170440;
				#endif
				half3 Final_Albedo160_g170440 = staticSwitch214_g170440;
				float3 In_Albedo3_g170442 = Final_Albedo160_g170440;
				float2 In_NormalTS3_g170442 = Out_NormalTS4_g170441;
				float3 In_NormalWS3_g170442 = Out_NormalWS4_g170441;
				float4 In_Shader3_g170442 = Out_Shader4_g170441;
				float4 In_Emissive3_g170442 = Out_Emissive4_g170441;
				float In_Grayscale3_g170442 = Out_Grayscale4_g170441;
				float In_Luminosity3_g170442 = Out_Luminosity4_g170441;
				float In_MultiMask3_g170442 = Out_MultiMask4_g170441;
				float In_AlphaClip3_g170442 = Out_AlphaClip4_g170441;
				float In_AlphaFade3_g170442 = Out_AlphaFade4_g170441;
				float3 In_Translucency3_g170442 = Out_Translucency4_g170441;
				float In_Transmission3_g170442 = Out_Transmission4_g170441;
				float In_Thickness3_g170442 = Out_Thickness4_g170441;
				float In_Diffusion3_g170442 = Out_Diffusion4_g170441;
				Data3_g170442.Dummy = In_Dummy3_g170442;
				Data3_g170442.Albedo = In_Albedo3_g170442;
				Data3_g170442.NormalTS = In_NormalTS3_g170442;
				Data3_g170442.NormalWS = In_NormalWS3_g170442;
				Data3_g170442.Shader = In_Shader3_g170442;
				Data3_g170442.Emissive= In_Emissive3_g170442;
				Data3_g170442.MultiMask = In_MultiMask3_g170442;
				Data3_g170442.Grayscale = In_Grayscale3_g170442;
				Data3_g170442.Luminosity = In_Luminosity3_g170442;
				Data3_g170442.AlphaClip = In_AlphaClip3_g170442;
				Data3_g170442.AlphaFade = In_AlphaFade3_g170442;
				Data3_g170442.Translucency = In_Translucency3_g170442;
				Data3_g170442.Transmission = In_Transmission3_g170442;
				Data3_g170442.Thickness = In_Thickness3_g170442;
				Data3_g170442.Diffusion = In_Diffusion3_g170442;
				TVEVisualData Data4_g170444 = Data3_g170442;
				float Out_Dummy4_g170444 = 0;
				float3 Out_Albedo4_g170444 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170444 = float2( 0,0 );
				float3 Out_NormalWS4_g170444 = float3( 0,0,0 );
				float4 Out_Shader4_g170444 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170444 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170444 = 0;
				float Out_Grayscale4_g170444 = 0;
				float Out_Luminosity4_g170444 = 0;
				float Out_AlphaClip4_g170444 = 0;
				float Out_AlphaFade4_g170444 = 0;
				float3 Out_Translucency4_g170444 = float3( 0,0,0 );
				float Out_Transmission4_g170444 = 0;
				float Out_Thickness4_g170444 = 0;
				float Out_Diffusion4_g170444 = 0;
				Out_Dummy4_g170444 = Data4_g170444.Dummy;
				Out_Albedo4_g170444 = Data4_g170444.Albedo;
				Out_NormalTS4_g170444 = Data4_g170444.NormalTS;
				Out_NormalWS4_g170444 = Data4_g170444.NormalWS;
				Out_Shader4_g170444 = Data4_g170444.Shader;
				Out_Emissive4_g170444= Data4_g170444.Emissive;
				Out_MultiMask4_g170444 = Data4_g170444.MultiMask;
				Out_Grayscale4_g170444 = Data4_g170444.Grayscale;
				Out_Luminosity4_g170444= Data4_g170444.Luminosity;
				Out_AlphaClip4_g170444 = Data4_g170444.AlphaClip;
				Out_AlphaFade4_g170444 = Data4_g170444.AlphaFade;
				Out_Translucency4_g170444 = Data4_g170444.Translucency;
				Out_Transmission4_g170444 = Data4_g170444.Transmission;
				Out_Thickness4_g170444 = Data4_g170444.Thickness;
				Out_Diffusion4_g170444 = Data4_g170444.Diffusion;
				half3 Visual_Albedo127_g170443 = Out_Albedo4_g170444;
				float3 temp_output_622_0_g170443 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170447) = _OverlayAlbedoTex;
				float localFilterTexture19_g170472 = ( 0.0 );
				SamplerState SamplerDefault19_g170472 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170472 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170472 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170472 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170472 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170472 = SamplerDefault19_g170472;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170472 = SamplerDefault19_g170472;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170472 = SamplerPoint19_g170472;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170472 = SamplerLow19_g170472;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170472 = SamplerMedium19_g170472;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170472 = SamplerHigh19_g170472;
				#endif
				SamplerState Sampler238_g170447 = SS19_g170472;
				float4 temp_output_6_0_g170450 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170450 = ( temp_output_6_0_g170450 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170450 = temp_output_6_0_g170450;
				#endif
				half4 Overlay_Coords639_g170443 = staticSwitch14_g170450;
				float4 temp_output_37_0_g170447 = Overlay_Coords639_g170443;
				half4 Coords238_g170447 = temp_output_37_0_g170447;
				TVEModelData Data15_g170451 = Data16_g170157;
				float Out_Dummy15_g170451 = 0;
				float3 Out_PositionOS15_g170451 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170451 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170451 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170451 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170451 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170451 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170451 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170451 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170451 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170451 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170451 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170451 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170451 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170451 = float3( 0,0,0 );
				float4 Out_VertexData15_g170451 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170451 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170451 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170451 = float4( 0,0,0,0 );
				Out_Dummy15_g170451 = Data15_g170451.Dummy;
				Out_PositionOS15_g170451 = Data15_g170451.PositionOS;
				Out_PositionWS15_g170451 = Data15_g170451.PositionWS;
				Out_PositionWO15_g170451 = Data15_g170451.PositionWO;
				Out_PositionRawOS15_g170451 = Data15_g170451.PositionRawOS;
				Out_PositionAddOS15_g170451 = Data15_g170451.PositionAddOS;
				Out_PivotOS15_g170451 = Data15_g170451.PivotOS;
				Out_PivotWS15_g170451 = Data15_g170451.PivotWS;
				Out_PivotWO15_g170451 = Data15_g170451.PivotWO;
				Out_NormalOS15_g170451 = Data15_g170451.NormalOS;
				Out_NormalWS15_g170451 = Data15_g170451.NormalWS;
				Out_NormalRawOS15_g170451 = Data15_g170451.NormalRawOS;
				Out_NormalRawWS15_g170451 = Data15_g170451.NormalRawWS;
				Out_TangentOS15_g170451 = Data15_g170451.TangentOS;
				Out_ViewDirWS15_g170451 = Data15_g170451.ViewDirWS;
				Out_VertexData15_g170451 = Data15_g170451.VertexData;
				Out_MotionData15_g170451 = Data15_g170451.MotionData;
				Out_BoundsData15_g170451 = Data15_g170451.BoundsData;
				Out_RotationData15_g170451 = Data15_g170451.RotationData;
				half3 Model_PositionWO602_g170443 = Out_PositionWO15_g170451;
				float3 temp_output_279_0_g170447 = Model_PositionWO602_g170443;
				half3 WorldPosition238_g170447 = temp_output_279_0_g170447;
				half4 localSamplePlanar2D238_g170447 = SamplePlanar2D( Texture238_g170447 , Sampler238_g170447 , Coords238_g170447 , WorldPosition238_g170447 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170447) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170447 = SS19_g170472;
				half4 Coords246_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition246_g170447 = temp_output_279_0_g170447;
				half3 Model_NormalWS712_g170443 = Out_NormalWS15_g170451;
				float3 temp_output_280_0_g170447 = Model_NormalWS712_g170443;
				half3 WorldNormal246_g170447 = temp_output_280_0_g170447;
				half4 localSamplePlanar3D246_g170447 = SamplePlanar3D( Texture246_g170447 , Sampler246_g170447 , Coords246_g170447 , WorldPosition246_g170447 , WorldNormal246_g170447 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170447) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170447 = SS19_g170472;
				float4 Coords234_g170447 = temp_output_37_0_g170447;
				float3 WorldPosition234_g170447 = temp_output_279_0_g170447;
				float4 localSampleStochastic2D234_g170447 = SampleStochastic2D( Texture234_g170447 , Sampler234_g170447 , Coords234_g170447 , WorldPosition234_g170447 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170447) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170447 = SS19_g170472;
				half4 Coords263_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition263_g170447 = temp_output_279_0_g170447;
				half3 WorldNormal263_g170447 = temp_output_280_0_g170447;
				half4 localSampleStochastic3D263_g170447 = SampleStochastic3D( Texture263_g170447 , Sampler263_g170447 , Coords263_g170447 , WorldPosition263_g170447 , WorldNormal263_g170447 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170443 = localSamplePlanar2D238_g170447;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170443 = localSamplePlanar3D246_g170447;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170443 = localSampleStochastic2D234_g170447;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170443 = localSampleStochastic3D263_g170447;
				#else
				float4 staticSwitch676_g170443 = localSamplePlanar2D238_g170447;
				#endif
				half3 Overlay_Albedo526_g170443 = (staticSwitch676_g170443).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170443 = ( temp_output_622_0_g170443 * Overlay_Albedo526_g170443 );
				#else
				float3 staticSwitch578_g170443 = temp_output_622_0_g170443;
				#endif
				float3 temp_output_6_0_g170466 = staticSwitch578_g170443;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170466 = ( temp_output_6_0_g170466 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170466 = temp_output_6_0_g170466;
				#endif
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170453) = _OverlayMaskTex;
				SamplerState Sampler276_g170453 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170454 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170454 = ( temp_output_6_0_g170454 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170454 = temp_output_6_0_g170454;
				#endif
				half4 Local_MaskCoords886_g170443 = staticSwitch14_g170454;
				float4 temp_output_37_0_g170453 = Local_MaskCoords886_g170443;
				half4 Coords276_g170453 = temp_output_37_0_g170453;
				half2 TexCoord276_g170453 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170453 = SampleMain( Texture276_g170453 , Sampler276_g170453 , Coords276_g170453 , TexCoord276_g170453 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170453) = _OverlayMaskTex;
				SamplerState Sampler275_g170453 = sampler_Linear_Repeat;
				half4 Coords275_g170453 = temp_output_37_0_g170453;
				half2 TexCoord275_g170453 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170453 = SampleExtra( Texture275_g170453 , Sampler275_g170453 , Coords275_g170453 , TexCoord275_g170453 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170443 = localSampleMain276_g170453;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170443 = localSampleExtra275_g170453;
				#else
				float4 staticSwitch894_g170443 = localSampleMain276_g170453;
				#endif
				half4 Local_MaskTex885_g170443 = staticSwitch894_g170443;
				float clampResult17_g170468 = clamp( (Local_MaskTex885_g170443).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170469 = ( _OverlayMaskRemap.y - temp_output_7_0_g170469 );
				float lerpResult898_g170443 = lerp( 1.0 , saturate( ( ( clampResult17_g170468 - temp_output_7_0_g170469 ) / ( temp_output_10_0_g170469 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask906_g170443 = lerpResult898_g170443;
				float3 temp_output_739_21_g170443 = Out_NormalWS4_g170444;
				half3 Visual_NormalWS749_g170443 = temp_output_739_21_g170443;
				float clampResult17_g170463 = clamp( saturate( (Visual_NormalWS749_g170443).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170462 = _OverlayProjRemap.x;
				float temp_output_10_0_g170462 = ( _OverlayProjRemap.y - temp_output_7_0_g170462 );
				float lerpResult842_g170443 = lerp( 1.0 , saturate( ( ( clampResult17_g170463 - temp_output_7_0_g170462 ) / ( temp_output_10_0_g170462 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170443 = lerpResult842_g170443;
				float temp_output_739_15_g170443 = Out_Luminosity4_g170444;
				half Visual_Luminosity654_g170443 = temp_output_739_15_g170443;
				float clampResult17_g170465 = clamp( Visual_Luminosity654_g170443 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170464 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170464 = ( _OverlayLumaRemap.y - temp_output_7_0_g170464 );
				float lerpResult587_g170443 = lerp( 1.0 , saturate( ( ( clampResult17_g170465 - temp_output_7_0_g170464 ) / ( temp_output_10_0_g170464 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170443 = lerpResult587_g170443;
				half4 Model_VertexMasks791_g170443 = Out_VertexData15_g170451;
				float4 break792_g170443 = Model_VertexMasks791_g170443;
				float4 break33_g170455 = _overlay_vert_mode;
				float temp_output_30_0_g170455 = ( break792_g170443.x * break33_g170455.x );
				float temp_output_29_0_g170455 = ( break792_g170443.y * break33_g170455.y );
				float temp_output_31_0_g170455 = ( break792_g170443.z * break33_g170455.z );
				float temp_output_28_0_g170455 = ( temp_output_30_0_g170455 + temp_output_29_0_g170455 + temp_output_31_0_g170455 + ( break792_g170443.w * break33_g170455.w ) );
				float clampResult17_g170456 = clamp( temp_output_28_0_g170455 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170459 = ( _OverlayMeshRemap.y - temp_output_7_0_g170459 );
				float lerpResult879_g170443 = lerp( 1.0 , saturate( ( ( clampResult17_g170456 - temp_output_7_0_g170459 ) / ( temp_output_10_0_g170459 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170467 = lerpResult879_g170443;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170467 = ( temp_output_6_0_g170467 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170467 = temp_output_6_0_g170467;
				#endif
				float temp_output_831_0_g170443 = staticSwitch14_g170467;
				half Overlay_VertMask801_g170443 = temp_output_831_0_g170443;
				half Overlay_MaskNoise427_g170443 = 1.0;
				TVEGlobalData Data15_g170445 = Data204_g170159;
				float Out_Dummy15_g170445 = 0;
				float4 Out_CoatParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170445 = float4( 0,0,0,0 );
				Out_Dummy15_g170445 = Data15_g170445.Dummy;
				Out_CoatParams15_g170445 = Data15_g170445.CoatParams;
				Out_PaintParams15_g170445 = Data15_g170445.PaintParams;
				Out_GlowParams15_g170445 = Data15_g170445.GlowParams;
				Out_AtmoParams15_g170445= Data15_g170445.AtmoParams;
				Out_FadeParams15_g170445= Data15_g170445.FadeParams;
				Out_FormParams15_g170445 = Data15_g170445.FormParams;
				Out_LandParams15_g170445 = Data15_g170445.LandParams;
				Out_WindParams15_g170445 = Data15_g170445.WindParams;
				Out_PushParams15_g170445 = Data15_g170445.PushParams;
				half4 Global_AtmoParams516_g170443 = Out_AtmoParams15_g170445;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170443 = (Global_AtmoParams516_g170443).z;
				#else
				float staticSwitch705_g170443 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170443 = staticSwitch705_g170443;
				half Custom_Mask646_g170443 = 1.0;
				float temp_output_7_0_g170470 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170470 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170470 );
				half Overlay_Mask494_g170443 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g170443 * Overlay_MaskProj457_g170443 * Overlay_MaskLuma438_g170443 * Overlay_VertMask801_g170443 * Overlay_MaskNoise427_g170443 * Overlay_MaskGlobal429_g170443 * Custom_Mask646_g170443 ) - temp_output_7_0_g170470 ) / ( temp_output_10_0_g170470 + 0.0001 ) ) );
				float3 lerpResult467_g170443 = lerp( Visual_Albedo127_g170443 , staticSwitch14_g170466 , Overlay_Mask494_g170443);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170443 = lerpResult467_g170443;
				#else
				float3 staticSwitch577_g170443 = Visual_Albedo127_g170443;
				#endif
				half3 Final_Albedo493_g170443 = staticSwitch577_g170443;
				float3 In_Albedo3_g170446 = Final_Albedo493_g170443;
				half2 Visual_NormalTS535_g170443 = Out_NormalTS4_g170444;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170452) = _OverlayNormalTex;
				float localFilterTexture29_g170471 = ( 0.0 );
				SamplerState SamplerDefault29_g170471 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170471 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170471 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170471 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170471 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170471 = SamplerDefault29_g170471;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170471 = SamplerDefault29_g170471;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170471 = SamplerPoint29_g170471;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170471 = SamplerLow29_g170471;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170471 = SamplerMedium29_g170471;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170471 = SamplerHigh29_g170471;
				#endif
				SamplerState Sampler238_g170452 = SS29_g170471;
				float4 temp_output_37_0_g170452 = Overlay_Coords639_g170443;
				half4 Coords238_g170452 = temp_output_37_0_g170452;
				float3 temp_output_279_0_g170452 = Model_PositionWO602_g170443;
				half3 WorldPosition238_g170452 = temp_output_279_0_g170452;
				half4 localSamplePlanar2D238_g170452 = SamplePlanar2D( Texture238_g170452 , Sampler238_g170452 , Coords238_g170452 , WorldPosition238_g170452 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170452) = _OverlayNormalTex;
				SamplerState Sampler246_g170452 = SS29_g170471;
				half4 Coords246_g170452 = temp_output_37_0_g170452;
				half3 WorldPosition246_g170452 = temp_output_279_0_g170452;
				float3 temp_output_280_0_g170452 = Model_NormalWS712_g170443;
				half3 WorldNormal246_g170452 = temp_output_280_0_g170452;
				half4 localSamplePlanar3D246_g170452 = SamplePlanar3D( Texture246_g170452 , Sampler246_g170452 , Coords246_g170452 , WorldPosition246_g170452 , WorldNormal246_g170452 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170452) = _OverlayNormalTex;
				SamplerState Sampler234_g170452 = SS29_g170471;
				float4 Coords234_g170452 = temp_output_37_0_g170452;
				float3 WorldPosition234_g170452 = temp_output_279_0_g170452;
				float4 localSampleStochastic2D234_g170452 = SampleStochastic2D( Texture234_g170452 , Sampler234_g170452 , Coords234_g170452 , WorldPosition234_g170452 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170452) = _OverlayNormalTex;
				SamplerState Sampler263_g170452 = SS29_g170471;
				half4 Coords263_g170452 = temp_output_37_0_g170452;
				half3 WorldPosition263_g170452 = temp_output_279_0_g170452;
				half3 WorldNormal263_g170452 = temp_output_280_0_g170452;
				half4 localSampleStochastic3D263_g170452 = SampleStochastic3D( Texture263_g170452 , Sampler263_g170452 , Coords263_g170452 , WorldPosition263_g170452 , WorldNormal263_g170452 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170443 = localSamplePlanar2D238_g170452;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170443 = localSamplePlanar3D246_g170452;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170443 = localSampleStochastic2D234_g170452;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170443 = localSampleStochastic3D263_g170452;
				#else
				float4 staticSwitch686_g170443 = localSamplePlanar2D238_g170452;
				#endif
				half4 Normal_Packed45_g170449 = staticSwitch686_g170443;
				float2 appendResult58_g170449 = (float2(( (Normal_Packed45_g170449).x * (Normal_Packed45_g170449).w ) , (Normal_Packed45_g170449).y));
				half2 Normal_Default50_g170449 = appendResult58_g170449;
				half2 Normal_ASTC41_g170449 = (Normal_Packed45_g170449).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170449 = Normal_ASTC41_g170449;
				#else
				float2 staticSwitch38_g170449 = Normal_Default50_g170449;
				#endif
				half2 Normal_NO_DTX544_g170449 = (Normal_Packed45_g170449).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170449 = Normal_NO_DTX544_g170449;
				#else
				float2 staticSwitch37_g170449 = staticSwitch38_g170449;
				#endif
				half2 Normal_Planar45_g170448 = (staticSwitch37_g170449*2.0 + -1.0);
				float2 break71_g170448 = Normal_Planar45_g170448;
				float3 appendResult72_g170448 = (float3(break71_g170448.x , 0.0 , break71_g170448.y));
				half2 Overlay_Normal528_g170443 = (mul( ase_worldToTangent, appendResult72_g170448 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170443 = Overlay_Normal528_g170443;
				#else
				float2 staticSwitch579_g170443 = Visual_NormalTS535_g170443;
				#endif
				float2 lerpResult551_g170443 = lerp( Visual_NormalTS535_g170443 , ( staticSwitch579_g170443 * _OverlayNormalValue ) , Overlay_Mask494_g170443);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170443 = lerpResult551_g170443;
				#else
				float2 staticSwitch583_g170443 = Visual_NormalTS535_g170443;
				#endif
				half2 Final_NormalTS499_g170443 = staticSwitch583_g170443;
				float2 In_NormalTS3_g170446 = Final_NormalTS499_g170443;
				float3 In_NormalWS3_g170446 = temp_output_739_21_g170443;
				half4 Visual_Masks536_g170443 = Out_Shader4_g170444;
				float4 appendResult585_g170443 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170443 = lerp( Visual_Masks536_g170443 , appendResult585_g170443 , Overlay_Mask494_g170443);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170443 = lerpResult584_g170443;
				#else
				float4 staticSwitch586_g170443 = Visual_Masks536_g170443;
				#endif
				half4 Final_Masks482_g170443 = staticSwitch586_g170443;
				float4 In_Shader3_g170446 = Final_Masks482_g170443;
				float4 In_Emissive3_g170446 = Out_Emissive4_g170444;
				float temp_output_739_12_g170443 = Out_Grayscale4_g170444;
				float In_Grayscale3_g170446 = temp_output_739_12_g170443;
				float In_Luminosity3_g170446 = temp_output_739_15_g170443;
				float In_MultiMask3_g170446 = Out_MultiMask4_g170444;
				float In_AlphaClip3_g170446 = Out_AlphaClip4_g170444;
				float In_AlphaFade3_g170446 = Out_AlphaFade4_g170444;
				float3 In_Translucency3_g170446 = Out_Translucency4_g170444;
				half Visual_Transmission699_g170443 = Out_Transmission4_g170444;
				float lerpResult746_g170443 = lerp( Visual_Transmission699_g170443 , ( Visual_Transmission699_g170443 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170443 * Overlay_MaskNoise427_g170443 * Overlay_MaskGlobal429_g170443 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170443 = lerpResult746_g170443;
				#else
				float staticSwitch703_g170443 = Visual_Transmission699_g170443;
				#endif
				half Final_Transmission702_g170443 = staticSwitch703_g170443;
				float In_Transmission3_g170446 = Final_Transmission702_g170443;
				float In_Thickness3_g170446 = Out_Thickness4_g170444;
				float In_Diffusion3_g170446 = Out_Diffusion4_g170444;
				Data3_g170446.Dummy = In_Dummy3_g170446;
				Data3_g170446.Albedo = In_Albedo3_g170446;
				Data3_g170446.NormalTS = In_NormalTS3_g170446;
				Data3_g170446.NormalWS = In_NormalWS3_g170446;
				Data3_g170446.Shader = In_Shader3_g170446;
				Data3_g170446.Emissive= In_Emissive3_g170446;
				Data3_g170446.MultiMask = In_MultiMask3_g170446;
				Data3_g170446.Grayscale = In_Grayscale3_g170446;
				Data3_g170446.Luminosity = In_Luminosity3_g170446;
				Data3_g170446.AlphaClip = In_AlphaClip3_g170446;
				Data3_g170446.AlphaFade = In_AlphaFade3_g170446;
				Data3_g170446.Translucency = In_Translucency3_g170446;
				Data3_g170446.Transmission = In_Transmission3_g170446;
				Data3_g170446.Thickness = In_Thickness3_g170446;
				Data3_g170446.Diffusion = In_Diffusion3_g170446;
				TVEVisualData Data4_g170492 = Data3_g170446;
				float Out_Dummy4_g170492 = 0;
				float3 Out_Albedo4_g170492 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170492 = float2( 0,0 );
				float3 Out_NormalWS4_g170492 = float3( 0,0,0 );
				float4 Out_Shader4_g170492 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170492 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170492 = 0;
				float Out_Grayscale4_g170492 = 0;
				float Out_Luminosity4_g170492 = 0;
				float Out_AlphaClip4_g170492 = 0;
				float Out_AlphaFade4_g170492 = 0;
				float3 Out_Translucency4_g170492 = float3( 0,0,0 );
				float Out_Transmission4_g170492 = 0;
				float Out_Thickness4_g170492 = 0;
				float Out_Diffusion4_g170492 = 0;
				Out_Dummy4_g170492 = Data4_g170492.Dummy;
				Out_Albedo4_g170492 = Data4_g170492.Albedo;
				Out_NormalTS4_g170492 = Data4_g170492.NormalTS;
				Out_NormalWS4_g170492 = Data4_g170492.NormalWS;
				Out_Shader4_g170492 = Data4_g170492.Shader;
				Out_Emissive4_g170492= Data4_g170492.Emissive;
				Out_MultiMask4_g170492 = Data4_g170492.MultiMask;
				Out_Grayscale4_g170492 = Data4_g170492.Grayscale;
				Out_Luminosity4_g170492= Data4_g170492.Luminosity;
				Out_AlphaClip4_g170492 = Data4_g170492.AlphaClip;
				Out_AlphaFade4_g170492 = Data4_g170492.AlphaFade;
				Out_Translucency4_g170492 = Data4_g170492.Translucency;
				Out_Transmission4_g170492 = Data4_g170492.Transmission;
				Out_Thickness4_g170492 = Data4_g170492.Thickness;
				Out_Diffusion4_g170492 = Data4_g170492.Diffusion;
				float3 temp_output_297_0_g170481 = Out_Albedo4_g170492;
				float3 In_Albedo3_g170493 = temp_output_297_0_g170481;
				float2 In_NormalTS3_g170493 = Out_NormalTS4_g170492;
				float3 In_NormalWS3_g170493 = Out_NormalWS4_g170492;
				float4 In_Shader3_g170493 = Out_Shader4_g170492;
				float4 temp_cast_6 = (0.0).xxxx;
				half4 Visual_Emissive255_g170481 = Out_Emissive4_g170492;
				TVEModelData Data15_g170482 = Data16_g170157;
				float Out_Dummy15_g170482 = 0;
				float3 Out_PositionOS15_g170482 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170482 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170482 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170482 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170482 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170482 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170482 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170482 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170482 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170482 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170482 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170482 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170482 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170482 = float3( 0,0,0 );
				float4 Out_VertexData15_g170482 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170482 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170482 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170482 = float4( 0,0,0,0 );
				Out_Dummy15_g170482 = Data15_g170482.Dummy;
				Out_PositionOS15_g170482 = Data15_g170482.PositionOS;
				Out_PositionWS15_g170482 = Data15_g170482.PositionWS;
				Out_PositionWO15_g170482 = Data15_g170482.PositionWO;
				Out_PositionRawOS15_g170482 = Data15_g170482.PositionRawOS;
				Out_PositionAddOS15_g170482 = Data15_g170482.PositionAddOS;
				Out_PivotOS15_g170482 = Data15_g170482.PivotOS;
				Out_PivotWS15_g170482 = Data15_g170482.PivotWS;
				Out_PivotWO15_g170482 = Data15_g170482.PivotWO;
				Out_NormalOS15_g170482 = Data15_g170482.NormalOS;
				Out_NormalWS15_g170482 = Data15_g170482.NormalWS;
				Out_NormalRawOS15_g170482 = Data15_g170482.NormalRawOS;
				Out_NormalRawWS15_g170482 = Data15_g170482.NormalRawWS;
				Out_TangentOS15_g170482 = Data15_g170482.TangentOS;
				Out_ViewDirWS15_g170482 = Data15_g170482.ViewDirWS;
				Out_VertexData15_g170482 = Data15_g170482.VertexData;
				Out_MotionData15_g170482 = Data15_g170482.MotionData;
				Out_BoundsData15_g170482 = Data15_g170482.BoundsData;
				Out_RotationData15_g170482 = Data15_g170482.RotationData;
				half4 Model_VertexMasks216_g170481 = Out_VertexData15_g170482;
				float4 break251_g170481 = Model_VertexMasks216_g170481;
				float4 break33_g170486 = _emissive_vert_mode;
				float temp_output_30_0_g170486 = ( break251_g170481.x * break33_g170486.x );
				float temp_output_29_0_g170486 = ( break251_g170481.y * break33_g170486.y );
				float temp_output_31_0_g170486 = ( break251_g170481.z * break33_g170486.z );
				float temp_output_28_0_g170486 = ( temp_output_30_0_g170486 + temp_output_29_0_g170486 + temp_output_31_0_g170486 + ( break251_g170481.w * break33_g170486.w ) );
				float clampResult17_g170485 = clamp( temp_output_28_0_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170489 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170489 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170489 );
				float lerpResult303_g170481 = lerp( 1.0 , saturate( ( ( clampResult17_g170485 - temp_output_7_0_g170489 ) / ( temp_output_10_0_g170489 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170495 = lerpResult303_g170481;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170495 = ( temp_output_6_0_g170495 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170495 = temp_output_6_0_g170495;
				#endif
				float temp_output_263_0_g170481 = staticSwitch14_g170495;
				half Emissive_MeshMask221_g170481 = temp_output_263_0_g170481;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170484) = _EmissiveMaskTex;
				SamplerState Sampler276_g170484 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170490 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170490 = ( temp_output_6_0_g170490 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170490 = temp_output_6_0_g170490;
				#endif
				half4 Emissive_Coords167_g170481 = staticSwitch14_g170490;
				float4 temp_output_37_0_g170484 = Emissive_Coords167_g170481;
				half4 Coords276_g170484 = temp_output_37_0_g170484;
				half2 TexCoord276_g170484 = IN.ase_texcoord9.xy;
				half4 localSampleMain276_g170484 = SampleMain( Texture276_g170484 , Sampler276_g170484 , Coords276_g170484 , TexCoord276_g170484 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170484) = _EmissiveMaskTex;
				SamplerState Sampler275_g170484 = sampler_Linear_Repeat;
				half4 Coords275_g170484 = temp_output_37_0_g170484;
				half2 TexCoord275_g170484 = IN.ase_texcoord10.xy;
				half4 localSampleExtra275_g170484 = SampleExtra( Texture275_g170484 , Sampler275_g170484 , Coords275_g170484 , TexCoord275_g170484 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170481 = localSampleMain276_g170484;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170481 = localSampleExtra275_g170484;
				#else
				float4 staticSwitch176_g170481 = localSampleMain276_g170484;
				#endif
				half4 Emissive_MaskTex201_g170481 = staticSwitch176_g170481;
				float clampResult17_g170488 = clamp( (Emissive_MaskTex201_g170481).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170487 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170487 );
				float lerpResult302_g170481 = lerp( 1.0 , saturate( ( ( clampResult17_g170488 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170481 = lerpResult302_g170481;
				float temp_output_279_0_g170481 = ( Emissive_MeshMask221_g170481 * Emissive_Mask103_g170481 );
				float3 appendResult293_g170481 = (float3(temp_output_279_0_g170481 , temp_output_279_0_g170481 , temp_output_279_0_g170481));
				half3 Local_EmissiveColor278_g170481 = appendResult293_g170481;
				float3 temp_cast_7 = (1.0).xxx;
				TVEGlobalData Data15_g170483 = Data204_g170159;
				float Out_Dummy15_g170483 = 0;
				float4 Out_CoatParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170483 = float4( 0,0,0,0 );
				Out_Dummy15_g170483 = Data15_g170483.Dummy;
				Out_CoatParams15_g170483 = Data15_g170483.CoatParams;
				Out_PaintParams15_g170483 = Data15_g170483.PaintParams;
				Out_GlowParams15_g170483 = Data15_g170483.GlowParams;
				Out_AtmoParams15_g170483= Data15_g170483.AtmoParams;
				Out_FadeParams15_g170483= Data15_g170483.FadeParams;
				Out_FormParams15_g170483 = Data15_g170483.FormParams;
				Out_LandParams15_g170483 = Data15_g170483.LandParams;
				Out_WindParams15_g170483 = Data15_g170483.WindParams;
				Out_PushParams15_g170483 = Data15_g170483.PushParams;
				half4 Global_GlowParams179_g170481 = Out_GlowParams15_g170483;
				float3 lerpResult299_g170481 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170481).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170481 = lerpResult299_g170481;
				#else
				float3 staticSwitch228_g170481 = temp_cast_7;
				#endif
				half3 Emissive_GlobalMask248_g170481 = staticSwitch228_g170481;
				half3 Local_EmissiveValue88_g170481 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170481 );
				half3 Emissive_Blend260_g170481 = ( ( (Visual_Emissive255_g170481).xyz * Local_EmissiveColor278_g170481 ) * Local_EmissiveValue88_g170481 );
				float3 temp_output_3_0_g170491 = Emissive_Blend260_g170481;
				float temp_output_15_0_g170491 = _emissive_power_value;
				float3 temp_output_23_0_g170491 = ( temp_output_3_0_g170491 * temp_output_15_0_g170491 );
				float4 appendResult295_g170481 = (float4(temp_output_23_0_g170491 , Emissive_Mask103_g170481));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170481 = appendResult295_g170481;
				#else
				float4 staticSwitch129_g170481 = temp_cast_6;
				#endif
				half4 Final_Emissive184_g170481 = staticSwitch129_g170481;
				float4 In_Emissive3_g170493 = Final_Emissive184_g170481;
				float In_Grayscale3_g170493 = Out_Grayscale4_g170492;
				float In_Luminosity3_g170493 = Out_Luminosity4_g170492;
				float temp_output_297_11_g170481 = Out_MultiMask4_g170492;
				float In_MultiMask3_g170493 = temp_output_297_11_g170481;
				float In_AlphaClip3_g170493 = Out_AlphaClip4_g170492;
				float In_AlphaFade3_g170493 = Out_AlphaFade4_g170492;
				float3 In_Translucency3_g170493 = Out_Translucency4_g170492;
				float In_Transmission3_g170493 = Out_Transmission4_g170492;
				float In_Thickness3_g170493 = Out_Thickness4_g170492;
				float In_Diffusion3_g170493 = Out_Diffusion4_g170492;
				Data3_g170493.Dummy = In_Dummy3_g170493;
				Data3_g170493.Albedo = In_Albedo3_g170493;
				Data3_g170493.NormalTS = In_NormalTS3_g170493;
				Data3_g170493.NormalWS = In_NormalWS3_g170493;
				Data3_g170493.Shader = In_Shader3_g170493;
				Data3_g170493.Emissive= In_Emissive3_g170493;
				Data3_g170493.MultiMask = In_MultiMask3_g170493;
				Data3_g170493.Grayscale = In_Grayscale3_g170493;
				Data3_g170493.Luminosity = In_Luminosity3_g170493;
				Data3_g170493.AlphaClip = In_AlphaClip3_g170493;
				Data3_g170493.AlphaFade = In_AlphaFade3_g170493;
				Data3_g170493.Translucency = In_Translucency3_g170493;
				Data3_g170493.Transmission = In_Transmission3_g170493;
				Data3_g170493.Thickness = In_Thickness3_g170493;
				Data3_g170493.Diffusion = In_Diffusion3_g170493;
				TVEVisualData Data4_g170517 = Data3_g170493;
				float Out_Dummy4_g170517 = 0;
				float3 Out_Albedo4_g170517 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170517 = float2( 0,0 );
				float3 Out_NormalWS4_g170517 = float3( 0,0,0 );
				float4 Out_Shader4_g170517 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170517 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170517 = 0;
				float Out_Grayscale4_g170517 = 0;
				float Out_Luminosity4_g170517 = 0;
				float Out_AlphaClip4_g170517 = 0;
				float Out_AlphaFade4_g170517 = 0;
				float3 Out_Translucency4_g170517 = float3( 0,0,0 );
				float Out_Transmission4_g170517 = 0;
				float Out_Thickness4_g170517 = 0;
				float Out_Diffusion4_g170517 = 0;
				Out_Dummy4_g170517 = Data4_g170517.Dummy;
				Out_Albedo4_g170517 = Data4_g170517.Albedo;
				Out_NormalTS4_g170517 = Data4_g170517.NormalTS;
				Out_NormalWS4_g170517 = Data4_g170517.NormalWS;
				Out_Shader4_g170517 = Data4_g170517.Shader;
				Out_Emissive4_g170517= Data4_g170517.Emissive;
				Out_MultiMask4_g170517 = Data4_g170517.MultiMask;
				Out_Grayscale4_g170517 = Data4_g170517.Grayscale;
				Out_Luminosity4_g170517= Data4_g170517.Luminosity;
				Out_AlphaClip4_g170517 = Data4_g170517.AlphaClip;
				Out_AlphaFade4_g170517 = Data4_g170517.AlphaFade;
				Out_Translucency4_g170517 = Data4_g170517.Translucency;
				Out_Transmission4_g170517 = Data4_g170517.Transmission;
				Out_Thickness4_g170517 = Data4_g170517.Thickness;
				Out_Diffusion4_g170517 = Data4_g170517.Diffusion;
				half3 Visual_Albedo199_g170516 = Out_Albedo4_g170517;
				half3 Final_Albedo312_g170516 = Visual_Albedo199_g170516;
				float3 In_Albedo3_g170518 = Final_Albedo312_g170516;
				float2 In_NormalTS3_g170518 = Out_NormalTS4_g170517;
				float3 In_NormalWS3_g170518 = Out_NormalWS4_g170517;
				float4 In_Shader3_g170518 = Out_Shader4_g170517;
				float4 In_Emissive3_g170518 = Out_Emissive4_g170517;
				float In_Grayscale3_g170518 = Out_Grayscale4_g170517;
				float In_Luminosity3_g170518 = Out_Luminosity4_g170517;
				float temp_output_301_11_g170516 = Out_MultiMask4_g170517;
				float In_MultiMask3_g170518 = temp_output_301_11_g170516;
				float In_AlphaClip3_g170518 = Out_AlphaClip4_g170517;
				float In_AlphaFade3_g170518 = Out_AlphaFade4_g170517;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170516 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170516 );
				half Visual_Transmission138_g170516 = Out_Transmission4_g170517;
				half Subsurface_Value268_g170516 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170520 = Data204_g170159;
				float Out_Dummy15_g170520 = 0;
				float4 Out_CoatParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170520 = float4( 0,0,0,0 );
				Out_Dummy15_g170520 = Data15_g170520.Dummy;
				Out_CoatParams15_g170520 = Data15_g170520.CoatParams;
				Out_PaintParams15_g170520 = Data15_g170520.PaintParams;
				Out_GlowParams15_g170520 = Data15_g170520.GlowParams;
				Out_AtmoParams15_g170520= Data15_g170520.AtmoParams;
				Out_FadeParams15_g170520= Data15_g170520.FadeParams;
				Out_FormParams15_g170520 = Data15_g170520.FormParams;
				Out_LandParams15_g170520 = Data15_g170520.LandParams;
				Out_WindParams15_g170520 = Data15_g170520.WindParams;
				Out_PushParams15_g170520 = Data15_g170520.PushParams;
				half4 Global_GlowParams373_g170516 = Out_GlowParams15_g170520;
				float lerpResult403_g170516 = lerp( 1.0 , saturate( (Global_GlowParams373_g170516).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170516 = lerpResult403_g170516;
				#else
				float staticSwitch367_g170516 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170516 = staticSwitch367_g170516;
				half Visual_MultiMask292_g170516 = temp_output_301_11_g170516;
				float lerpResult293_g170516 = lerp( 1.0 , Visual_MultiMask292_g170516 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170516 = lerpResult293_g170516;
				half Custom_Mask363_g170516 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170516 = ( Visual_Transmission138_g170516 * Subsurface_Value268_g170516 * Subsurface_GlobalMask369_g170516 * Subsurface_MultiMask296_g170516 * Custom_Mask363_g170516 );
				#else
				float staticSwitch345_g170516 = 0.0;
				#endif
				half Final_Transmission269_g170516 = staticSwitch345_g170516;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170516 = ( Subsurface_Color264_g170516 * Final_Transmission269_g170516 * 10.0 );
				#else
				float3 staticSwitch348_g170516 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170516 = staticSwitch348_g170516;
				float3 In_Translucency3_g170518 = Final_Translucency254_g170516;
				float In_Transmission3_g170518 = Final_Transmission269_g170516;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170516 = 0.0;
				#else
				float staticSwitch351_g170516 = 1.0;
				#endif
				half Final_Thickness275_g170516 = staticSwitch351_g170516;
				float In_Thickness3_g170518 = Final_Thickness275_g170516;
				float Final_Diffusion340_g170516 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170518 = Final_Diffusion340_g170516;
				Data3_g170518.Dummy = In_Dummy3_g170518;
				Data3_g170518.Albedo = In_Albedo3_g170518;
				Data3_g170518.NormalTS = In_NormalTS3_g170518;
				Data3_g170518.NormalWS = In_NormalWS3_g170518;
				Data3_g170518.Shader = In_Shader3_g170518;
				Data3_g170518.Emissive= In_Emissive3_g170518;
				Data3_g170518.MultiMask = In_MultiMask3_g170518;
				Data3_g170518.Grayscale = In_Grayscale3_g170518;
				Data3_g170518.Luminosity = In_Luminosity3_g170518;
				Data3_g170518.AlphaClip = In_AlphaClip3_g170518;
				Data3_g170518.AlphaFade = In_AlphaFade3_g170518;
				Data3_g170518.Translucency = In_Translucency3_g170518;
				Data3_g170518.Transmission = In_Transmission3_g170518;
				Data3_g170518.Thickness = In_Thickness3_g170518;
				Data3_g170518.Diffusion = In_Diffusion3_g170518;
				TVEVisualData Data4_g170529 = Data3_g170518;
				float Out_Dummy4_g170529 = 0;
				float3 Out_Albedo4_g170529 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170529 = float2( 0,0 );
				float3 Out_NormalWS4_g170529 = float3( 0,0,0 );
				float4 Out_Shader4_g170529 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170529 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170529 = 0;
				float Out_Grayscale4_g170529 = 0;
				float Out_Luminosity4_g170529 = 0;
				float Out_AlphaClip4_g170529 = 0;
				float Out_AlphaFade4_g170529 = 0;
				float3 Out_Translucency4_g170529 = float3( 0,0,0 );
				float Out_Transmission4_g170529 = 0;
				float Out_Thickness4_g170529 = 0;
				float Out_Diffusion4_g170529 = 0;
				Out_Dummy4_g170529 = Data4_g170529.Dummy;
				Out_Albedo4_g170529 = Data4_g170529.Albedo;
				Out_NormalTS4_g170529 = Data4_g170529.NormalTS;
				Out_NormalWS4_g170529 = Data4_g170529.NormalWS;
				Out_Shader4_g170529 = Data4_g170529.Shader;
				Out_Emissive4_g170529= Data4_g170529.Emissive;
				Out_MultiMask4_g170529 = Data4_g170529.MultiMask;
				Out_Grayscale4_g170529 = Data4_g170529.Grayscale;
				Out_Luminosity4_g170529= Data4_g170529.Luminosity;
				Out_AlphaClip4_g170529 = Data4_g170529.AlphaClip;
				Out_AlphaFade4_g170529 = Data4_g170529.AlphaFade;
				Out_Translucency4_g170529 = Data4_g170529.Translucency;
				Out_Transmission4_g170529 = Data4_g170529.Transmission;
				Out_Thickness4_g170529 = Data4_g170529.Thickness;
				Out_Diffusion4_g170529 = Data4_g170529.Diffusion;
				half3 Input_Albedo24_g170528 = Out_Albedo4_g170529;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170528 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g170528 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g170528 = staticSwitch22_g170528;
				float4 break24_g170523 = Out_Shader4_g170529;
				half Metallic95_g170523 = break24_g170523.x;
				half Input_Metallic25_g170528 = Metallic95_g170523;
				half OneMinusReflectivity31_g170528 = ( (ColorSpaceDielectricSpec23_g170528).w - ( (ColorSpaceDielectricSpec23_g170528).w * Input_Metallic25_g170528 ) );
				
				float3 appendResult23_g170523 = (float3(Out_NormalTS4_g170529 , 1.0));
				float3 temp_output_13_0_g170527 = appendResult23_g170523;
				float3 temp_output_33_0_g170527 = ( temp_output_13_0_g170527 * _render_normal );
				float3 switchResult12_g170527 = (((ase_vface>0)?(temp_output_13_0_g170527):(temp_output_33_0_g170527)));
				
				float3 lerpResult28_g170528 = lerp( (ColorSpaceDielectricSpec23_g170528).xyz , Input_Albedo24_g170528 , Input_Metallic25_g170528);
				half RenderSpec102_g170523 = _RenderSpecular;
				
				float localCustomAlphaClip19_g170530 = ( 0.0 );
				float temp_output_3_0_g170530 = Out_AlphaClip4_g170529;
				float Alpha19_g170530 = temp_output_3_0_g170530;
				float temp_output_15_0_g170530 = 0.0;
				float Treshold19_g170530 = temp_output_15_0_g170530;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170530 - Treshold19_g170530);
				#endif
				#else
				clip(Alpha19_g170530 - Treshold19_g170530);
				#endif
				#endif
				
				o.Albedo = ( Input_Albedo24_g170528 * OneMinusReflectivity31_g170528 );
				o.Normal = switchResult12_g170527;
				o.Emission = (Out_Emissive4_g170529).xyz;

				#if defined(ASE_LIGHTING_SIMPLE)
					o.Specular = 0;
					o.Gloss = 0;
				#else
					#if defined(_SPECULAR_SETUP)
						o.Specular = ( lerpResult28_g170528 * RenderSpec102_g170523 );
					#else
						o.Metallic = 0;
					#endif
					o.Occlusion = break24_g170523.y;
					o.Smoothness = break24_g170523.w;
				#endif

				o.Alpha = saturate( ( Alpha19_g170530 * Out_AlphaFade4_g170529 ) );
				float AlphaClipThreshold = 0.5;
				float3 Transmission = 1;
				float3 Translucency = Out_Translucency4_g170529;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				#ifndef USING_DIRECTIONAL_LIGHT
					fixed3 lightDir = normalize(UnityWorldSpaceLightDir(worldPos));
				#else
					fixed3 lightDir = _WorldSpaceLightPos0.xyz;
				#endif

				fixed4 c = 0;
				float3 worldN;
				worldN.x = dot(IN.tSpace0.xyz, o.Normal);
				worldN.y = dot(IN.tSpace1.xyz, o.Normal);
				worldN.z = dot(IN.tSpace2.xyz, o.Normal);
				worldN = normalize(worldN);
				o.Normal = worldN;

				UnityGI gi;
				UNITY_INITIALIZE_OUTPUT(UnityGI, gi);
				gi.indirect.diffuse = 0;
				gi.indirect.specular = 0;
				gi.light.color = _LightColor0.rgb;
				gi.light.dir = lightDir;
				gi.light.color *= atten;

				#if defined(ASE_LIGHTING_SIMPLE)
					#if defined(_SPECULAR_SETUP)
						c += LightingBlinnPhong (o, worldViewDir, gi);
					#else
						c += LightingLambert( o, gi );
					#endif
				#else
					#if defined(_SPECULAR_SETUP)
						c += LightingStandardSpecular (o, worldViewDir, gi);
					#else
						c += LightingStandard( o, worldViewDir, gi );
					#endif
				#endif

				#ifdef ASE_TRANSMISSION
				{
					float shadow = _TransmissionShadow;
					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 transmission = max(0 , -dot(o.Normal, gi.light.dir)) * lightAtten * Transmission;
					c.rgb += o.Albedo * transmission;
				}
				#endif

				#ifdef ASE_TRANSLUCENCY
				{
					float shadow = _TransShadow;
					float normal = _TransNormal;
					float scattering = _TransScattering;
					float direct = _TransDirect;
					float ambient = _TransAmbient;
					float strength = _TransStrength;

					#ifdef DIRECTIONAL
						float3 lightAtten = lerp( _LightColor0.rgb, gi.light.color, shadow );
					#else
						float3 lightAtten = gi.light.color;
					#endif
					half3 lightDir = gi.light.dir + o.Normal * normal;
					half transVdotL = pow( saturate( dot( worldViewDir, -lightDir ) ), scattering );
					half3 translucency = lightAtten * (transVdotL * direct + gi.indirect.diffuse * ambient) * Translucency;
					c.rgb += o.Albedo * translucency * strength;
				}
				#endif

				//#ifdef ASE_REFRACTION
				//	float4 projScreenPos = ScreenPos / ScreenPos.w;
				//	float3 refractionOffset = ( RefractionIndex - 1.0 ) * mul( UNITY_MATRIX_V, WorldNormal ).xyz * ( 1.0 - dot( WorldNormal, WorldViewDirection ) );
				//	projScreenPos.xy += refractionOffset.xy;
				//	float3 refraction = UNITY_SAMPLE_SCREENSPACE_TEXTURE( _GrabTexture, projScreenPos ) * RefractionColor;
				//	color.rgb = lerp( refraction, color.rgb, color.a );
				//	color.a = 1;
				//#endif

				#ifdef ASE_FOG
					UNITY_APPLY_FOG(IN.fogCoord, c);
				#endif
				return c;
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "Meta"
			Tags { "LightMode"="Meta" }
			Cull Off

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define ASE_TRANSLUCENCY 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _SPECULAR_SETUP 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
			#pragma shader_feature EDITOR_VISUALIZATION
			#ifndef UNITY_PASS_META
				#define UNITY_PASS_META
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"
			#include "UnityMetaPass.cginc"

			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};
			struct v2f {
				#if UNITY_VERSION >= 201810
					UNITY_POSITION(pos);
				#else
					float4 pos : SV_POSITION;
				#endif
				#ifdef EDITOR_VISUALIZATION
					float2 vizUV : TEXCOORD1;
					float4 lightCoord : TEXCOORD2;
				#endif
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_color : COLOR;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half4 _OverlayColoringOn;
			uniform half4 _OverlayColoringOff;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTex);
			SamplerState sampler_OverlayGlitterTex;
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterIntensityValue;
			uniform half _OverlayLiteInfo;
			uniform half4 _OverlayGlitterColor;
			uniform half _NormalLiteInfo;
			uniform half4 _NormalColoringStart;
			uniform half4 _NormalColoringEnd;
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceSpace;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			uniform half _RenderBakeGI;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderPriority;
			uniform half _RenderQueue;
			uniform half _RenderMotion;
			uniform half _RenderClip;
			uniform half _RenderShadow;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderFilter;
			uniform half _render_src;
			uniform half _render_cull;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsLiteShader;
			uniform half _IsSubsurfaceShader;
			uniform half _IsGeneralShader;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _NormalComputeValue;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionWindElementMode;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _InteractionLiteInfo;
			uniform half4 _InteractionColoring;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _MotionPushElementMode;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half _motion_small_mask_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			SamplerState sampler_Linear_Repeat;
			uniform half _MotionIntensityValue;
			uniform half _global_wind_layer_value;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			SamplerState sampler_Linear_Clamp;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_RenderNearCoords;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_WindParams;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half _motion_tiny_mask_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionDistValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half _motion_base_mask_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionDelayValue;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half4 _normal_vert_mode;
			uniform half4 _NormalMeshRemap;
			uniform half _NormalMeshValue;
			uniform half _NormalMeshMode;
			uniform half _DisableSRPBatcher;
			uniform half _VariationLiteInfo;
			uniform half4 _VariationColoring;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _VariationIntensityValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationMultiValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationNoisePivotsValue1;
			uniform half _VariationNoiseTillingValue;
			uniform half _TintingLiteInfo;
			uniform half4 _TintingColoring;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _TintingElementMode;
			uniform half _TintingIntensityValue;
			uniform float4 _TintingColor;
			uniform half _TintingGrayValue;
			uniform half _TintingMultiValue;
			uniform half _TintingLumaValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingMeshMode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half4 _TintingBlendRemap;
			uniform half _DrynessLiteInfo;
			uniform half4 _DrynessColoring;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _DrynessIntensityValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half _DrynessMultiValue;
			uniform half _DrynessLumaValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half4 _DrynessBlendRemap;
			uniform half _WetnessLiteInfo;
			uniform half4 _WetnessColoring;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _WetnessIntensityValue;
			uniform half _WetnessContrastValue;
			uniform half _WetnessSmoothnessValue;
			uniform half _WetnessWaterIntensityValue;
			uniform half4 _WetnessWaterColor;
			uniform half _WetnessWaterBaseValue;
			uniform half4 _WetnessWaterBlendRemap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTex);
			uniform float4 _WetnessDropsTex_ST;
			SamplerState sampler_WetnessDropsTex;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsDistValue;
			uniform half _CutoutLiteInfo;
			uniform half4 _CutoutColoring;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutSpace;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutMultiValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half4 _CutoutMeshRemap;
			uniform half _DitherLiteInfo;
			uniform half4 _DitherColoring;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityValue;
			uniform half _DitherProximityDistValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherDistanceValue;
			uniform half _DitherDistanceMaxValue;
			uniform half _DitherDistanceMinValue;
			uniform half _DitherMultiValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _PerspectiveLiteInfo;
			uniform half4 _PerspectiveColoring;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeLiteInfo;
			uniform half4 _SizeFadeColoring;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeScaleValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform float4 _OverlayGlitterTex_ST;
			uniform half _OverlayGlitterDistValue;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			SamplerState sampler_Point_Repeat;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half _GlobalLiteInfo;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half4 TVE_CoatParams;
			uniform half4 TVE_PaintParams;
			uniform half4 TVE_GlowParams;
			uniform half4 TVE_AtmoParams;
			uniform half4 TVE_FormParams;
			uniform half4 TVE_PushParams;
			uniform half TVE_IsEnabled;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThirdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThirdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half _GradientMultiValue;
			uniform half3 _motion_highlight_color;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			uniform half4 _OverlayBlendRemap1;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g170515 = (TVEModelData)0;
				float In_Dummy16_g170515 = 0.0;
				TVEModelData Data16_g170498 = (TVEModelData)0;
				half Dummy1575_g170496 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170498 = Dummy1575_g170496;
				TVEModelData Data16_g170475 = (TVEModelData)0;
				float In_Dummy16_g170475 = 0.0;
				TVEModelData Data16_g170286 = (TVEModelData)0;
				half4 Dummy181_g170277 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g170286 = Dummy181_g170277.r;
				TVEModelData Data16_g170225 = (TVEModelData)0;
				float In_Dummy16_g170225 = 0.0;
				TVEModelData Data16_g170158 = (TVEModelData)0;
				half Dummy207_g170143 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g170158 = Dummy207_g170143;
				half3 PositionOS131_g170143 = v.vertex.xyz;
				float3 In_PositionOS16_g170158 = PositionOS131_g170143;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g170143 = ase_worldPos;
				half3 PositionWS122_g170143 = vertexToFrag73_g170143;
				float3 In_PositionWS16_g170158 = PositionWS122_g170143;
				float4x4 break19_g170145 = unity_ObjectToWorld;
				float3 appendResult20_g170145 = (float3(break19_g170145[ 0 ][ 3 ] , break19_g170145[ 1 ][ 3 ] , break19_g170145[ 2 ][ 3 ]));
				half3 ObjectData20_g170147 = appendResult20_g170145;
				half3 WorldData19_g170147 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170147 = WorldData19_g170147;
				#else
				float3 staticSwitch14_g170147 = ObjectData20_g170147;
				#endif
				float3 temp_output_124_0_g170145 = staticSwitch14_g170147;
				float3 temp_output_239_7_g170143 = temp_output_124_0_g170145;
				float4x4 break19_g170149 = unity_ObjectToWorld;
				float3 appendResult20_g170149 = (float3(break19_g170149[ 0 ][ 3 ] , break19_g170149[ 1 ][ 3 ] , break19_g170149[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170153 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g170143 = PositionOS131_g170143;
				float3 appendResult234_g170143 = (float3(break233_g170143.x , 0.0 , break233_g170143.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170143 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170143 = appendResult60_g170153;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170143 = appendResult234_g170143;
				#else
				float3 staticSwitch229_g170143 = _Vector0;
				#endif
				half3 PivotOS149_g170143 = staticSwitch229_g170143;
				float3 temp_output_122_0_g170149 = PivotOS149_g170143;
				float3 PivotsOnly105_g170149 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g170149 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g170151 = ( appendResult20_g170149 + PivotsOnly105_g170149 );
				half3 WorldData19_g170151 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170151 = WorldData19_g170151;
				#else
				float3 staticSwitch14_g170151 = ObjectData20_g170151;
				#endif
				float3 temp_output_124_0_g170149 = staticSwitch14_g170151;
				float3 temp_output_237_7_g170143 = temp_output_124_0_g170149;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170143 = temp_output_239_7_g170143;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170143 = temp_output_237_7_g170143;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170143 = temp_output_237_7_g170143;
				#else
				float3 staticSwitch236_g170143 = temp_output_239_7_g170143;
				#endif
				float3 vertexToFrag76_g170143 = staticSwitch236_g170143;
				half3 PivotWS121_g170143 = vertexToFrag76_g170143;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170143 = ( PositionWS122_g170143 - PivotWS121_g170143 );
				#else
				float3 staticSwitch204_g170143 = PositionWS122_g170143;
				#endif
				half3 PositionWO132_g170143 = ( staticSwitch204_g170143 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170158 = PositionWO132_g170143;
				float3 In_PositionRawOS16_g170158 = PositionOS131_g170143;
				float3 In_PositionAddOS16_g170158 = float3( 0,0,0 );
				float3 In_PivotOS16_g170158 = PivotOS149_g170143;
				float3 In_PivotWS16_g170158 = PivotWS121_g170143;
				half3 PivotWO133_g170143 = ( PivotWS121_g170143 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170158 = PivotWO133_g170143;
				half3 NormalOS134_g170143 = v.normal;
				float3 In_NormalOS16_g170158 = NormalOS134_g170143;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170143 = normalizedWorldNormal;
				float3 In_NormalWS16_g170158 = Normal_WS95_g170143;
				float3 In_NormalRawOS16_g170158 = NormalOS134_g170143;
				float3 objToWorldDir298_g170143 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g170143 = objToWorldDir298_g170143;
				float3 In_NormalRawWS16_g170158 = Normal_RawWS136_g170143;
				half4 TangentlOS153_g170143 = v.tangent;
				float4 In_TangentOS16_g170158 = TangentlOS153_g170143;
				float3 normalizeResult296_g170143 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170143 ) );
				half3 ViewDirWS169_g170143 = normalizeResult296_g170143;
				float3 In_ViewDirWS16_g170158 = ViewDirWS169_g170143;
				half4 VertexMasks171_g170143 = v.ase_color;
				float4 In_VertexData16_g170158 = VertexMasks171_g170143;
				float4 break33_g170156 = _object_phase_mode;
				float temp_output_30_0_g170156 = ( v.ase_color.r * break33_g170156.x );
				float temp_output_29_0_g170156 = ( v.ase_color.g * break33_g170156.y );
				float temp_output_31_0_g170156 = ( v.ase_color.b * break33_g170156.z );
				float temp_output_28_0_g170156 = ( temp_output_30_0_g170156 + temp_output_29_0_g170156 + temp_output_31_0_g170156 + ( v.ase_color.a * break33_g170156.w ) );
				float3 break243_g170143 = PivotWO133_g170143;
				float temp_output_315_0_g170143 = (frac( ( temp_output_28_0_g170156 + ( break243_g170143.x + break243_g170143.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g170143 = (float4(1.0 , 1.0 , temp_output_315_0_g170143 , 1.0));
				half4 MotionMasks176_g170143 = appendResult177_g170143;
				float4 In_MotionData16_g170158 = MotionMasks176_g170143;
				half Object_HeightValue267_g170143 = _ObjectHeightValue;
				half Object_RadiusValue268_g170143 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170143 = saturate( ( (PositionOS131_g170143).y / Object_HeightValue267_g170143 ) );
				half Bounds_SphereMask282_g170143 = saturate( ( length( PositionOS131_g170143 ) / max( Object_HeightValue267_g170143 , Object_RadiusValue268_g170143 ) ) );
				float4 appendResult253_g170143 = (float4(Object_HeightValue267_g170143 , Object_RadiusValue268_g170143 , Bounds_HeightMask274_g170143 , Bounds_SphereMask282_g170143));
				half4 BoundsData254_g170143 = appendResult253_g170143;
				float4 In_BoundsData16_g170158 = BoundsData254_g170143;
				float4 In_RotationData16_g170158 = float4( 0,0,0,0 );
				Data16_g170158.Dummy = In_Dummy16_g170158;
				Data16_g170158.PositionOS = In_PositionOS16_g170158;
				Data16_g170158.PositionWS = In_PositionWS16_g170158;
				Data16_g170158.PositionWO = In_PositionWO16_g170158;
				Data16_g170158.PositionRawOS = In_PositionRawOS16_g170158;
				Data16_g170158.PositionAddOS = In_PositionAddOS16_g170158;
				Data16_g170158.PivotOS = In_PivotOS16_g170158;
				Data16_g170158.PivotWS = In_PivotWS16_g170158;
				Data16_g170158.PivotWO = In_PivotWO16_g170158;
				Data16_g170158.NormalOS = In_NormalOS16_g170158;
				Data16_g170158.NormalWS = In_NormalWS16_g170158;
				Data16_g170158.NormalRawOS = In_NormalRawOS16_g170158;
				Data16_g170158.NormalRawWS = In_NormalRawWS16_g170158;
				Data16_g170158.TangentOS = In_TangentOS16_g170158;
				Data16_g170158.ViewDirWS = In_ViewDirWS16_g170158;
				Data16_g170158.VertexData = In_VertexData16_g170158;
				Data16_g170158.MotionData = In_MotionData16_g170158;
				Data16_g170158.BoundsData = In_BoundsData16_g170158;
				Data16_g170158.RotationData = In_RotationData16_g170158;
				TVEModelData Data15_g170226 = Data16_g170158;
				float Out_Dummy15_g170226 = 0;
				float3 Out_PositionOS15_g170226 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170226 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170226 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170226 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170226 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170226 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170226 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170226 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170226 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170226 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170226 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170226 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170226 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170226 = float3( 0,0,0 );
				float4 Out_VertexData15_g170226 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170226 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170226 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170226 = float4( 0,0,0,0 );
				Out_Dummy15_g170226 = Data15_g170226.Dummy;
				Out_PositionOS15_g170226 = Data15_g170226.PositionOS;
				Out_PositionWS15_g170226 = Data15_g170226.PositionWS;
				Out_PositionWO15_g170226 = Data15_g170226.PositionWO;
				Out_PositionRawOS15_g170226 = Data15_g170226.PositionRawOS;
				Out_PositionAddOS15_g170226 = Data15_g170226.PositionAddOS;
				Out_PivotOS15_g170226 = Data15_g170226.PivotOS;
				Out_PivotWS15_g170226 = Data15_g170226.PivotWS;
				Out_PivotWO15_g170226 = Data15_g170226.PivotWO;
				Out_NormalOS15_g170226 = Data15_g170226.NormalOS;
				Out_NormalWS15_g170226 = Data15_g170226.NormalWS;
				Out_NormalRawOS15_g170226 = Data15_g170226.NormalRawOS;
				Out_NormalRawWS15_g170226 = Data15_g170226.NormalRawWS;
				Out_TangentOS15_g170226 = Data15_g170226.TangentOS;
				Out_ViewDirWS15_g170226 = Data15_g170226.ViewDirWS;
				Out_VertexData15_g170226 = Data15_g170226.VertexData;
				Out_MotionData15_g170226 = Data15_g170226.MotionData;
				Out_BoundsData15_g170226 = Data15_g170226.BoundsData;
				Out_RotationData15_g170226 = Data15_g170226.RotationData;
				float3 temp_output_218_24_g170224 = Out_PivotOS15_g170226;
				float3 In_PositionOS16_g170225 = ( Out_PositionOS15_g170226 - temp_output_218_24_g170224 );
				float3 In_PositionWS16_g170225 = Out_PositionWS15_g170226;
				float3 In_PositionWO16_g170225 = Out_PositionWO15_g170226;
				float3 In_PositionRawOS16_g170225 = Out_PositionRawOS15_g170226;
				float3 In_PositionAddOS16_g170225 = Out_PositionAddOS15_g170226;
				float3 In_PivotOS16_g170225 = temp_output_218_24_g170224;
				float3 In_PivotWS16_g170225 = Out_PivotWS15_g170226;
				float3 In_PivotWO16_g170225 = Out_PivotWO15_g170226;
				float3 In_NormalOS16_g170225 = Out_NormalOS15_g170226;
				float3 In_NormalWS16_g170225 = Out_NormalWS15_g170226;
				float3 In_NormalRawOS16_g170225 = Out_NormalRawOS15_g170226;
				float3 In_NormalRawWS16_g170225 = Out_NormalRawWS15_g170226;
				float4 In_TangentOS16_g170225 = Out_TangentOS15_g170226;
				float3 In_ViewDirWS16_g170225 = Out_ViewDirWS15_g170226;
				float4 In_VertexData16_g170225 = Out_VertexData15_g170226;
				float4 In_MotionData16_g170225 = Out_MotionData15_g170226;
				float4 In_BoundsData16_g170225 = Out_BoundsData15_g170226;
				float4 In_RotationData16_g170225 = Out_RotationData15_g170226;
				Data16_g170225.Dummy = In_Dummy16_g170225;
				Data16_g170225.PositionOS = In_PositionOS16_g170225;
				Data16_g170225.PositionWS = In_PositionWS16_g170225;
				Data16_g170225.PositionWO = In_PositionWO16_g170225;
				Data16_g170225.PositionRawOS = In_PositionRawOS16_g170225;
				Data16_g170225.PositionAddOS = In_PositionAddOS16_g170225;
				Data16_g170225.PivotOS = In_PivotOS16_g170225;
				Data16_g170225.PivotWS = In_PivotWS16_g170225;
				Data16_g170225.PivotWO = In_PivotWO16_g170225;
				Data16_g170225.NormalOS = In_NormalOS16_g170225;
				Data16_g170225.NormalWS = In_NormalWS16_g170225;
				Data16_g170225.NormalRawOS = In_NormalRawOS16_g170225;
				Data16_g170225.NormalRawWS = In_NormalRawWS16_g170225;
				Data16_g170225.TangentOS = In_TangentOS16_g170225;
				Data16_g170225.ViewDirWS = In_ViewDirWS16_g170225;
				Data16_g170225.VertexData = In_VertexData16_g170225;
				Data16_g170225.MotionData = In_MotionData16_g170225;
				Data16_g170225.BoundsData = In_BoundsData16_g170225;
				Data16_g170225.RotationData = In_RotationData16_g170225;
				TVEModelData Data15_g170278 = Data16_g170225;
				float Out_Dummy15_g170278 = 0;
				float3 Out_PositionOS15_g170278 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170278 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170278 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170278 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170278 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170278 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170278 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170278 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170278 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170278 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170278 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170278 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170278 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170278 = float3( 0,0,0 );
				float4 Out_VertexData15_g170278 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170278 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170278 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170278 = float4( 0,0,0,0 );
				Out_Dummy15_g170278 = Data15_g170278.Dummy;
				Out_PositionOS15_g170278 = Data15_g170278.PositionOS;
				Out_PositionWS15_g170278 = Data15_g170278.PositionWS;
				Out_PositionWO15_g170278 = Data15_g170278.PositionWO;
				Out_PositionRawOS15_g170278 = Data15_g170278.PositionRawOS;
				Out_PositionAddOS15_g170278 = Data15_g170278.PositionAddOS;
				Out_PivotOS15_g170278 = Data15_g170278.PivotOS;
				Out_PivotWS15_g170278 = Data15_g170278.PivotWS;
				Out_PivotWO15_g170278 = Data15_g170278.PivotWO;
				Out_NormalOS15_g170278 = Data15_g170278.NormalOS;
				Out_NormalWS15_g170278 = Data15_g170278.NormalWS;
				Out_NormalRawOS15_g170278 = Data15_g170278.NormalRawOS;
				Out_NormalRawWS15_g170278 = Data15_g170278.NormalRawWS;
				Out_TangentOS15_g170278 = Data15_g170278.TangentOS;
				Out_ViewDirWS15_g170278 = Data15_g170278.ViewDirWS;
				Out_VertexData15_g170278 = Data15_g170278.VertexData;
				Out_MotionData15_g170278 = Data15_g170278.MotionData;
				Out_BoundsData15_g170278 = Data15_g170278.BoundsData;
				Out_RotationData15_g170278 = Data15_g170278.RotationData;
				float3 temp_output_1567_0_g170277 = Out_PositionOS15_g170278;
				float3 In_PositionOS16_g170286 = temp_output_1567_0_g170277;
				float3 temp_output_1567_16_g170277 = Out_PositionWS15_g170278;
				float3 In_PositionWS16_g170286 = temp_output_1567_16_g170277;
				float3 temp_output_1567_17_g170277 = Out_PositionWO15_g170278;
				float3 In_PositionWO16_g170286 = temp_output_1567_17_g170277;
				float3 In_PositionRawOS16_g170286 = Out_PositionRawOS15_g170278;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g170277 = Out_VertexData15_g170278;
				half4 Model_VertexMasks518_g170277 = temp_output_1567_29_g170277;
				float4 break1689_g170277 = Model_VertexMasks518_g170277;
				float4 break33_g170283 = _motion_small_vert_mode;
				float temp_output_30_0_g170283 = ( break1689_g170277.x * break33_g170283.x );
				float temp_output_29_0_g170283 = ( break1689_g170277.y * break33_g170283.y );
				float temp_output_31_0_g170283 = ( break1689_g170277.z * break33_g170283.z );
				float temp_output_28_0_g170283 = ( temp_output_30_0_g170283 + temp_output_29_0_g170283 + temp_output_31_0_g170283 + ( break1689_g170277.w * break33_g170283.w ) );
				float temp_output_1727_0_g170277 = temp_output_28_0_g170283;
				float4 temp_output_1567_30_g170277 = Out_BoundsData15_g170278;
				half4 Model_BoundsData1322_g170277 = temp_output_1567_30_g170277;
				float4 break33_g170288 = _motion_small_proc_mode;
				float temp_output_30_0_g170288 = ( (Model_BoundsData1322_g170277).z * break33_g170288.x );
				float temp_output_29_0_g170288 = ( (Model_BoundsData1322_g170277).w * break33_g170288.y );
				float temp_output_1734_0_g170277 = ( temp_output_30_0_g170288 + temp_output_29_0_g170288 );
				float lerpResult1866_g170277 = lerp( temp_output_1727_0_g170277 , temp_output_1734_0_g170277 , _motion_small_mask_mode);
				float enc1805_g170277 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170277 = DecodeFloatToVector2( enc1805_g170277 );
				float2 break1804_g170277 = localDecodeFloatToVector21805_g170277;
				half Small_Mask_Legacy1806_g170277 = break1804_g170277.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170277 = Small_Mask_Legacy1806_g170277;
				#else
				float staticSwitch1800_g170277 = lerpResult1866_g170277;
				#endif
				float clampResult17_g170290 = clamp( staticSwitch1800_g170277 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170291 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170291 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170291 );
				float temp_output_6_0_g170292 = saturate( ( ( clampResult17_g170290 - temp_output_7_0_g170291 ) / ( temp_output_10_0_g170291 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170292 = ( temp_output_6_0_g170292 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170292 = temp_output_6_0_g170292;
				#endif
				half Small_Mask640_g170277 = staticSwitch14_g170292;
				half3 Model_PositionOS147_g170277 = temp_output_1567_0_g170277;
				float3 normalizeResult1832_g170277 = normalize( Model_PositionOS147_g170277 );
				half3 Model_PositionWO162_g170277 = temp_output_1567_17_g170277;
				float3 temp_output_1567_19_g170277 = Out_PivotWO15_g170278;
				half3 Model_PivotWO402_g170277 = temp_output_1567_19_g170277;
				float3 lerpResult829_g170277 = lerp( Model_PositionWO162_g170277 , Model_PivotWO402_g170277 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170277 = Out_MotionData15_g170278;
				half4 Model_MotionMasks489_g170277 = temp_output_1567_27_g170277;
				half3 Base_Position1394_g170277 = ( lerpResult829_g170277 + ( (Model_MotionMasks489_g170277).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170304 = Base_Position1394_g170277;
				half Flow_Tillling1397_g170277 = _MotionTillingValue;
				half Input_MotionTilling321_g170304 = ( Flow_Tillling1397_g170277 + 0.2 );
				half2 Noise_Coord515_g170304 = ( -(Input_PositionWO419_g170304).xz * Input_MotionTilling321_g170304 * 0.005 );
				half4 Noise_Params535_g170304 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170304, 0.0 );
				float2 temp_output_648_0_g170304 = (Noise_Params535_g170304).rg;
				half Flow_Value1858_g170277 = _MotionIntensityValue;
				half Input_MotionValue629_g170304 = Flow_Value1858_g170277;
				float2 lerpResult645_g170304 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170304 , Input_MotionValue629_g170304);
				float3 appendResult566_g170304 = (float3(lerpResult645_g170304 , (Noise_Params535_g170304).b));
				float temp_output_136_0_g170305 = _global_wind_layer_value;
				float temp_output_19_0_g170307 = TVE_WindLayers[(int)temp_output_136_0_g170305];
				half3 Input_Position180_g170308 = Input_PositionWO419_g170304;
				float2 temp_output_75_0_g170308 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170308).xz ) );
				float temp_output_82_0_g170308 = temp_output_136_0_g170305;
				float2 temp_output_119_0_g170308 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170308).xz ) );
				float temp_output_7_0_g170313 = 1.0;
				float temp_output_10_0_g170313 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170313 );
				float4 lerpResult131_g170308 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170308,temp_output_82_0_g170308), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170308,temp_output_82_0_g170308), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170308 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170313 ) / temp_output_10_0_g170313 ) ));
				float4 temp_output_17_0_g170307 = lerpResult131_g170308;
				float4 temp_output_3_0_g170307 = TVE_WindParams;
				float4 ifLocalVar18_g170307 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170307 >= 0.5 )
				ifLocalVar18_g170307 = temp_output_17_0_g170307;
				else
				ifLocalVar18_g170307 = temp_output_3_0_g170307;
				float4 lerpResult22_g170307 = lerp( temp_output_3_0_g170307 , temp_output_17_0_g170307 , temp_output_19_0_g170307);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170307 = lerpResult22_g170307;
				#else
				float4 staticSwitch24_g170307 = ifLocalVar18_g170307;
				#endif
				float4 temp_output_610_0_g170304 = staticSwitch24_g170307;
				float3 appendResult643_g170304 = (float3((temp_output_610_0_g170304).rg , (temp_output_610_0_g170304).b));
				float3 lerpResult623_g170304 = lerp( appendResult566_g170304 , appendResult643_g170304 , (temp_output_610_0_g170304).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170304 = lerpResult623_g170304;
				#else
				float3 staticSwitch612_g170304 = appendResult566_g170304;
				#endif
				float3 temp_output_1947_567_g170277 = staticSwitch612_g170304;
				float2 break83_g170301 = ((temp_output_1947_567_g170277).xy*2.0 + -1.0);
				float3 appendResult79_g170301 = (float3(break83_g170301.x , 0.0 , break83_g170301.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170277 = (( mul( unity_WorldToObject, float4( appendResult79_g170301 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170277 = lerp( Model_PositionWO162_g170277 , Model_PivotWO402_g170277 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170277 = ( lerpResult1411_g170277 + ( (Model_MotionMasks489_g170277).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170319 = Small_Position1421_g170277;
				half Input_MotionTilling321_g170319 = ( Flow_Tillling1397_g170277 + 0.2 );
				half2 Noise_Coord515_g170319 = ( -(Input_PositionWO419_g170319).xz * Input_MotionTilling321_g170319 * 0.005 );
				half4 Noise_Params535_g170319 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170319, 0.0 );
				float2 temp_output_648_0_g170319 = (Noise_Params535_g170319).rg;
				half Input_MotionValue629_g170319 = Flow_Value1858_g170277;
				float2 lerpResult645_g170319 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170319 , Input_MotionValue629_g170319);
				float3 appendResult566_g170319 = (float3(lerpResult645_g170319 , (Noise_Params535_g170319).b));
				float temp_output_136_0_g170320 = _global_wind_layer_value;
				float temp_output_19_0_g170322 = TVE_WindLayers[(int)temp_output_136_0_g170320];
				half3 Input_Position180_g170323 = Input_PositionWO419_g170319;
				float2 temp_output_75_0_g170323 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170323).xz ) );
				float temp_output_82_0_g170323 = temp_output_136_0_g170320;
				float2 temp_output_119_0_g170323 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170323).xz ) );
				float temp_output_7_0_g170328 = 1.0;
				float temp_output_10_0_g170328 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170328 );
				float4 lerpResult131_g170323 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170323,temp_output_82_0_g170323), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170323,temp_output_82_0_g170323), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170323 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170328 ) / temp_output_10_0_g170328 ) ));
				float4 temp_output_17_0_g170322 = lerpResult131_g170323;
				float4 temp_output_3_0_g170322 = TVE_WindParams;
				float4 ifLocalVar18_g170322 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170322 >= 0.5 )
				ifLocalVar18_g170322 = temp_output_17_0_g170322;
				else
				ifLocalVar18_g170322 = temp_output_3_0_g170322;
				float4 lerpResult22_g170322 = lerp( temp_output_3_0_g170322 , temp_output_17_0_g170322 , temp_output_19_0_g170322);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170322 = lerpResult22_g170322;
				#else
				float4 staticSwitch24_g170322 = ifLocalVar18_g170322;
				#endif
				float4 temp_output_610_0_g170319 = staticSwitch24_g170322;
				float3 appendResult643_g170319 = (float3((temp_output_610_0_g170319).rg , (temp_output_610_0_g170319).b));
				float3 lerpResult623_g170319 = lerp( appendResult566_g170319 , appendResult643_g170319 , (temp_output_610_0_g170319).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170319 = lerpResult623_g170319;
				#else
				float3 staticSwitch612_g170319 = appendResult566_g170319;
				#endif
				float3 temp_output_1946_567_g170277 = staticSwitch612_g170319;
				float2 break83_g170302 = ((temp_output_1946_567_g170277).xy*2.0 + -1.0);
				float3 appendResult79_g170302 = (float3(break83_g170302.x , 0.0 , break83_g170302.y));
				half2 Small_Direction1489_g170277 = (( mul( unity_WorldToObject, float4( appendResult79_g170302 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170277 = Small_Direction1489_g170277;
				#else
				float2 staticSwitch1485_g170277 = Base_Direction893_g170277;
				#endif
				half2 Wave_Direction1486_g170277 = staticSwitch1485_g170277;
				float2 break1828_g170277 = -Wave_Direction1486_g170277;
				float3 appendResult1830_g170277 = (float3(break1828_g170277.x , 0.0 , break1828_g170277.y));
				float dotResult1831_g170277 = dot( normalizeResult1832_g170277 , appendResult1830_g170277 );
				float lerpResult1826_g170277 = lerp( 1.0 , (dotResult1831_g170277*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170277 = lerpResult1826_g170277;
				float2 break1922_g170277 = Small_Direction1489_g170277;
				half Small_Intensity1881_g170277 = length( Small_Direction1489_g170277 );
				float3 appendResult1920_g170277 = (float3(break1922_g170277.x , Small_Intensity1881_g170277 , break1922_g170277.y));
				half Small_Noise1427_g170277 = (temp_output_1946_567_g170277).z;
				float3 appendResult1921_g170277 = (float3(Small_Noise1427_g170277 , (Small_Noise1427_g170277*0.8 + -0.4) , Small_Noise1427_g170277));
				half3 Small_Motion789_g170277 = ( _MotionSmallIntensityValue * Small_Mask640_g170277 * Motion_FrontMask1142_g170277 * appendResult1920_g170277 * appendResult1921_g170277 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170277 = Small_Motion789_g170277;
				#else
				float3 staticSwitch495_g170277 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g170277 = Model_VertexMasks518_g170277;
				float4 break33_g170284 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170284 = ( break1710_g170277.x * break33_g170284.x );
				float temp_output_29_0_g170284 = ( break1710_g170277.y * break33_g170284.y );
				float temp_output_31_0_g170284 = ( break1710_g170277.z * break33_g170284.z );
				float temp_output_28_0_g170284 = ( temp_output_30_0_g170284 + temp_output_29_0_g170284 + temp_output_31_0_g170284 + ( break1710_g170277.w * break33_g170284.w ) );
				float temp_output_1729_0_g170277 = temp_output_28_0_g170284;
				float4 break33_g170289 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170289 = ( (Model_BoundsData1322_g170277).z * break33_g170289.x );
				float temp_output_29_0_g170289 = ( (Model_BoundsData1322_g170277).w * break33_g170289.y );
				float temp_output_1735_0_g170277 = ( temp_output_30_0_g170289 + temp_output_29_0_g170289 );
				float lerpResult1867_g170277 = lerp( temp_output_1729_0_g170277 , temp_output_1735_0_g170277 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170277 = break1804_g170277.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170277 = Tiny_Mask_Legacy1807_g170277;
				#else
				float staticSwitch1810_g170277 = lerpResult1867_g170277;
				#endif
				float clampResult17_g170293 = clamp( staticSwitch1810_g170277 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170294 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170294 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170294 );
				float temp_output_6_0_g170295 = saturate( ( ( clampResult17_g170293 - temp_output_7_0_g170294 ) / ( temp_output_10_0_g170294 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170295 = ( temp_output_6_0_g170295 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170295 = temp_output_6_0_g170295;
				#endif
				half Tiny_Mask218_g170277 = staticSwitch14_g170295;
				half3 Input_Position500_g170296 = Model_PositionWO162_g170277;
				float2 temp_output_498_0_g170296 = (Input_Position500_g170296).xz;
				float4 tex2DNode460_g170296 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, temp_output_498_0_g170296, 0.0 );
				float3 appendResult462_g170296 = (float3(tex2DNode460_g170296.a , tex2DNode460_g170296.a , tex2DNode460_g170296.a));
				half3 Flutter_Texture489_g170296 = (appendResult462_g170296*2.0 + -1.0);
				half3 Tiny_Direction859_g170277 = Flutter_Texture489_g170296;
				half3 Model_PositionWS1819_g170277 = temp_output_1567_16_g170277;
				half Motion_FadeMask1820_g170277 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170277 ) / _MotionDistValue ) ) );
				half Base_Intensity1878_g170277 = length( Base_Direction893_g170277 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1899_g170277 = Small_Intensity1881_g170277;
				#else
				float staticSwitch1899_g170277 = Base_Intensity1878_g170277;
				#endif
				half Wave_Intensity1900_g170277 = staticSwitch1899_g170277;
				half Base_Noise1159_g170277 = (temp_output_1947_567_g170277).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170277 = Small_Noise1427_g170277;
				#else
				float staticSwitch1453_g170277 = Base_Noise1159_g170277;
				#endif
				half Wave_Noise1475_g170277 = staticSwitch1453_g170277;
				half3 Tiny_Motion1451_g170277 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170277 * Tiny_Direction859_g170277 * Motion_FrontMask1142_g170277 * Motion_FadeMask1820_g170277 * Wave_Intensity1900_g170277 * Wave_Noise1475_g170277 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170277 = Tiny_Motion1451_g170277;
				#else
				float3 staticSwitch414_g170277 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g170277 = ( staticSwitch495_g170277 + staticSwitch414_g170277 );
				float3 In_PositionAddOS16_g170286 = Final_PositionADD1569_g170277;
				float3 temp_output_1567_24_g170277 = Out_PivotOS15_g170278;
				float3 In_PivotOS16_g170286 = temp_output_1567_24_g170277;
				float3 In_PivotWS16_g170286 = Out_PivotWS15_g170278;
				float3 In_PivotWO16_g170286 = temp_output_1567_19_g170277;
				float3 temp_output_1567_20_g170277 = Out_NormalOS15_g170278;
				float3 In_NormalOS16_g170286 = temp_output_1567_20_g170277;
				float3 In_NormalWS16_g170286 = Out_NormalWS15_g170278;
				float3 In_NormalRawOS16_g170286 = Out_NormalRawOS15_g170278;
				float3 In_NormalRawWS16_g170286 = Out_NormalRawWS15_g170278;
				float4 In_TangentOS16_g170286 = Out_TangentOS15_g170278;
				float3 In_ViewDirWS16_g170286 = Out_ViewDirWS15_g170278;
				float4 In_VertexData16_g170286 = temp_output_1567_29_g170277;
				float4 In_MotionData16_g170286 = temp_output_1567_27_g170277;
				float4 In_BoundsData16_g170286 = temp_output_1567_30_g170277;
				float2 temp_cast_17 = (0.0).xx;
				float4 break748_g170277 = Model_VertexMasks518_g170277;
				float4 break33_g170285 = _motion_base_vert_mode;
				float temp_output_30_0_g170285 = ( break748_g170277.x * break33_g170285.x );
				float temp_output_29_0_g170285 = ( break748_g170277.y * break33_g170285.y );
				float temp_output_31_0_g170285 = ( break748_g170277.z * break33_g170285.z );
				float temp_output_28_0_g170285 = ( temp_output_30_0_g170285 + temp_output_29_0_g170285 + temp_output_31_0_g170285 + ( break748_g170277.w * break33_g170285.w ) );
				float temp_output_1731_0_g170277 = temp_output_28_0_g170285;
				float4 break33_g170287 = _motion_base_proc_mode;
				float temp_output_30_0_g170287 = ( (Model_BoundsData1322_g170277).z * break33_g170287.x );
				float temp_output_29_0_g170287 = ( (Model_BoundsData1322_g170277).w * break33_g170287.y );
				float temp_output_1733_0_g170277 = ( temp_output_30_0_g170287 + temp_output_29_0_g170287 );
				float lerpResult1863_g170277 = lerp( temp_output_1731_0_g170277 , temp_output_1733_0_g170277 , _motion_base_mask_mode);
				float clampResult17_g170280 = clamp( lerpResult1863_g170277 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170281 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170281 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170281 );
				float temp_output_6_0_g170282 = saturate( ( ( clampResult17_g170280 - temp_output_7_0_g170281 ) / ( temp_output_10_0_g170281 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170282 = ( temp_output_6_0_g170282 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170282 = temp_output_6_0_g170282;
				#endif
				half Base_Mask217_g170277 = staticSwitch14_g170282;
				half Flow_Delay1939_g170277 = _MotionDelayValue;
				float lerpResult1908_g170277 = lerp( 1.0 , ( Base_Intensity1878_g170277 * Base_Intensity1878_g170277 ) , Flow_Delay1939_g170277);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170277 = ( _MotionBaseIntensityValue * Base_Mask217_g170277 * Base_Noise1159_g170277 * Base_Direction893_g170277 * lerpResult1908_g170277 );
				#else
				float2 staticSwitch1573_g170277 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g170277 = staticSwitch1573_g170277;
				half2 Final_VertexBend1570_g170277 = Base_Motion1440_g170277;
				float4 In_RotationData16_g170286 = float4( Final_VertexBend1570_g170277, 0.0 , 0.0 );
				Data16_g170286.Dummy = In_Dummy16_g170286;
				Data16_g170286.PositionOS = In_PositionOS16_g170286;
				Data16_g170286.PositionWS = In_PositionWS16_g170286;
				Data16_g170286.PositionWO = In_PositionWO16_g170286;
				Data16_g170286.PositionRawOS = In_PositionRawOS16_g170286;
				Data16_g170286.PositionAddOS = In_PositionAddOS16_g170286;
				Data16_g170286.PivotOS = In_PivotOS16_g170286;
				Data16_g170286.PivotWS = In_PivotWS16_g170286;
				Data16_g170286.PivotWO = In_PivotWO16_g170286;
				Data16_g170286.NormalOS = In_NormalOS16_g170286;
				Data16_g170286.NormalWS = In_NormalWS16_g170286;
				Data16_g170286.NormalRawOS = In_NormalRawOS16_g170286;
				Data16_g170286.NormalRawWS = In_NormalRawWS16_g170286;
				Data16_g170286.TangentOS = In_TangentOS16_g170286;
				Data16_g170286.ViewDirWS = In_ViewDirWS16_g170286;
				Data16_g170286.VertexData = In_VertexData16_g170286;
				Data16_g170286.MotionData = In_MotionData16_g170286;
				Data16_g170286.BoundsData = In_BoundsData16_g170286;
				Data16_g170286.RotationData = In_RotationData16_g170286;
				TVEModelData Data15_g170474 = Data16_g170286;
				float Out_Dummy15_g170474 = 0;
				float3 Out_PositionOS15_g170474 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170474 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170474 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170474 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170474 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170474 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170474 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170474 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170474 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170474 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170474 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170474 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170474 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170474 = float3( 0,0,0 );
				float4 Out_VertexData15_g170474 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170474 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170474 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170474 = float4( 0,0,0,0 );
				Out_Dummy15_g170474 = Data15_g170474.Dummy;
				Out_PositionOS15_g170474 = Data15_g170474.PositionOS;
				Out_PositionWS15_g170474 = Data15_g170474.PositionWS;
				Out_PositionWO15_g170474 = Data15_g170474.PositionWO;
				Out_PositionRawOS15_g170474 = Data15_g170474.PositionRawOS;
				Out_PositionAddOS15_g170474 = Data15_g170474.PositionAddOS;
				Out_PivotOS15_g170474 = Data15_g170474.PivotOS;
				Out_PivotWS15_g170474 = Data15_g170474.PivotWS;
				Out_PivotWO15_g170474 = Data15_g170474.PivotWO;
				Out_NormalOS15_g170474 = Data15_g170474.NormalOS;
				Out_NormalWS15_g170474 = Data15_g170474.NormalWS;
				Out_NormalRawOS15_g170474 = Data15_g170474.NormalRawOS;
				Out_NormalRawWS15_g170474 = Data15_g170474.NormalRawWS;
				Out_TangentOS15_g170474 = Data15_g170474.TangentOS;
				Out_ViewDirWS15_g170474 = Data15_g170474.ViewDirWS;
				Out_VertexData15_g170474 = Data15_g170474.VertexData;
				Out_MotionData15_g170474 = Data15_g170474.MotionData;
				Out_BoundsData15_g170474 = Data15_g170474.BoundsData;
				Out_RotationData15_g170474 = Data15_g170474.RotationData;
				half3 Model_PositionOS147_g170473 = Out_PositionOS15_g170474;
				half3 Input_False58_g170479 = Model_PositionOS147_g170473;
				half3 VertexPos40_g170476 = Model_PositionOS147_g170473;
				half3 VertexPos40_g170477 = VertexPos40_g170476;
				float3 appendResult74_g170477 = (float3(VertexPos40_g170477.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170477 = appendResult74_g170477;
				float3 break84_g170477 = VertexPos40_g170477;
				float3 appendResult81_g170477 = (float3(0.0 , break84_g170477.y , break84_g170477.z));
				half3 VertexPosOtherAxis82_g170477 = appendResult81_g170477;
				float4 temp_output_1567_33_g170473 = Out_RotationData15_g170474;
				half4 Model_VertexBend1569_g170473 = temp_output_1567_33_g170473;
				half2 Angle44_g170476 = (Model_VertexBend1569_g170473).xy;
				half Angle44_g170477 = (Angle44_g170476).y;
				half3 VertexPos40_g170478 = ( VertexPosRotationAxis50_g170477 + ( VertexPosOtherAxis82_g170477 * cos( Angle44_g170477 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170477 ) * sin( Angle44_g170477 ) ) );
				float3 appendResult74_g170478 = (float3(0.0 , 0.0 , VertexPos40_g170478.z));
				half3 VertexPosRotationAxis50_g170478 = appendResult74_g170478;
				float3 break84_g170478 = VertexPos40_g170478;
				float3 appendResult81_g170478 = (float3(break84_g170478.x , break84_g170478.y , 0.0));
				half3 VertexPosOtherAxis82_g170478 = appendResult81_g170478;
				half Angle44_g170478 = -(Angle44_g170476).x;
				half3 Input_True57_g170479 = ( VertexPosRotationAxis50_g170478 + ( VertexPosOtherAxis82_g170478 * cos( Angle44_g170478 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170478 ) * sin( Angle44_g170478 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170479 = Input_True57_g170479;
				#else
				float3 staticSwitch65_g170479 = Input_False58_g170479;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170479 = Input_True57_g170479;
				#else
				float3 staticSwitch67_g170479 = staticSwitch65_g170479;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170479 = Input_True57_g170479;
				#else
				float3 staticSwitch69_g170479 = staticSwitch67_g170479;
				#endif
				float3 temp_output_1578_0_g170473 = staticSwitch69_g170479;
				float3 temp_output_1567_31_g170473 = Out_PositionAddOS15_g170474;
				half3 Model_PositionADD1568_g170473 = temp_output_1567_31_g170473;
				half3 Final_PositionOS178_g170473 = ( temp_output_1578_0_g170473 + Model_PositionADD1568_g170473 );
				float3 In_PositionOS16_g170475 = Final_PositionOS178_g170473;
				float3 In_PositionWS16_g170475 = Out_PositionWS15_g170474;
				float3 In_PositionWO16_g170475 = Out_PositionWO15_g170474;
				float3 In_PositionRawOS16_g170475 = Out_PositionRawOS15_g170474;
				float3 In_PositionAddOS16_g170475 = temp_output_1567_31_g170473;
				float3 In_PivotOS16_g170475 = Out_PivotOS15_g170474;
				float3 In_PivotWS16_g170475 = Out_PivotWS15_g170474;
				float3 In_PivotWO16_g170475 = Out_PivotWO15_g170474;
				float3 In_NormalOS16_g170475 = Out_NormalOS15_g170474;
				float3 In_NormalWS16_g170475 = Out_NormalWS15_g170474;
				float3 In_NormalRawOS16_g170475 = Out_NormalRawOS15_g170474;
				float3 In_NormalRawWS16_g170475 = Out_NormalRawWS15_g170474;
				float4 In_TangentOS16_g170475 = Out_TangentOS15_g170474;
				float3 In_ViewDirWS16_g170475 = Out_ViewDirWS15_g170474;
				float4 In_VertexData16_g170475 = Out_VertexData15_g170474;
				float4 In_MotionData16_g170475 = Out_MotionData15_g170474;
				float4 In_BoundsData16_g170475 = Out_BoundsData15_g170474;
				float4 In_RotationData16_g170475 = temp_output_1567_33_g170473;
				Data16_g170475.Dummy = In_Dummy16_g170475;
				Data16_g170475.PositionOS = In_PositionOS16_g170475;
				Data16_g170475.PositionWS = In_PositionWS16_g170475;
				Data16_g170475.PositionWO = In_PositionWO16_g170475;
				Data16_g170475.PositionRawOS = In_PositionRawOS16_g170475;
				Data16_g170475.PositionAddOS = In_PositionAddOS16_g170475;
				Data16_g170475.PivotOS = In_PivotOS16_g170475;
				Data16_g170475.PivotWS = In_PivotWS16_g170475;
				Data16_g170475.PivotWO = In_PivotWO16_g170475;
				Data16_g170475.NormalOS = In_NormalOS16_g170475;
				Data16_g170475.NormalWS = In_NormalWS16_g170475;
				Data16_g170475.NormalRawOS = In_NormalRawOS16_g170475;
				Data16_g170475.NormalRawWS = In_NormalRawWS16_g170475;
				Data16_g170475.TangentOS = In_TangentOS16_g170475;
				Data16_g170475.ViewDirWS = In_ViewDirWS16_g170475;
				Data16_g170475.VertexData = In_VertexData16_g170475;
				Data16_g170475.MotionData = In_MotionData16_g170475;
				Data16_g170475.BoundsData = In_BoundsData16_g170475;
				Data16_g170475.RotationData = In_RotationData16_g170475;
				TVEModelData Data15_g170497 = Data16_g170475;
				float Out_Dummy15_g170497 = 0;
				float3 Out_PositionOS15_g170497 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170497 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170497 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170497 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170497 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170497 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170497 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170497 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170497 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170497 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170497 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170497 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170497 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170497 = float3( 0,0,0 );
				float4 Out_VertexData15_g170497 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170497 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170497 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170497 = float4( 0,0,0,0 );
				Out_Dummy15_g170497 = Data15_g170497.Dummy;
				Out_PositionOS15_g170497 = Data15_g170497.PositionOS;
				Out_PositionWS15_g170497 = Data15_g170497.PositionWS;
				Out_PositionWO15_g170497 = Data15_g170497.PositionWO;
				Out_PositionRawOS15_g170497 = Data15_g170497.PositionRawOS;
				Out_PositionAddOS15_g170497 = Data15_g170497.PositionAddOS;
				Out_PivotOS15_g170497 = Data15_g170497.PivotOS;
				Out_PivotWS15_g170497 = Data15_g170497.PivotWS;
				Out_PivotWO15_g170497 = Data15_g170497.PivotWO;
				Out_NormalOS15_g170497 = Data15_g170497.NormalOS;
				Out_NormalWS15_g170497 = Data15_g170497.NormalWS;
				Out_NormalRawOS15_g170497 = Data15_g170497.NormalRawOS;
				Out_NormalRawWS15_g170497 = Data15_g170497.NormalRawWS;
				Out_TangentOS15_g170497 = Data15_g170497.TangentOS;
				Out_ViewDirWS15_g170497 = Data15_g170497.ViewDirWS;
				Out_VertexData15_g170497 = Data15_g170497.VertexData;
				Out_MotionData15_g170497 = Data15_g170497.MotionData;
				Out_BoundsData15_g170497 = Data15_g170497.BoundsData;
				Out_RotationData15_g170497 = Data15_g170497.RotationData;
				float3 In_PositionOS16_g170498 = Out_PositionOS15_g170497;
				float3 In_PositionWS16_g170498 = Out_PositionWS15_g170497;
				float3 In_PositionWO16_g170498 = Out_PositionWO15_g170497;
				float3 temp_output_1567_26_g170496 = Out_PositionRawOS15_g170497;
				float3 In_PositionRawOS16_g170498 = temp_output_1567_26_g170496;
				float3 In_PositionAddOS16_g170498 = Out_PositionAddOS15_g170497;
				float3 In_PivotOS16_g170498 = Out_PivotOS15_g170497;
				float3 In_PivotWS16_g170498 = Out_PivotWS15_g170497;
				float3 In_PivotWO16_g170498 = Out_PivotWO15_g170497;
				half3 Model_NormalOS1568_g170496 = Out_NormalOS15_g170497;
				float3 lerpResult1617_g170496 = lerp( Model_NormalOS1568_g170496 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170496 = temp_output_1567_26_g170496;
				float3 normalizeResult1641_g170496 = ASESafeNormalize( ( Model_PositionRAW1592_g170496 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170496 = lerp( lerpResult1617_g170496 , normalizeResult1641_g170496 , _NormalSphereValue);
				float4 temp_output_1567_30_g170496 = Out_BoundsData15_g170497;
				half4 Model_VertexData1608_g170496 = temp_output_1567_30_g170496;
				float4 break1673_g170496 = Model_VertexData1608_g170496;
				float4 break33_g170499 = _normal_vert_mode;
				float temp_output_30_0_g170499 = ( break1673_g170496.x * break33_g170499.x );
				float temp_output_29_0_g170499 = ( break1673_g170496.y * break33_g170499.y );
				float temp_output_31_0_g170499 = ( break1673_g170496.z * break33_g170499.z );
				float temp_output_28_0_g170499 = ( temp_output_30_0_g170499 + temp_output_29_0_g170499 + temp_output_31_0_g170499 + ( break1673_g170496.w * break33_g170499.w ) );
				float clampResult17_g170501 = clamp( temp_output_28_0_g170499 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170500 = _NormalMeshRemap.x;
				float temp_output_10_0_g170500 = ( _NormalMeshRemap.y - temp_output_7_0_g170500 );
				float lerpResult1682_g170496 = lerp( 1.0 , saturate( ( ( clampResult17_g170501 - temp_output_7_0_g170500 ) / ( temp_output_10_0_g170500 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170502 = lerpResult1682_g170496;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170502 = ( temp_output_6_0_g170502 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170502 = temp_output_6_0_g170502;
				#endif
				float temp_output_1679_0_g170496 = staticSwitch14_g170502;
				half Normal_MeskMask1684_g170496 = temp_output_1679_0_g170496;
				float3 lerpResult1667_g170496 = lerp( Model_NormalOS1568_g170496 , lerpResult1616_g170496 , Normal_MeskMask1684_g170496);
				half3 Final_NormalOS1666_g170496 = lerpResult1667_g170496;
				float3 In_NormalOS16_g170498 = Final_NormalOS1666_g170496;
				float3 temp_output_1567_21_g170496 = Out_NormalWS15_g170497;
				float3 In_NormalWS16_g170498 = temp_output_1567_21_g170496;
				float3 In_NormalRawOS16_g170498 = Out_NormalRawOS15_g170497;
				float3 In_NormalRawWS16_g170498 = Out_NormalRawWS15_g170497;
				float4 In_TangentOS16_g170498 = Out_TangentOS15_g170497;
				float3 In_ViewDirWS16_g170498 = Out_ViewDirWS15_g170497;
				float4 In_VertexData16_g170498 = Out_VertexData15_g170497;
				float4 In_MotionData16_g170498 = Out_MotionData15_g170497;
				float4 In_BoundsData16_g170498 = temp_output_1567_30_g170496;
				float4 In_RotationData16_g170498 = Out_RotationData15_g170497;
				Data16_g170498.Dummy = In_Dummy16_g170498;
				Data16_g170498.PositionOS = In_PositionOS16_g170498;
				Data16_g170498.PositionWS = In_PositionWS16_g170498;
				Data16_g170498.PositionWO = In_PositionWO16_g170498;
				Data16_g170498.PositionRawOS = In_PositionRawOS16_g170498;
				Data16_g170498.PositionAddOS = In_PositionAddOS16_g170498;
				Data16_g170498.PivotOS = In_PivotOS16_g170498;
				Data16_g170498.PivotWS = In_PivotWS16_g170498;
				Data16_g170498.PivotWO = In_PivotWO16_g170498;
				Data16_g170498.NormalOS = In_NormalOS16_g170498;
				Data16_g170498.NormalWS = In_NormalWS16_g170498;
				Data16_g170498.NormalRawOS = In_NormalRawOS16_g170498;
				Data16_g170498.NormalRawWS = In_NormalRawWS16_g170498;
				Data16_g170498.TangentOS = In_TangentOS16_g170498;
				Data16_g170498.ViewDirWS = In_ViewDirWS16_g170498;
				Data16_g170498.VertexData = In_VertexData16_g170498;
				Data16_g170498.MotionData = In_MotionData16_g170498;
				Data16_g170498.BoundsData = In_BoundsData16_g170498;
				Data16_g170498.RotationData = In_RotationData16_g170498;
				TVEModelData Data15_g170514 = Data16_g170498;
				float Out_Dummy15_g170514 = 0;
				float3 Out_PositionOS15_g170514 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170514 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170514 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170514 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170514 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170514 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170514 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170514 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170514 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170514 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170514 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170514 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170514 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170514 = float3( 0,0,0 );
				float4 Out_VertexData15_g170514 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170514 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170514 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170514 = float4( 0,0,0,0 );
				Out_Dummy15_g170514 = Data15_g170514.Dummy;
				Out_PositionOS15_g170514 = Data15_g170514.PositionOS;
				Out_PositionWS15_g170514 = Data15_g170514.PositionWS;
				Out_PositionWO15_g170514 = Data15_g170514.PositionWO;
				Out_PositionRawOS15_g170514 = Data15_g170514.PositionRawOS;
				Out_PositionAddOS15_g170514 = Data15_g170514.PositionAddOS;
				Out_PivotOS15_g170514 = Data15_g170514.PivotOS;
				Out_PivotWS15_g170514 = Data15_g170514.PivotWS;
				Out_PivotWO15_g170514 = Data15_g170514.PivotWO;
				Out_NormalOS15_g170514 = Data15_g170514.NormalOS;
				Out_NormalWS15_g170514 = Data15_g170514.NormalWS;
				Out_NormalRawOS15_g170514 = Data15_g170514.NormalRawOS;
				Out_NormalRawWS15_g170514 = Data15_g170514.NormalRawWS;
				Out_TangentOS15_g170514 = Data15_g170514.TangentOS;
				Out_ViewDirWS15_g170514 = Data15_g170514.ViewDirWS;
				Out_VertexData15_g170514 = Data15_g170514.VertexData;
				Out_MotionData15_g170514 = Data15_g170514.MotionData;
				Out_BoundsData15_g170514 = Data15_g170514.BoundsData;
				Out_RotationData15_g170514 = Data15_g170514.RotationData;
				float3 temp_output_217_24_g170513 = Out_PivotOS15_g170514;
				float3 In_PositionOS16_g170515 = ( Out_PositionOS15_g170514 + temp_output_217_24_g170513 );
				float3 In_PositionWS16_g170515 = Out_PositionWS15_g170514;
				float3 In_PositionWO16_g170515 = Out_PositionWO15_g170514;
				float3 In_PositionRawOS16_g170515 = Out_PositionRawOS15_g170514;
				float3 In_PositionAddOS16_g170515 = Out_PositionAddOS15_g170514;
				float3 In_PivotOS16_g170515 = temp_output_217_24_g170513;
				float3 In_PivotWS16_g170515 = Out_PivotWS15_g170514;
				float3 In_PivotWO16_g170515 = Out_PivotWO15_g170514;
				float3 In_NormalOS16_g170515 = Out_NormalOS15_g170514;
				float3 In_NormalWS16_g170515 = Out_NormalWS15_g170514;
				float3 In_NormalRawOS16_g170515 = Out_NormalRawOS15_g170514;
				float3 In_NormalRawWS16_g170515 = Out_NormalRawWS15_g170514;
				float4 In_TangentOS16_g170515 = Out_TangentOS15_g170514;
				float3 In_ViewDirWS16_g170515 = Out_ViewDirWS15_g170514;
				float4 In_VertexData16_g170515 = Out_VertexData15_g170514;
				float4 In_MotionData16_g170515 = Out_MotionData15_g170514;
				float4 In_BoundsData16_g170515 = Out_BoundsData15_g170514;
				float4 In_RotationData16_g170515 = Out_RotationData15_g170514;
				Data16_g170515.Dummy = In_Dummy16_g170515;
				Data16_g170515.PositionOS = In_PositionOS16_g170515;
				Data16_g170515.PositionWS = In_PositionWS16_g170515;
				Data16_g170515.PositionWO = In_PositionWO16_g170515;
				Data16_g170515.PositionRawOS = In_PositionRawOS16_g170515;
				Data16_g170515.PositionAddOS = In_PositionAddOS16_g170515;
				Data16_g170515.PivotOS = In_PivotOS16_g170515;
				Data16_g170515.PivotWS = In_PivotWS16_g170515;
				Data16_g170515.PivotWO = In_PivotWO16_g170515;
				Data16_g170515.NormalOS = In_NormalOS16_g170515;
				Data16_g170515.NormalWS = In_NormalWS16_g170515;
				Data16_g170515.NormalRawOS = In_NormalRawOS16_g170515;
				Data16_g170515.NormalRawWS = In_NormalRawWS16_g170515;
				Data16_g170515.TangentOS = In_TangentOS16_g170515;
				Data16_g170515.ViewDirWS = In_ViewDirWS16_g170515;
				Data16_g170515.VertexData = In_VertexData16_g170515;
				Data16_g170515.MotionData = In_MotionData16_g170515;
				Data16_g170515.BoundsData = In_BoundsData16_g170515;
				Data16_g170515.RotationData = In_RotationData16_g170515;
				TVEModelData Data15_g170526 = Data16_g170515;
				float Out_Dummy15_g170526 = 0;
				float3 Out_PositionOS15_g170526 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170526 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170526 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170526 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170526 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170526 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170526 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170526 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170526 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170526 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170526 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170526 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170526 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170526 = float3( 0,0,0 );
				float4 Out_VertexData15_g170526 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170526 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170526 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170526 = float4( 0,0,0,0 );
				Out_Dummy15_g170526 = Data15_g170526.Dummy;
				Out_PositionOS15_g170526 = Data15_g170526.PositionOS;
				Out_PositionWS15_g170526 = Data15_g170526.PositionWS;
				Out_PositionWO15_g170526 = Data15_g170526.PositionWO;
				Out_PositionRawOS15_g170526 = Data15_g170526.PositionRawOS;
				Out_PositionAddOS15_g170526 = Data15_g170526.PositionAddOS;
				Out_PivotOS15_g170526 = Data15_g170526.PivotOS;
				Out_PivotWS15_g170526 = Data15_g170526.PivotWS;
				Out_PivotWO15_g170526 = Data15_g170526.PivotWO;
				Out_NormalOS15_g170526 = Data15_g170526.NormalOS;
				Out_NormalWS15_g170526 = Data15_g170526.NormalWS;
				Out_NormalRawOS15_g170526 = Data15_g170526.NormalRawOS;
				Out_NormalRawWS15_g170526 = Data15_g170526.NormalRawWS;
				Out_TangentOS15_g170526 = Data15_g170526.TangentOS;
				Out_ViewDirWS15_g170526 = Data15_g170526.ViewDirWS;
				Out_VertexData15_g170526 = Data15_g170526.VertexData;
				Out_MotionData15_g170526 = Data15_g170526.MotionData;
				Out_BoundsData15_g170526 = Data15_g170526.BoundsData;
				Out_RotationData15_g170526 = Data15_g170526.RotationData;
				float3 temp_output_31_0_g170523 = Out_PositionOS15_g170526;
				
				float4 temp_output_6_0_g170538 = Out_TangentOS15_g170526;
				float2 uv_WetnessDropsTex = v.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data2262 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + 0.0 ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + 0.0 ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170538 = ( temp_output_6_0_g170538 + ( Dummy_Data2262 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170538 = temp_output_6_0_g170538;
				#endif
				
				o.ase_texcoord5.xyz = vertexToFrag73_g170143;
				o.ase_texcoord6.xyz = vertexToFrag76_g170143;
				o.ase_texcoord7.xyz = ase_worldNormal;
				float3 ase_worldTangent = UnityObjectToWorldDir(v.tangent);
				o.ase_texcoord8.xyz = ase_worldTangent;
				float ase_vertexTangentSign = v.tangent.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				o.ase_texcoord9.xyz = ase_worldBitangent;
				float temp_output_6_0_g170303 = ( _MotionHighlightValue * Motion_FadeMask1820_g170277 * Wave_Intensity1900_g170277 * ( Base_Mask217_g170277 * Base_Mask217_g170277 ) * ( Wave_Noise1475_g170277 * Wave_Noise1475_g170277 * Wave_Noise1475_g170277 * Wave_Noise1475_g170277 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170303 = ( temp_output_6_0_g170303 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170303 = temp_output_6_0_g170303;
				#endif
				half Wave_Mask2479 = staticSwitch14_g170303;
				float4 appendResult23_g170419 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask2479));
				float4 vertexToFrag24_g170419 = appendResult23_g170419;
				o.ase_texcoord10 = vertexToFrag24_g170419;
				
				o.ase_texcoord3 = v.ase_texcoord;
				o.ase_texcoord4.xy = v.texcoord2.xyzw.xy;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord4.zw = 0;
				o.ase_texcoord5.w = 0;
				o.ase_texcoord6.w = 0;
				o.ase_texcoord7.w = 0;
				o.ase_texcoord8.w = 0;
				o.ase_texcoord9.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g170523 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g170526;
				v.tangent = staticSwitch14_g170538;

				#ifdef EDITOR_VISUALIZATION
					o.vizUV = 0;
					o.lightCoord = 0;
					if (unity_VisualizationMode == EDITORVIZ_TEXTURE)
						o.vizUV = UnityMetaVizUV(unity_EditorViz_UVIndex, v.texcoord.xy, v.texcoord1.xy, v.texcoord2.xy, unity_EditorViz_Texture_ST);
					else if (unity_VisualizationMode == EDITORVIZ_SHOWLIGHTMASK)
					{
						o.vizUV = v.texcoord1.xy * unity_LightmapST.xy + unity_LightmapST.zw;
						o.lightCoord = mul(unity_EditorViz_WorldToLight, mul(unity_ObjectToWorld, float4(v.vertex.xyz, 1)));
					}
				#endif

				o.pos = UnityMetaVertexPosition(v.vertex, v.texcoord1.xy, v.texcoord2.xy, unity_LightmapST, unity_DynamicLightmapST);

				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN 
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float localBreakData4_g170529 = ( 0.0 );
				float localCompData3_g170518 = ( 0.0 );
				TVEVisualData Data3_g170518 = (TVEVisualData)0;
				half Dummy145_g170516 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170518 = Dummy145_g170516;
				float localBreakData4_g170517 = ( 0.0 );
				float localCompData3_g170493 = ( 0.0 );
				TVEVisualData Data3_g170493 = (TVEVisualData)0;
				half Dummy145_g170481 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170493 = Dummy145_g170481;
				float localBreakData4_g170492 = ( 0.0 );
				float localCompData3_g170446 = ( 0.0 );
				TVEVisualData Data3_g170446 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = IN.ase_texcoord3.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g170443 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g170446 = Dummy594_g170443.r;
				float localBreakData4_g170444 = ( 0.0 );
				float localCompData3_g170442 = ( 0.0 );
				TVEVisualData Data3_g170442 = (TVEVisualData)0;
				float In_Dummy3_g170442 = 0.0;
				float localBreakData4_g170441 = ( 0.0 );
				float localCompData3_g170434 = ( 0.0 );
				TVEVisualData Data3_g170434 = (TVEVisualData)0;
				half Dummy220_g170430 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170434 = Dummy220_g170430;
				float localBreakData4_g170433 = ( 0.0 );
				float localCompData3_g170422 = ( 0.0 );
				TVEVisualData Data3_g170422 = (TVEVisualData)0;
				half Dummy202_g170420 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170422 = Dummy202_g170420;
				float localBreakData4_g170421 = ( 0.0 );
				float localCompData3_g170403 = ( 0.0 );
				TVEVisualData Data3_g170403 = (TVEVisualData)0;
				half4 Dummy944_g170386 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170403 = Dummy944_g170386.x;
				float localBreakData4_g170402 = ( 0.0 );
				float localCompData3_g170363 = ( 0.0 );
				TVEVisualData Data3_g170363 = (TVEVisualData)0;
				half4 Dummy946_g170352 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170363 = Dummy946_g170352.x;
				float localBreakData4_g170366 = ( 0.0 );
				float localCompData3_g170344 = ( 0.0 );
				TVEVisualData Data3_g170344 = (TVEVisualData)0;
				half4 Dummy130_g170334 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170344 = Dummy130_g170334.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170345) = _MainAlbedoTex;
				float localFilterTexture19_g170348 = ( 0.0 );
				SamplerState SamplerDefault19_g170348 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170348 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170348 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170348 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170348 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170348 = SamplerDefault19_g170348;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170348 = SamplerDefault19_g170348;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170348 = SamplerPoint19_g170348;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170348 = SamplerLow19_g170348;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170348 = SamplerMedium19_g170348;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170348 = SamplerHigh19_g170348;
				#endif
				SamplerState Sampler276_g170345 = SS19_g170348;
				half4 Local_Coords180_g170334 = _main_coord_value;
				float4 temp_output_37_0_g170345 = Local_Coords180_g170334;
				half4 Coords276_g170345 = temp_output_37_0_g170345;
				half2 TexCoord276_g170345 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170345 = SampleMain( Texture276_g170345 , Sampler276_g170345 , Coords276_g170345 , TexCoord276_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170345) = _MainAlbedoTex;
				SamplerState Sampler275_g170345 = SS19_g170348;
				half4 Coords275_g170345 = temp_output_37_0_g170345;
				half2 TexCoord275_g170345 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170345 = SampleExtra( Texture275_g170345 , Sampler275_g170345 , Coords275_g170345 , TexCoord275_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170345) = _MainAlbedoTex;
				SamplerState Sampler238_g170345 = SS19_g170348;
				half4 Coords238_g170345 = temp_output_37_0_g170345;
				TVEModelData Data16_g170157 = (TVEModelData)0;
				float In_Dummy16_g170157 = 0.0;
				float3 In_PositionOS16_g170157 = float3( 0,0,0 );
				float3 vertexToFrag73_g170143 = IN.ase_texcoord5.xyz;
				half3 PositionWS122_g170143 = vertexToFrag73_g170143;
				float3 In_PositionWS16_g170157 = PositionWS122_g170143;
				float3 vertexToFrag76_g170143 = IN.ase_texcoord6.xyz;
				half3 PivotWS121_g170143 = vertexToFrag76_g170143;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170143 = ( PositionWS122_g170143 - PivotWS121_g170143 );
				#else
				float3 staticSwitch204_g170143 = PositionWS122_g170143;
				#endif
				half3 PositionWO132_g170143 = ( staticSwitch204_g170143 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170157 = PositionWO132_g170143;
				float3 In_PositionRawOS16_g170157 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170157 = float3( 0,0,0 );
				float3 In_PivotOS16_g170157 = float3( 0,0,0 );
				float3 In_PivotWS16_g170157 = PivotWS121_g170143;
				half3 PivotWO133_g170143 = ( PivotWS121_g170143 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170157 = PivotWO133_g170143;
				float3 In_NormalOS16_g170157 = float3( 0,0,0 );
				float3 ase_worldNormal = IN.ase_texcoord7.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170143 = normalizedWorldNormal;
				float3 In_NormalWS16_g170157 = Normal_WS95_g170143;
				float3 In_NormalRawOS16_g170157 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170157 = float3( 0,0,0 );
				float4 In_TangentOS16_g170157 = float4( 0,1,0,1 );
				float3 normalizeResult296_g170143 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170143 ) );
				half3 ViewDirWS169_g170143 = normalizeResult296_g170143;
				float3 In_ViewDirWS16_g170157 = ViewDirWS169_g170143;
				half4 VertexMasks171_g170143 = IN.ase_color;
				float4 In_VertexData16_g170157 = VertexMasks171_g170143;
				float4 In_MotionData16_g170157 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170157 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170157 = float4( 0,0,0,0 );
				Data16_g170157.Dummy = In_Dummy16_g170157;
				Data16_g170157.PositionOS = In_PositionOS16_g170157;
				Data16_g170157.PositionWS = In_PositionWS16_g170157;
				Data16_g170157.PositionWO = In_PositionWO16_g170157;
				Data16_g170157.PositionRawOS = In_PositionRawOS16_g170157;
				Data16_g170157.PositionAddOS = In_PositionAddOS16_g170157;
				Data16_g170157.PivotOS = In_PivotOS16_g170157;
				Data16_g170157.PivotWS = In_PivotWS16_g170157;
				Data16_g170157.PivotWO = In_PivotWO16_g170157;
				Data16_g170157.NormalOS = In_NormalOS16_g170157;
				Data16_g170157.NormalWS = In_NormalWS16_g170157;
				Data16_g170157.NormalRawOS = In_NormalRawOS16_g170157;
				Data16_g170157.NormalRawWS = In_NormalRawWS16_g170157;
				Data16_g170157.TangentOS = In_TangentOS16_g170157;
				Data16_g170157.ViewDirWS = In_ViewDirWS16_g170157;
				Data16_g170157.VertexData = In_VertexData16_g170157;
				Data16_g170157.MotionData = In_MotionData16_g170157;
				Data16_g170157.BoundsData = In_BoundsData16_g170157;
				Data16_g170157.RotationData = In_RotationData16_g170157;
				TVEModelData Data15_g170335 = Data16_g170157;
				float Out_Dummy15_g170335 = 0;
				float3 Out_PositionOS15_g170335 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170335 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170335 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170335 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170335 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170335 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170335 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170335 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170335 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170335 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170335 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170335 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170335 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170335 = float3( 0,0,0 );
				float4 Out_VertexData15_g170335 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170335 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170335 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170335 = float4( 0,0,0,0 );
				Out_Dummy15_g170335 = Data15_g170335.Dummy;
				Out_PositionOS15_g170335 = Data15_g170335.PositionOS;
				Out_PositionWS15_g170335 = Data15_g170335.PositionWS;
				Out_PositionWO15_g170335 = Data15_g170335.PositionWO;
				Out_PositionRawOS15_g170335 = Data15_g170335.PositionRawOS;
				Out_PositionAddOS15_g170335 = Data15_g170335.PositionAddOS;
				Out_PivotOS15_g170335 = Data15_g170335.PivotOS;
				Out_PivotWS15_g170335 = Data15_g170335.PivotWS;
				Out_PivotWO15_g170335 = Data15_g170335.PivotWO;
				Out_NormalOS15_g170335 = Data15_g170335.NormalOS;
				Out_NormalWS15_g170335 = Data15_g170335.NormalWS;
				Out_NormalRawOS15_g170335 = Data15_g170335.NormalRawOS;
				Out_NormalRawWS15_g170335 = Data15_g170335.NormalRawWS;
				Out_TangentOS15_g170335 = Data15_g170335.TangentOS;
				Out_ViewDirWS15_g170335 = Data15_g170335.ViewDirWS;
				Out_VertexData15_g170335 = Data15_g170335.VertexData;
				Out_MotionData15_g170335 = Data15_g170335.MotionData;
				Out_BoundsData15_g170335 = Data15_g170335.BoundsData;
				Out_RotationData15_g170335 = Data15_g170335.RotationData;
				half3 Model_PositionWO222_g170334 = Out_PositionWO15_g170335;
				float3 temp_output_279_0_g170345 = Model_PositionWO222_g170334;
				half3 WorldPosition238_g170345 = temp_output_279_0_g170345;
				half4 localSamplePlanar2D238_g170345 = SamplePlanar2D( Texture238_g170345 , Sampler238_g170345 , Coords238_g170345 , WorldPosition238_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170345) = _MainAlbedoTex;
				SamplerState Sampler246_g170345 = SS19_g170348;
				half4 Coords246_g170345 = temp_output_37_0_g170345;
				half3 WorldPosition246_g170345 = temp_output_279_0_g170345;
				half3 Model_NormalWS226_g170334 = Out_NormalWS15_g170335;
				float3 temp_output_280_0_g170345 = Model_NormalWS226_g170334;
				half3 WorldNormal246_g170345 = temp_output_280_0_g170345;
				half4 localSamplePlanar3D246_g170345 = SamplePlanar3D( Texture246_g170345 , Sampler246_g170345 , Coords246_g170345 , WorldPosition246_g170345 , WorldNormal246_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170345) = _MainAlbedoTex;
				SamplerState Sampler234_g170345 = SS19_g170348;
				float4 Coords234_g170345 = temp_output_37_0_g170345;
				float3 WorldPosition234_g170345 = temp_output_279_0_g170345;
				float4 localSampleStochastic2D234_g170345 = SampleStochastic2D( Texture234_g170345 , Sampler234_g170345 , Coords234_g170345 , WorldPosition234_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170345) = _MainAlbedoTex;
				SamplerState Sampler263_g170345 = SS19_g170348;
				half4 Coords263_g170345 = temp_output_37_0_g170345;
				half3 WorldPosition263_g170345 = temp_output_279_0_g170345;
				half3 WorldNormal263_g170345 = temp_output_280_0_g170345;
				half4 localSampleStochastic3D263_g170345 = SampleStochastic3D( Texture263_g170345 , Sampler263_g170345 , Coords263_g170345 , WorldPosition263_g170345 , WorldNormal263_g170345 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170334 = localSampleMain276_g170345;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170334 = localSampleExtra275_g170345;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170334 = localSamplePlanar2D238_g170345;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170334 = localSamplePlanar3D246_g170345;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170334 = localSampleStochastic2D234_g170345;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170334 = localSampleStochastic3D263_g170345;
				#else
				float4 staticSwitch184_g170334 = localSampleMain276_g170345;
				#endif
				half4 Local_AlbedoTex185_g170334 = staticSwitch184_g170334;
				float3 lerpResult53_g170334 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170334).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170334 = lerpResult53_g170334;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170347) = _MainShaderTex;
				float localFilterTexture30_g170350 = ( 0.0 );
				SamplerState SamplerDefault30_g170350 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170350 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170350 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170350 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170350 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170350 = SamplerDefault30_g170350;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170350 = SamplerDefault30_g170350;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170350 = SamplerPoint30_g170350;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170350 = SamplerLow30_g170350;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170350 = SamplerMedium30_g170350;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170350 = SamplerHigh30_g170350;
				#endif
				SamplerState Sampler276_g170347 = SS30_g170350;
				float4 temp_output_37_0_g170347 = Local_Coords180_g170334;
				half4 Coords276_g170347 = temp_output_37_0_g170347;
				half2 TexCoord276_g170347 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170347 = SampleMain( Texture276_g170347 , Sampler276_g170347 , Coords276_g170347 , TexCoord276_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170347) = _MainShaderTex;
				SamplerState Sampler275_g170347 = SS30_g170350;
				half4 Coords275_g170347 = temp_output_37_0_g170347;
				half2 TexCoord275_g170347 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170347 = SampleExtra( Texture275_g170347 , Sampler275_g170347 , Coords275_g170347 , TexCoord275_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170347) = _MainShaderTex;
				SamplerState Sampler238_g170347 = SS30_g170350;
				half4 Coords238_g170347 = temp_output_37_0_g170347;
				float3 temp_output_279_0_g170347 = Model_PositionWO222_g170334;
				half3 WorldPosition238_g170347 = temp_output_279_0_g170347;
				half4 localSamplePlanar2D238_g170347 = SamplePlanar2D( Texture238_g170347 , Sampler238_g170347 , Coords238_g170347 , WorldPosition238_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170347) = _MainShaderTex;
				SamplerState Sampler246_g170347 = SS30_g170350;
				half4 Coords246_g170347 = temp_output_37_0_g170347;
				half3 WorldPosition246_g170347 = temp_output_279_0_g170347;
				float3 temp_output_280_0_g170347 = Model_NormalWS226_g170334;
				half3 WorldNormal246_g170347 = temp_output_280_0_g170347;
				half4 localSamplePlanar3D246_g170347 = SamplePlanar3D( Texture246_g170347 , Sampler246_g170347 , Coords246_g170347 , WorldPosition246_g170347 , WorldNormal246_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170347) = _MainShaderTex;
				SamplerState Sampler234_g170347 = SS30_g170350;
				float4 Coords234_g170347 = temp_output_37_0_g170347;
				float3 WorldPosition234_g170347 = temp_output_279_0_g170347;
				float4 localSampleStochastic2D234_g170347 = SampleStochastic2D( Texture234_g170347 , Sampler234_g170347 , Coords234_g170347 , WorldPosition234_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170347) = _MainShaderTex;
				SamplerState Sampler263_g170347 = SS30_g170350;
				half4 Coords263_g170347 = temp_output_37_0_g170347;
				half3 WorldPosition263_g170347 = temp_output_279_0_g170347;
				half3 WorldNormal263_g170347 = temp_output_280_0_g170347;
				half4 localSampleStochastic3D263_g170347 = SampleStochastic3D( Texture263_g170347 , Sampler263_g170347 , Coords263_g170347 , WorldPosition263_g170347 , WorldNormal263_g170347 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170334 = localSampleMain276_g170347;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170334 = localSampleExtra275_g170347;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170334 = localSamplePlanar2D238_g170347;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170334 = localSamplePlanar3D246_g170347;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170334 = localSampleStochastic2D234_g170347;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170334 = localSampleStochastic3D263_g170347;
				#else
				float4 staticSwitch198_g170334 = localSampleMain276_g170347;
				#endif
				half4 Local_MasksTex199_g170334 = staticSwitch198_g170334;
				float lerpResult23_g170334 = lerp( 1.0 , (Local_MasksTex199_g170334).y , _MainOcclusionValue);
				float4 appendResult73_g170334 = (float4(( (Local_MasksTex199_g170334).x * _MainMetallicValue ) , lerpResult23_g170334 , (Local_MasksTex199_g170334).z , ( (Local_MasksTex199_g170334).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170334 = appendResult73_g170334;
				float clampResult17_g170340 = clamp( (Local_Masks109_g170334).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170341 = _MainMultiRemap.x;
				float temp_output_10_0_g170341 = ( _MainMultiRemap.y - temp_output_7_0_g170341 );
				half Local_MultiMask78_g170334 = saturate( ( ( clampResult17_g170340 - temp_output_7_0_g170341 ) / ( temp_output_10_0_g170341 + 0.0001 ) ) );
				float lerpResult58_g170334 = lerp( 1.0 , Local_MultiMask78_g170334 , _MainColorMode);
				float4 lerpResult62_g170334 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170334);
				half3 Local_ColorRGB93_g170334 = (lerpResult62_g170334).rgb;
				half3 Local_Albedo139_g170334 = ( Local_AlbedoRGB107_g170334 * Local_ColorRGB93_g170334 );
				float3 In_Albedo3_g170344 = Local_Albedo139_g170334;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170346) = _MainNormalTex;
				float localFilterTexture29_g170349 = ( 0.0 );
				SamplerState SamplerDefault29_g170349 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170349 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170349 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170349 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170349 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170349 = SamplerDefault29_g170349;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170349 = SamplerDefault29_g170349;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170349 = SamplerPoint29_g170349;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170349 = SamplerLow29_g170349;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170349 = SamplerMedium29_g170349;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170349 = SamplerHigh29_g170349;
				#endif
				SamplerState Sampler276_g170346 = SS29_g170349;
				float4 temp_output_37_0_g170346 = Local_Coords180_g170334;
				half4 Coords276_g170346 = temp_output_37_0_g170346;
				half2 TexCoord276_g170346 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170346 = SampleMain( Texture276_g170346 , Sampler276_g170346 , Coords276_g170346 , TexCoord276_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170346) = _MainNormalTex;
				SamplerState Sampler275_g170346 = SS29_g170349;
				half4 Coords275_g170346 = temp_output_37_0_g170346;
				half2 TexCoord275_g170346 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170346 = SampleExtra( Texture275_g170346 , Sampler275_g170346 , Coords275_g170346 , TexCoord275_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170346) = _MainNormalTex;
				SamplerState Sampler238_g170346 = SS29_g170349;
				half4 Coords238_g170346 = temp_output_37_0_g170346;
				float3 temp_output_279_0_g170346 = Model_PositionWO222_g170334;
				half3 WorldPosition238_g170346 = temp_output_279_0_g170346;
				half4 localSamplePlanar2D238_g170346 = SamplePlanar2D( Texture238_g170346 , Sampler238_g170346 , Coords238_g170346 , WorldPosition238_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170346) = _MainNormalTex;
				SamplerState Sampler246_g170346 = SS29_g170349;
				half4 Coords246_g170346 = temp_output_37_0_g170346;
				half3 WorldPosition246_g170346 = temp_output_279_0_g170346;
				float3 temp_output_280_0_g170346 = Model_NormalWS226_g170334;
				half3 WorldNormal246_g170346 = temp_output_280_0_g170346;
				half4 localSamplePlanar3D246_g170346 = SamplePlanar3D( Texture246_g170346 , Sampler246_g170346 , Coords246_g170346 , WorldPosition246_g170346 , WorldNormal246_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170346) = _MainNormalTex;
				SamplerState Sampler234_g170346 = SS29_g170349;
				float4 Coords234_g170346 = temp_output_37_0_g170346;
				float3 WorldPosition234_g170346 = temp_output_279_0_g170346;
				float4 localSampleStochastic2D234_g170346 = SampleStochastic2D( Texture234_g170346 , Sampler234_g170346 , Coords234_g170346 , WorldPosition234_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170346) = _MainNormalTex;
				SamplerState Sampler263_g170346 = SS29_g170349;
				half4 Coords263_g170346 = temp_output_37_0_g170346;
				half3 WorldPosition263_g170346 = temp_output_279_0_g170346;
				half3 WorldNormal263_g170346 = temp_output_280_0_g170346;
				half4 localSampleStochastic3D263_g170346 = SampleStochastic3D( Texture263_g170346 , Sampler263_g170346 , Coords263_g170346 , WorldPosition263_g170346 , WorldNormal263_g170346 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170334 = localSampleMain276_g170346;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170334 = localSampleExtra275_g170346;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170334 = localSamplePlanar2D238_g170346;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170334 = localSamplePlanar3D246_g170346;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170334 = localSampleStochastic2D234_g170346;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170334 = localSampleStochastic3D263_g170346;
				#else
				float4 staticSwitch193_g170334 = localSampleMain276_g170346;
				#endif
				half4 Local_NormaTex191_g170334 = staticSwitch193_g170334;
				half4 Normal_Packed45_g170336 = Local_NormaTex191_g170334;
				float2 appendResult58_g170336 = (float2(( (Normal_Packed45_g170336).x * (Normal_Packed45_g170336).w ) , (Normal_Packed45_g170336).y));
				half2 Normal_Default50_g170336 = appendResult58_g170336;
				half2 Normal_ASTC41_g170336 = (Normal_Packed45_g170336).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170336 = Normal_ASTC41_g170336;
				#else
				float2 staticSwitch38_g170336 = Normal_Default50_g170336;
				#endif
				half2 Normal_NO_DTX544_g170336 = (Normal_Packed45_g170336).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170336 = Normal_NO_DTX544_g170336;
				#else
				float2 staticSwitch37_g170336 = staticSwitch38_g170336;
				#endif
				float2 temp_output_26_0_g170334 = ( (staticSwitch37_g170336*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = IN.ase_texcoord8.xyz;
				float3 ase_worldBitangent = IN.ase_texcoord9.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g170337 = temp_output_26_0_g170334;
				float2 break71_g170337 = Normal_Planar45_g170337;
				float3 appendResult72_g170337 = (float3(break71_g170337.x , 0.0 , break71_g170337.y));
				float2 temp_output_205_0_g170334 = (mul( ase_worldToTangent, appendResult72_g170337 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170334 = temp_output_26_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170334 = temp_output_26_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170334 = temp_output_205_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170334 = temp_output_205_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170334 = temp_output_205_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170334 = temp_output_205_0_g170334;
				#else
				float2 staticSwitch204_g170334 = temp_output_26_0_g170334;
				#endif
				half2 Local_NormalTS108_g170334 = staticSwitch204_g170334;
				float2 In_NormalTS3_g170344 = Local_NormalTS108_g170334;
				float3 appendResult68_g170338 = (float3(Local_NormalTS108_g170334 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g170338 = appendResult68_g170338;
				float3 worldNormal74_g170338 = normalize( float3(dot(tanToWorld0,tanNormal74_g170338), dot(tanToWorld1,tanNormal74_g170338), dot(tanToWorld2,tanNormal74_g170338)) );
				half3 Local_NormalWS250_g170334 = worldNormal74_g170338;
				float3 In_NormalWS3_g170344 = Local_NormalWS250_g170334;
				float4 In_Shader3_g170344 = Local_Masks109_g170334;
				float4 In_Emissive3_g170344 = half4(1,1,1,1);
				float3 temp_output_3_0_g170339 = Local_Albedo139_g170334;
				float dotResult20_g170339 = dot( temp_output_3_0_g170339 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170334 = dotResult20_g170339;
				float In_Grayscale3_g170344 = Local_Grayscale110_g170334;
				float clampResult144_g170334 = clamp( saturate( ( Local_Grayscale110_g170334 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170334 = clampResult144_g170334;
				float In_Luminosity3_g170344 = Local_Luminosity145_g170334;
				float In_MultiMask3_g170344 = Local_MultiMask78_g170334;
				float temp_output_187_0_g170334 = (Local_AlbedoTex185_g170334).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170334 = ( temp_output_187_0_g170334 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170334 = temp_output_187_0_g170334;
				#endif
				half Local_AlphaClip111_g170334 = staticSwitch236_g170334;
				float In_AlphaClip3_g170344 = Local_AlphaClip111_g170334;
				half Local_AlphaFade246_g170334 = (lerpResult62_g170334).a;
				float In_AlphaFade3_g170344 = Local_AlphaFade246_g170334;
				float3 temp_cast_5 = (1.0).xxx;
				float3 In_Translucency3_g170344 = temp_cast_5;
				float In_Transmission3_g170344 = 1.0;
				float In_Thickness3_g170344 = 0.0;
				float In_Diffusion3_g170344 = 0.0;
				Data3_g170344.Dummy = In_Dummy3_g170344;
				Data3_g170344.Albedo = In_Albedo3_g170344;
				Data3_g170344.NormalTS = In_NormalTS3_g170344;
				Data3_g170344.NormalWS = In_NormalWS3_g170344;
				Data3_g170344.Shader = In_Shader3_g170344;
				Data3_g170344.Emissive= In_Emissive3_g170344;
				Data3_g170344.MultiMask = In_MultiMask3_g170344;
				Data3_g170344.Grayscale = In_Grayscale3_g170344;
				Data3_g170344.Luminosity = In_Luminosity3_g170344;
				Data3_g170344.AlphaClip = In_AlphaClip3_g170344;
				Data3_g170344.AlphaFade = In_AlphaFade3_g170344;
				Data3_g170344.Translucency = In_Translucency3_g170344;
				Data3_g170344.Transmission = In_Transmission3_g170344;
				Data3_g170344.Thickness = In_Thickness3_g170344;
				Data3_g170344.Diffusion = In_Diffusion3_g170344;
				TVEVisualData Data4_g170366 = Data3_g170344;
				float Out_Dummy4_g170366 = 0;
				float3 Out_Albedo4_g170366 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170366 = float2( 0,0 );
				float3 Out_NormalWS4_g170366 = float3( 0,0,0 );
				float4 Out_Shader4_g170366 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170366 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170366 = 0;
				float Out_Grayscale4_g170366 = 0;
				float Out_Luminosity4_g170366 = 0;
				float Out_AlphaClip4_g170366 = 0;
				float Out_AlphaFade4_g170366 = 0;
				float3 Out_Translucency4_g170366 = float3( 0,0,0 );
				float Out_Transmission4_g170366 = 0;
				float Out_Thickness4_g170366 = 0;
				float Out_Diffusion4_g170366 = 0;
				Out_Dummy4_g170366 = Data4_g170366.Dummy;
				Out_Albedo4_g170366 = Data4_g170366.Albedo;
				Out_NormalTS4_g170366 = Data4_g170366.NormalTS;
				Out_NormalWS4_g170366 = Data4_g170366.NormalWS;
				Out_Shader4_g170366 = Data4_g170366.Shader;
				Out_Emissive4_g170366= Data4_g170366.Emissive;
				Out_MultiMask4_g170366 = Data4_g170366.MultiMask;
				Out_Grayscale4_g170366 = Data4_g170366.Grayscale;
				Out_Luminosity4_g170366= Data4_g170366.Luminosity;
				Out_AlphaClip4_g170366 = Data4_g170366.AlphaClip;
				Out_AlphaFade4_g170366 = Data4_g170366.AlphaFade;
				Out_Translucency4_g170366 = Data4_g170366.Translucency;
				Out_Transmission4_g170366 = Data4_g170366.Transmission;
				Out_Thickness4_g170366 = Data4_g170366.Thickness;
				Out_Diffusion4_g170366 = Data4_g170366.Diffusion;
				half3 Visual_Albedo527_g170352 = Out_Albedo4_g170366;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170353) = _SecondAlbedoTex;
				float localFilterTexture19_g170383 = ( 0.0 );
				SamplerState SamplerDefault19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170383 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170383 = SamplerDefault19_g170383;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170383 = SamplerDefault19_g170383;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170383 = SamplerPoint19_g170383;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170383 = SamplerLow19_g170383;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170383 = SamplerMedium19_g170383;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170383 = SamplerHigh19_g170383;
				#endif
				SamplerState Sampler276_g170353 = SS19_g170383;
				half4 Local_LayerCoords790_g170352 = _second_coord_value;
				float4 temp_output_37_0_g170353 = Local_LayerCoords790_g170352;
				half4 Coords276_g170353 = temp_output_37_0_g170353;
				half2 TexCoord276_g170353 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170353 = SampleMain( Texture276_g170353 , Sampler276_g170353 , Coords276_g170353 , TexCoord276_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170353) = _SecondAlbedoTex;
				SamplerState Sampler275_g170353 = SS19_g170383;
				half4 Coords275_g170353 = temp_output_37_0_g170353;
				half2 TexCoord275_g170353 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170353 = SampleExtra( Texture275_g170353 , Sampler275_g170353 , Coords275_g170353 , TexCoord275_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170353) = _SecondAlbedoTex;
				SamplerState Sampler238_g170353 = SS19_g170383;
				half4 Coords238_g170353 = temp_output_37_0_g170353;
				TVEModelData Data15_g170364 = Data16_g170157;
				float Out_Dummy15_g170364 = 0;
				float3 Out_PositionOS15_g170364 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170364 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170364 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170364 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170364 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170364 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170364 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170364 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170364 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170364 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170364 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170364 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170364 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170364 = float3( 0,0,0 );
				float4 Out_VertexData15_g170364 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170364 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170364 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170364 = float4( 0,0,0,0 );
				Out_Dummy15_g170364 = Data15_g170364.Dummy;
				Out_PositionOS15_g170364 = Data15_g170364.PositionOS;
				Out_PositionWS15_g170364 = Data15_g170364.PositionWS;
				Out_PositionWO15_g170364 = Data15_g170364.PositionWO;
				Out_PositionRawOS15_g170364 = Data15_g170364.PositionRawOS;
				Out_PositionAddOS15_g170364 = Data15_g170364.PositionAddOS;
				Out_PivotOS15_g170364 = Data15_g170364.PivotOS;
				Out_PivotWS15_g170364 = Data15_g170364.PivotWS;
				Out_PivotWO15_g170364 = Data15_g170364.PivotWO;
				Out_NormalOS15_g170364 = Data15_g170364.NormalOS;
				Out_NormalWS15_g170364 = Data15_g170364.NormalWS;
				Out_NormalRawOS15_g170364 = Data15_g170364.NormalRawOS;
				Out_NormalRawWS15_g170364 = Data15_g170364.NormalRawWS;
				Out_TangentOS15_g170364 = Data15_g170364.TangentOS;
				Out_ViewDirWS15_g170364 = Data15_g170364.ViewDirWS;
				Out_VertexData15_g170364 = Data15_g170364.VertexData;
				Out_MotionData15_g170364 = Data15_g170364.MotionData;
				Out_BoundsData15_g170364 = Data15_g170364.BoundsData;
				Out_RotationData15_g170364 = Data15_g170364.RotationData;
				half3 Model_PositionWO636_g170352 = Out_PositionWO15_g170364;
				float3 temp_output_279_0_g170353 = Model_PositionWO636_g170352;
				half3 WorldPosition238_g170353 = temp_output_279_0_g170353;
				half4 localSamplePlanar2D238_g170353 = SamplePlanar2D( Texture238_g170353 , Sampler238_g170353 , Coords238_g170353 , WorldPosition238_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170353) = _SecondAlbedoTex;
				SamplerState Sampler246_g170353 = SS19_g170383;
				half4 Coords246_g170353 = temp_output_37_0_g170353;
				half3 WorldPosition246_g170353 = temp_output_279_0_g170353;
				half3 Model_NormalWS869_g170352 = Out_NormalWS15_g170364;
				float3 temp_output_280_0_g170353 = Model_NormalWS869_g170352;
				half3 WorldNormal246_g170353 = temp_output_280_0_g170353;
				half4 localSamplePlanar3D246_g170353 = SamplePlanar3D( Texture246_g170353 , Sampler246_g170353 , Coords246_g170353 , WorldPosition246_g170353 , WorldNormal246_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170353) = _SecondAlbedoTex;
				SamplerState Sampler234_g170353 = SS19_g170383;
				float4 Coords234_g170353 = temp_output_37_0_g170353;
				float3 WorldPosition234_g170353 = temp_output_279_0_g170353;
				float4 localSampleStochastic2D234_g170353 = SampleStochastic2D( Texture234_g170353 , Sampler234_g170353 , Coords234_g170353 , WorldPosition234_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170353) = _SecondAlbedoTex;
				SamplerState Sampler263_g170353 = SS19_g170383;
				half4 Coords263_g170353 = temp_output_37_0_g170353;
				half3 WorldPosition263_g170353 = temp_output_279_0_g170353;
				half3 WorldNormal263_g170353 = temp_output_280_0_g170353;
				half4 localSampleStochastic3D263_g170353 = SampleStochastic3D( Texture263_g170353 , Sampler263_g170353 , Coords263_g170353 , WorldPosition263_g170353 , WorldNormal263_g170353 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170352 = localSampleMain276_g170353;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170352 = localSampleExtra275_g170353;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170352 = localSamplePlanar2D238_g170353;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170352 = localSamplePlanar3D246_g170353;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170352 = localSampleStochastic2D234_g170353;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170352 = localSampleStochastic3D263_g170353;
				#else
				float4 staticSwitch693_g170352 = localSampleMain276_g170353;
				#endif
				half4 Local_AlbedoTex777_g170352 = staticSwitch693_g170352;
				float3 lerpResult716_g170352 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170352).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170352 = lerpResult716_g170352;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170355) = _SecondShaderTex;
				float localFilterTexture30_g170385 = ( 0.0 );
				SamplerState SamplerDefault30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170385 = SamplerDefault30_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170385 = SamplerDefault30_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170385 = SamplerPoint30_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170385 = SamplerLow30_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170385 = SamplerMedium30_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170385 = SamplerHigh30_g170385;
				#endif
				SamplerState Sampler276_g170355 = SS30_g170385;
				float4 temp_output_37_0_g170355 = Local_LayerCoords790_g170352;
				half4 Coords276_g170355 = temp_output_37_0_g170355;
				half2 TexCoord276_g170355 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170355 = SampleMain( Texture276_g170355 , Sampler276_g170355 , Coords276_g170355 , TexCoord276_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170355) = _SecondShaderTex;
				SamplerState Sampler275_g170355 = SS30_g170385;
				half4 Coords275_g170355 = temp_output_37_0_g170355;
				half2 TexCoord275_g170355 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170355 = SampleExtra( Texture275_g170355 , Sampler275_g170355 , Coords275_g170355 , TexCoord275_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170355) = _SecondShaderTex;
				SamplerState Sampler238_g170355 = SS30_g170385;
				half4 Coords238_g170355 = temp_output_37_0_g170355;
				float3 temp_output_279_0_g170355 = Model_PositionWO636_g170352;
				half3 WorldPosition238_g170355 = temp_output_279_0_g170355;
				half4 localSamplePlanar2D238_g170355 = SamplePlanar2D( Texture238_g170355 , Sampler238_g170355 , Coords238_g170355 , WorldPosition238_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170355) = _SecondShaderTex;
				SamplerState Sampler246_g170355 = SS30_g170385;
				half4 Coords246_g170355 = temp_output_37_0_g170355;
				half3 WorldPosition246_g170355 = temp_output_279_0_g170355;
				float3 temp_output_280_0_g170355 = Model_NormalWS869_g170352;
				half3 WorldNormal246_g170355 = temp_output_280_0_g170355;
				half4 localSamplePlanar3D246_g170355 = SamplePlanar3D( Texture246_g170355 , Sampler246_g170355 , Coords246_g170355 , WorldPosition246_g170355 , WorldNormal246_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170355) = _SecondShaderTex;
				SamplerState Sampler234_g170355 = SS30_g170385;
				float4 Coords234_g170355 = temp_output_37_0_g170355;
				float3 WorldPosition234_g170355 = temp_output_279_0_g170355;
				float4 localSampleStochastic2D234_g170355 = SampleStochastic2D( Texture234_g170355 , Sampler234_g170355 , Coords234_g170355 , WorldPosition234_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170355) = _SecondShaderTex;
				SamplerState Sampler263_g170355 = SS30_g170385;
				half4 Coords263_g170355 = temp_output_37_0_g170355;
				half3 WorldPosition263_g170355 = temp_output_279_0_g170355;
				half3 WorldNormal263_g170355 = temp_output_280_0_g170355;
				half4 localSampleStochastic3D263_g170355 = SampleStochastic3D( Texture263_g170355 , Sampler263_g170355 , Coords263_g170355 , WorldPosition263_g170355 , WorldNormal263_g170355 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170352 = localSampleMain276_g170355;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170352 = localSampleExtra275_g170355;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170352 = localSamplePlanar2D238_g170355;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170352 = localSamplePlanar3D246_g170355;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170352 = localSampleStochastic2D234_g170355;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170352 = localSampleStochastic3D263_g170355;
				#else
				float4 staticSwitch722_g170352 = localSampleMain276_g170355;
				#endif
				half4 Local_ShaderTex775_g170352 = staticSwitch722_g170352;
				float lerpResult739_g170352 = lerp( 1.0 , (Local_ShaderTex775_g170352).y , _SecondOcclusionValue);
				float4 appendResult749_g170352 = (float4(( (Local_ShaderTex775_g170352).x * _SecondMetallicValue ) , lerpResult739_g170352 , (Local_ShaderTex775_g170352).z , ( (Local_ShaderTex775_g170352).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170352 = appendResult749_g170352;
				float clampResult17_g170359 = clamp( (Local_Masks750_g170352).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170360 = _SecondMultiRemap.x;
				float temp_output_10_0_g170360 = ( _SecondMultiRemap.y - temp_output_7_0_g170360 );
				float temp_output_765_0_g170352 = saturate( ( ( clampResult17_g170359 - temp_output_7_0_g170360 ) / ( temp_output_10_0_g170360 + 0.0001 ) ) );
				half Local_MultiMask767_g170352 = temp_output_765_0_g170352;
				float lerpResult705_g170352 = lerp( 1.0 , Local_MultiMask767_g170352 , _SecondColorMode);
				float4 lerpResult706_g170352 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170352);
				half3 Local_ColorRGB774_g170352 = (lerpResult706_g170352).rgb;
				half3 Local_Albedo768_g170352 = ( Local_AlbedoRGB771_g170352 * Local_ColorRGB774_g170352 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170379 = 2.0;
				#else
				float staticSwitch1_g170379 = 4.594794;
				#endif
				float3 lerpResult985_g170352 = lerp( Local_Albedo768_g170352 , ( Visual_Albedo527_g170352 * Local_Albedo768_g170352 * staticSwitch1_g170379 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170356) = _SecondMaskTex;
				SamplerState Sampler276_g170356 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170352 = _second_mask_coord_value;
				float4 temp_output_37_0_g170356 = Local_BlendCoords813_g170352;
				half4 Coords276_g170356 = temp_output_37_0_g170356;
				half2 TexCoord276_g170356 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170356 = SampleMain( Texture276_g170356 , Sampler276_g170356 , Coords276_g170356 , TexCoord276_g170356 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170356) = _SecondMaskTex;
				SamplerState Sampler275_g170356 = sampler_Linear_Repeat;
				half4 Coords275_g170356 = temp_output_37_0_g170356;
				half2 TexCoord275_g170356 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170356 = SampleExtra( Texture275_g170356 , Sampler275_g170356 , Coords275_g170356 , TexCoord275_g170356 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170356) = _SecondMaskTex;
				SamplerState Sampler238_g170356 = sampler_Linear_Repeat;
				half4 Coords238_g170356 = temp_output_37_0_g170356;
				float3 temp_output_279_0_g170356 = Model_PositionWO636_g170352;
				half3 WorldPosition238_g170356 = temp_output_279_0_g170356;
				half4 localSamplePlanar2D238_g170356 = SamplePlanar2D( Texture238_g170356 , Sampler238_g170356 , Coords238_g170356 , WorldPosition238_g170356 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170356) = _SecondMaskTex;
				SamplerState Sampler246_g170356 = sampler_Linear_Repeat;
				half4 Coords246_g170356 = temp_output_37_0_g170356;
				half3 WorldPosition246_g170356 = temp_output_279_0_g170356;
				float3 temp_output_280_0_g170356 = Model_NormalWS869_g170352;
				half3 WorldNormal246_g170356 = temp_output_280_0_g170356;
				half4 localSamplePlanar3D246_g170356 = SamplePlanar3D( Texture246_g170356 , Sampler246_g170356 , Coords246_g170356 , WorldPosition246_g170356 , WorldNormal246_g170356 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170352 = localSampleMain276_g170356;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170352 = localSampleExtra275_g170356;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170352 = localSamplePlanar2D238_g170356;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170352 = localSamplePlanar3D246_g170356;
				#else
				float4 staticSwitch817_g170352 = localSampleMain276_g170356;
				#endif
				half4 Local_MaskTex861_g170352 = staticSwitch817_g170352;
				float clampResult17_g170370 = clamp( (Local_MaskTex861_g170352).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170369 = _SecondMaskRemap.x;
				float temp_output_10_0_g170369 = ( _SecondMaskRemap.y - temp_output_7_0_g170369 );
				float lerpResult1015_g170352 = lerp( 1.0 , saturate( ( ( clampResult17_g170370 - temp_output_7_0_g170369 ) / ( temp_output_10_0_g170369 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170352 = lerpResult1015_g170352;
				half3 Visual_NormalWS951_g170352 = Out_NormalWS4_g170366;
				float clampResult17_g170371 = clamp( saturate( (Visual_NormalWS951_g170352).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170372 = _SecondProjRemap.x;
				float temp_output_10_0_g170372 = ( _SecondProjRemap.y - temp_output_7_0_g170372 );
				float lerpResult996_g170352 = lerp( 1.0 , saturate( ( ( clampResult17_g170371 - temp_output_7_0_g170372 ) / ( temp_output_10_0_g170372 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170352 = lerpResult996_g170352;
				half4 Model_VertexMasks964_g170352 = Out_VertexData15_g170364;
				float4 break965_g170352 = Model_VertexMasks964_g170352;
				float4 break33_g170373 = _second_vert_mode;
				float temp_output_30_0_g170373 = ( break965_g170352.x * break33_g170373.x );
				float temp_output_29_0_g170373 = ( break965_g170352.y * break33_g170373.y );
				float temp_output_31_0_g170373 = ( break965_g170352.z * break33_g170373.z );
				float temp_output_28_0_g170373 = ( temp_output_30_0_g170373 + temp_output_29_0_g170373 + temp_output_31_0_g170373 + ( break965_g170352.w * break33_g170373.w ) );
				float clampResult17_g170367 = clamp( temp_output_28_0_g170373 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170368 = _SecondMeshRemap.x;
				float temp_output_10_0_g170368 = ( _SecondMeshRemap.y - temp_output_7_0_g170368 );
				float lerpResult1017_g170352 = lerp( 1.0 , saturate( ( ( clampResult17_g170367 - temp_output_7_0_g170368 ) / ( temp_output_10_0_g170368 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170381 = lerpResult1017_g170352;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170381 = ( temp_output_6_0_g170381 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170381 = temp_output_6_0_g170381;
				#endif
				float temp_output_987_0_g170352 = staticSwitch14_g170381;
				half Blend_VertMask918_g170352 = temp_output_987_0_g170352;
				float localBuildGlobalData204_g170159 = ( 0.0 );
				TVEGlobalData Data204_g170159 = (TVEGlobalData)0;
				half Dummy211_g170159 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g170159 = Dummy211_g170159;
				float4 temp_output_362_164_g170159 = TVE_CoatParams;
				half4 Coat_Params302_g170159 = temp_output_362_164_g170159;
				float4 In_CoatParams204_g170159 = Coat_Params302_g170159;
				float4 temp_output_361_164_g170159 = TVE_PaintParams;
				half4 Paint_Params71_g170159 = temp_output_361_164_g170159;
				float4 In_PaintParams204_g170159 = Paint_Params71_g170159;
				float4 temp_output_365_163_g170159 = TVE_GlowParams;
				half4 Glow_Params248_g170159 = temp_output_365_163_g170159;
				float4 In_GlowParams204_g170159 = Glow_Params248_g170159;
				float4 temp_output_363_141_g170159 = TVE_AtmoParams;
				half4 Atmo_Params80_g170159 = temp_output_363_141_g170159;
				float4 In_AtmoParams204_g170159 = Atmo_Params80_g170159;
				float4 temp_output_364_139_g170159 = TVE_FormParams;
				half4 Form_Params112_g170159 = temp_output_364_139_g170159;
				float4 In_FormParams204_g170159 = Form_Params112_g170159;
				float4 temp_output_366_145_g170159 = TVE_WindParams;
				half4 Wind_Params88_g170159 = temp_output_366_145_g170159;
				float4 In_WindParams204_g170159 = Wind_Params88_g170159;
				float4 temp_output_367_145_g170159 = TVE_PushParams;
				half4 Push_Params335_g170159 = temp_output_367_145_g170159;
				float4 In_PushParams204_g170159 = Push_Params335_g170159;
				Data204_g170159.Dummy = In_Dummy204_g170159;
				Data204_g170159.CoatParams = In_CoatParams204_g170159;
				Data204_g170159.PaintParams = In_PaintParams204_g170159;
				Data204_g170159.GlowParams = In_GlowParams204_g170159;
				Data204_g170159.AtmoParams = In_AtmoParams204_g170159;
				Data204_g170159.FormParams= In_FormParams204_g170159;
				Data204_g170159.WindParams = In_WindParams204_g170159;
				Data204_g170159.PushParams = In_PushParams204_g170159;
				TVEGlobalData Data15_g170365 = Data204_g170159;
				float Out_Dummy15_g170365 = 0;
				float4 Out_CoatParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170365 = float4( 0,0,0,0 );
				Out_Dummy15_g170365 = Data15_g170365.Dummy;
				Out_CoatParams15_g170365 = Data15_g170365.CoatParams;
				Out_PaintParams15_g170365 = Data15_g170365.PaintParams;
				Out_GlowParams15_g170365 = Data15_g170365.GlowParams;
				Out_AtmoParams15_g170365= Data15_g170365.AtmoParams;
				Out_FadeParams15_g170365= Data15_g170365.FadeParams;
				Out_FormParams15_g170365 = Data15_g170365.FormParams;
				Out_LandParams15_g170365 = Data15_g170365.LandParams;
				Out_WindParams15_g170365 = Data15_g170365.WindParams;
				Out_PushParams15_g170365 = Data15_g170365.PushParams;
				half4 Global_CoatParams975_g170352 = Out_CoatParams15_g170365;
				float lerpResult1013_g170352 = lerp( 1.0 , (Global_CoatParams975_g170352).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170352 = lerpResult1013_g170352;
				#else
				float staticSwitch971_g170352 = 1.0;
				#endif
				half Blend_GlobalMask972_g170352 = staticSwitch971_g170352;
				float temp_output_432_0_g170352 = ( _SecondIntensityValue * Blend_TexMask429_g170352 * Blend_ProjMask434_g170352 * Blend_VertMask918_g170352 * Blend_GlobalMask972_g170352 );
				float clampResult17_g170375 = clamp( temp_output_432_0_g170352 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170374 = _SecondBlendRemap.x;
				float temp_output_10_0_g170374 = ( _SecondBlendRemap.y - temp_output_7_0_g170374 );
				half Blend_Mask412_g170352 = ( saturate( ( ( clampResult17_g170375 - temp_output_7_0_g170374 ) / ( temp_output_10_0_g170374 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170352 = lerp( Visual_Albedo527_g170352 , lerpResult985_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170352 = lerpResult403_g170352;
				#else
				float3 staticSwitch415_g170352 = Visual_Albedo527_g170352;
				#endif
				half3 Final_Albedo601_g170352 = staticSwitch415_g170352;
				float3 In_Albedo3_g170363 = Final_Albedo601_g170352;
				half2 Visual_NormalTS529_g170352 = Out_NormalTS4_g170366;
				float2 lerpResult40_g170377 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170352 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170354) = _SecondNormalTex;
				float localFilterTexture29_g170384 = ( 0.0 );
				SamplerState SamplerDefault29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170384 = SamplerDefault29_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170384 = SamplerDefault29_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170384 = SamplerPoint29_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170384 = SamplerLow29_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170384 = SamplerMedium29_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170384 = SamplerHigh29_g170384;
				#endif
				SamplerState Sampler276_g170354 = SS29_g170384;
				float4 temp_output_37_0_g170354 = Local_LayerCoords790_g170352;
				half4 Coords276_g170354 = temp_output_37_0_g170354;
				half2 TexCoord276_g170354 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170354 = SampleMain( Texture276_g170354 , Sampler276_g170354 , Coords276_g170354 , TexCoord276_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170354) = _SecondNormalTex;
				SamplerState Sampler275_g170354 = SS29_g170384;
				half4 Coords275_g170354 = temp_output_37_0_g170354;
				half2 TexCoord275_g170354 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170354 = SampleExtra( Texture275_g170354 , Sampler275_g170354 , Coords275_g170354 , TexCoord275_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170354) = _SecondNormalTex;
				SamplerState Sampler238_g170354 = SS29_g170384;
				half4 Coords238_g170354 = temp_output_37_0_g170354;
				float3 temp_output_279_0_g170354 = Model_PositionWO636_g170352;
				half3 WorldPosition238_g170354 = temp_output_279_0_g170354;
				half4 localSamplePlanar2D238_g170354 = SamplePlanar2D( Texture238_g170354 , Sampler238_g170354 , Coords238_g170354 , WorldPosition238_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170354) = _SecondNormalTex;
				SamplerState Sampler246_g170354 = SS29_g170384;
				half4 Coords246_g170354 = temp_output_37_0_g170354;
				half3 WorldPosition246_g170354 = temp_output_279_0_g170354;
				float3 temp_output_280_0_g170354 = Model_NormalWS869_g170352;
				half3 WorldNormal246_g170354 = temp_output_280_0_g170354;
				half4 localSamplePlanar3D246_g170354 = SamplePlanar3D( Texture246_g170354 , Sampler246_g170354 , Coords246_g170354 , WorldPosition246_g170354 , WorldNormal246_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170354) = _SecondNormalTex;
				SamplerState Sampler234_g170354 = SS29_g170384;
				float4 Coords234_g170354 = temp_output_37_0_g170354;
				float3 WorldPosition234_g170354 = temp_output_279_0_g170354;
				float4 localSampleStochastic2D234_g170354 = SampleStochastic2D( Texture234_g170354 , Sampler234_g170354 , Coords234_g170354 , WorldPosition234_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170354) = _SecondNormalTex;
				SamplerState Sampler263_g170354 = SS29_g170384;
				half4 Coords263_g170354 = temp_output_37_0_g170354;
				half3 WorldPosition263_g170354 = temp_output_279_0_g170354;
				half3 WorldNormal263_g170354 = temp_output_280_0_g170354;
				half4 localSampleStochastic3D263_g170354 = SampleStochastic3D( Texture263_g170354 , Sampler263_g170354 , Coords263_g170354 , WorldPosition263_g170354 , WorldNormal263_g170354 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170352 = localSampleMain276_g170354;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170352 = localSampleExtra275_g170354;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170352 = localSamplePlanar2D238_g170354;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170352 = localSamplePlanar3D246_g170354;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170352 = localSampleStochastic2D234_g170354;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170352 = localSampleStochastic3D263_g170354;
				#else
				float4 staticSwitch698_g170352 = localSampleMain276_g170354;
				#endif
				half4 Local_NormalTex776_g170352 = staticSwitch698_g170352;
				half4 Normal_Packed45_g170357 = Local_NormalTex776_g170352;
				float2 appendResult58_g170357 = (float2(( (Normal_Packed45_g170357).x * (Normal_Packed45_g170357).w ) , (Normal_Packed45_g170357).y));
				half2 Normal_Default50_g170357 = appendResult58_g170357;
				half2 Normal_ASTC41_g170357 = (Normal_Packed45_g170357).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170357 = Normal_ASTC41_g170357;
				#else
				float2 staticSwitch38_g170357 = Normal_Default50_g170357;
				#endif
				half2 Normal_NO_DTX544_g170357 = (Normal_Packed45_g170357).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170357 = Normal_NO_DTX544_g170357;
				#else
				float2 staticSwitch37_g170357 = staticSwitch38_g170357;
				#endif
				float2 temp_output_724_0_g170352 = ( (staticSwitch37_g170357*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170358 = temp_output_724_0_g170352;
				float2 break71_g170358 = Normal_Planar45_g170358;
				float3 appendResult72_g170358 = (float3(break71_g170358.x , 0.0 , break71_g170358.y));
				float2 temp_output_858_0_g170352 = (mul( ase_worldToTangent, appendResult72_g170358 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170352 = temp_output_724_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170352 = temp_output_724_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170352 = temp_output_858_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170352 = temp_output_858_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170352 = temp_output_858_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170352 = temp_output_858_0_g170352;
				#else
				float2 staticSwitch727_g170352 = temp_output_724_0_g170352;
				#endif
				half2 Local_NormalTS729_g170352 = staticSwitch727_g170352;
				float2 temp_output_36_0_g170377 = ( lerpResult40_g170377 + Local_NormalTS729_g170352 );
				float2 lerpResult405_g170352 = lerp( Visual_NormalTS529_g170352 , temp_output_36_0_g170377 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170352 = lerpResult405_g170352;
				#else
				float2 staticSwitch418_g170352 = Visual_NormalTS529_g170352;
				#endif
				half2 Final_NormalTS612_g170352 = staticSwitch418_g170352;
				float2 In_NormalTS3_g170363 = Final_NormalTS612_g170352;
				float3 appendResult68_g170378 = (float3(Final_NormalTS612_g170352 , 1.0));
				float3 tanNormal74_g170378 = appendResult68_g170378;
				float3 worldNormal74_g170378 = normalize( float3(dot(tanToWorld0,tanNormal74_g170378), dot(tanToWorld1,tanNormal74_g170378), dot(tanToWorld2,tanNormal74_g170378)) );
				half3 Final_NormalWS950_g170352 = worldNormal74_g170378;
				float3 In_NormalWS3_g170363 = Final_NormalWS950_g170352;
				half4 Visual_Shader531_g170352 = Out_Shader4_g170366;
				float4 lerpResult994_g170352 = lerp( Local_Masks750_g170352 , ( Visual_Shader531_g170352 * Local_Masks750_g170352 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170352 = lerp( Visual_Shader531_g170352 , lerpResult994_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170352 = lerpResult440_g170352;
				#else
				float4 staticSwitch451_g170352 = Visual_Shader531_g170352;
				#endif
				half4 Final_Masks613_g170352 = staticSwitch451_g170352;
				float4 In_Shader3_g170363 = Final_Masks613_g170352;
				float4 In_Emissive3_g170363 = Out_Emissive4_g170366;
				float3 temp_output_3_0_g170380 = Final_Albedo601_g170352;
				float dotResult20_g170380 = dot( temp_output_3_0_g170380 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170352 = dotResult20_g170380;
				float In_Grayscale3_g170363 = Final_Grayscale615_g170352;
				float clampResult651_g170352 = clamp( saturate( ( Final_Grayscale615_g170352 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170352 = clampResult651_g170352;
				float In_Luminosity3_g170363 = Final_Luminosity652_g170352;
				half Visual_MultiMask547_g170352 = Out_MultiMask4_g170366;
				float lerpResult477_g170352 = lerp( Visual_MultiMask547_g170352 , Local_MultiMask767_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float staticSwitch482_g170352 = lerpResult477_g170352;
				#else
				float staticSwitch482_g170352 = Visual_MultiMask547_g170352;
				#endif
				half Final_MultiMask572_g170352 = staticSwitch482_g170352;
				float In_MultiMask3_g170363 = Final_MultiMask572_g170352;
				half Visual_AlphaClip559_g170352 = Out_AlphaClip4_g170366;
				float temp_output_718_0_g170352 = (Local_AlbedoTex777_g170352).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170352 = ( temp_output_718_0_g170352 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170352 = temp_output_718_0_g170352;
				#endif
				half Local_AlphaClip772_g170352 = staticSwitch932_g170352;
				float lerpResult448_g170352 = lerp( Visual_AlphaClip559_g170352 , Local_AlphaClip772_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float staticSwitch564_g170352 = lerpResult448_g170352;
				#else
				float staticSwitch564_g170352 = Visual_AlphaClip559_g170352;
				#endif
				half Final_AlphaClip602_g170352 = staticSwitch564_g170352;
				float In_AlphaClip3_g170363 = Final_AlphaClip602_g170352;
				half Visual_AlphaFade588_g170352 = Out_AlphaFade4_g170366;
				half Local_AlphaFade773_g170352 = (lerpResult706_g170352).a;
				float lerpResult604_g170352 = lerp( Visual_AlphaFade588_g170352 , Local_AlphaFade773_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float staticSwitch608_g170352 = lerpResult604_g170352;
				#else
				float staticSwitch608_g170352 = Visual_AlphaFade588_g170352;
				#endif
				half Final_AlphaFade611_g170352 = staticSwitch608_g170352;
				float In_AlphaFade3_g170363 = Final_AlphaFade611_g170352;
				float3 In_Translucency3_g170363 = Out_Translucency4_g170366;
				float In_Transmission3_g170363 = Out_Transmission4_g170366;
				float In_Thickness3_g170363 = Out_Thickness4_g170366;
				float In_Diffusion3_g170363 = Out_Diffusion4_g170366;
				Data3_g170363.Dummy = In_Dummy3_g170363;
				Data3_g170363.Albedo = In_Albedo3_g170363;
				Data3_g170363.NormalTS = In_NormalTS3_g170363;
				Data3_g170363.NormalWS = In_NormalWS3_g170363;
				Data3_g170363.Shader = In_Shader3_g170363;
				Data3_g170363.Emissive= In_Emissive3_g170363;
				Data3_g170363.MultiMask = In_MultiMask3_g170363;
				Data3_g170363.Grayscale = In_Grayscale3_g170363;
				Data3_g170363.Luminosity = In_Luminosity3_g170363;
				Data3_g170363.AlphaClip = In_AlphaClip3_g170363;
				Data3_g170363.AlphaFade = In_AlphaFade3_g170363;
				Data3_g170363.Translucency = In_Translucency3_g170363;
				Data3_g170363.Transmission = In_Transmission3_g170363;
				Data3_g170363.Thickness = In_Thickness3_g170363;
				Data3_g170363.Diffusion = In_Diffusion3_g170363;
				TVEVisualData Data4_g170402 = Data3_g170363;
				float Out_Dummy4_g170402 = 0;
				float3 Out_Albedo4_g170402 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170402 = float2( 0,0 );
				float3 Out_NormalWS4_g170402 = float3( 0,0,0 );
				float4 Out_Shader4_g170402 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170402 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170402 = 0;
				float Out_Grayscale4_g170402 = 0;
				float Out_Luminosity4_g170402 = 0;
				float Out_AlphaClip4_g170402 = 0;
				float Out_AlphaFade4_g170402 = 0;
				float3 Out_Translucency4_g170402 = float3( 0,0,0 );
				float Out_Transmission4_g170402 = 0;
				float Out_Thickness4_g170402 = 0;
				float Out_Diffusion4_g170402 = 0;
				Out_Dummy4_g170402 = Data4_g170402.Dummy;
				Out_Albedo4_g170402 = Data4_g170402.Albedo;
				Out_NormalTS4_g170402 = Data4_g170402.NormalTS;
				Out_NormalWS4_g170402 = Data4_g170402.NormalWS;
				Out_Shader4_g170402 = Data4_g170402.Shader;
				Out_Emissive4_g170402= Data4_g170402.Emissive;
				Out_MultiMask4_g170402 = Data4_g170402.MultiMask;
				Out_Grayscale4_g170402 = Data4_g170402.Grayscale;
				Out_Luminosity4_g170402= Data4_g170402.Luminosity;
				Out_AlphaClip4_g170402 = Data4_g170402.AlphaClip;
				Out_AlphaFade4_g170402 = Data4_g170402.AlphaFade;
				Out_Translucency4_g170402 = Data4_g170402.Translucency;
				Out_Transmission4_g170402 = Data4_g170402.Transmission;
				Out_Thickness4_g170402 = Data4_g170402.Thickness;
				Out_Diffusion4_g170402 = Data4_g170402.Diffusion;
				half3 Visual_Albedo527_g170386 = Out_Albedo4_g170402;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170387) = _ThirdAlbedoTex;
				float localFilterTexture19_g170416 = ( 0.0 );
				SamplerState SamplerDefault19_g170416 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170416 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170416 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170416 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170416 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170416 = SamplerDefault19_g170416;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170416 = SamplerDefault19_g170416;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170416 = SamplerPoint19_g170416;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170416 = SamplerLow19_g170416;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170416 = SamplerMedium19_g170416;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170416 = SamplerHigh19_g170416;
				#endif
				SamplerState Sampler276_g170387 = SS19_g170416;
				half4 Local_LayerCoords790_g170386 = _third_coord_value;
				float4 temp_output_37_0_g170387 = Local_LayerCoords790_g170386;
				half4 Coords276_g170387 = temp_output_37_0_g170387;
				half2 TexCoord276_g170387 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170387 = SampleMain( Texture276_g170387 , Sampler276_g170387 , Coords276_g170387 , TexCoord276_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170387 = SS19_g170416;
				half4 Coords275_g170387 = temp_output_37_0_g170387;
				half2 TexCoord275_g170387 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170387 = SampleExtra( Texture275_g170387 , Sampler275_g170387 , Coords275_g170387 , TexCoord275_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170387 = SS19_g170416;
				half4 Coords238_g170387 = temp_output_37_0_g170387;
				TVEModelData Data15_g170414 = Data16_g170157;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionOS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170414 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170414 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170414 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170414 = float4( 0,0,0,0 );
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionOS15_g170414 = Data15_g170414.PositionOS;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PositionRawOS15_g170414 = Data15_g170414.PositionRawOS;
				Out_PositionAddOS15_g170414 = Data15_g170414.PositionAddOS;
				Out_PivotOS15_g170414 = Data15_g170414.PivotOS;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalOS15_g170414 = Data15_g170414.NormalOS;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_NormalRawOS15_g170414 = Data15_g170414.NormalRawOS;
				Out_NormalRawWS15_g170414 = Data15_g170414.NormalRawWS;
				Out_TangentOS15_g170414 = Data15_g170414.TangentOS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_MotionData15_g170414 = Data15_g170414.MotionData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				Out_RotationData15_g170414 = Data15_g170414.RotationData;
				half3 Model_PositionWO636_g170386 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170387 = Model_PositionWO636_g170386;
				half3 WorldPosition238_g170387 = temp_output_279_0_g170387;
				half4 localSamplePlanar2D238_g170387 = SamplePlanar2D( Texture238_g170387 , Sampler238_g170387 , Coords238_g170387 , WorldPosition238_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170387 = SS19_g170416;
				half4 Coords246_g170387 = temp_output_37_0_g170387;
				half3 WorldPosition246_g170387 = temp_output_279_0_g170387;
				half3 Model_NormalWS869_g170386 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170387 = Model_NormalWS869_g170386;
				half3 WorldNormal246_g170387 = temp_output_280_0_g170387;
				half4 localSamplePlanar3D246_g170387 = SamplePlanar3D( Texture246_g170387 , Sampler246_g170387 , Coords246_g170387 , WorldPosition246_g170387 , WorldNormal246_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170387 = SS19_g170416;
				float4 Coords234_g170387 = temp_output_37_0_g170387;
				float3 WorldPosition234_g170387 = temp_output_279_0_g170387;
				float4 localSampleStochastic2D234_g170387 = SampleStochastic2D( Texture234_g170387 , Sampler234_g170387 , Coords234_g170387 , WorldPosition234_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170387 = SS19_g170416;
				half4 Coords263_g170387 = temp_output_37_0_g170387;
				half3 WorldPosition263_g170387 = temp_output_279_0_g170387;
				half3 WorldNormal263_g170387 = temp_output_280_0_g170387;
				half4 localSampleStochastic3D263_g170387 = SampleStochastic3D( Texture263_g170387 , Sampler263_g170387 , Coords263_g170387 , WorldPosition263_g170387 , WorldNormal263_g170387 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170386 = localSampleMain276_g170387;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170386 = localSampleExtra275_g170387;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170386 = localSamplePlanar2D238_g170387;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170386 = localSamplePlanar3D246_g170387;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170386 = localSampleStochastic2D234_g170387;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170386 = localSampleStochastic3D263_g170387;
				#else
				float4 staticSwitch693_g170386 = localSampleMain276_g170387;
				#endif
				half4 Local_AlbedoTex777_g170386 = staticSwitch693_g170386;
				float3 lerpResult716_g170386 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170386).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170386 = lerpResult716_g170386;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170389) = _ThirdShaderTex;
				float localFilterTexture30_g170418 = ( 0.0 );
				SamplerState SamplerDefault30_g170418 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170418 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170418 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170418 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170418 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170418 = SamplerDefault30_g170418;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170418 = SamplerDefault30_g170418;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170418 = SamplerPoint30_g170418;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170418 = SamplerLow30_g170418;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170418 = SamplerMedium30_g170418;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170418 = SamplerHigh30_g170418;
				#endif
				SamplerState Sampler276_g170389 = SS30_g170418;
				float4 temp_output_37_0_g170389 = Local_LayerCoords790_g170386;
				half4 Coords276_g170389 = temp_output_37_0_g170389;
				half2 TexCoord276_g170389 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170389 = SampleMain( Texture276_g170389 , Sampler276_g170389 , Coords276_g170389 , TexCoord276_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170389) = _ThirdShaderTex;
				SamplerState Sampler275_g170389 = SS30_g170418;
				half4 Coords275_g170389 = temp_output_37_0_g170389;
				half2 TexCoord275_g170389 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170389 = SampleExtra( Texture275_g170389 , Sampler275_g170389 , Coords275_g170389 , TexCoord275_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170389) = _ThirdShaderTex;
				SamplerState Sampler238_g170389 = SS30_g170418;
				half4 Coords238_g170389 = temp_output_37_0_g170389;
				float3 temp_output_279_0_g170389 = Model_PositionWO636_g170386;
				half3 WorldPosition238_g170389 = temp_output_279_0_g170389;
				half4 localSamplePlanar2D238_g170389 = SamplePlanar2D( Texture238_g170389 , Sampler238_g170389 , Coords238_g170389 , WorldPosition238_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170389) = _ThirdShaderTex;
				SamplerState Sampler246_g170389 = SS30_g170418;
				half4 Coords246_g170389 = temp_output_37_0_g170389;
				half3 WorldPosition246_g170389 = temp_output_279_0_g170389;
				float3 temp_output_280_0_g170389 = Model_NormalWS869_g170386;
				half3 WorldNormal246_g170389 = temp_output_280_0_g170389;
				half4 localSamplePlanar3D246_g170389 = SamplePlanar3D( Texture246_g170389 , Sampler246_g170389 , Coords246_g170389 , WorldPosition246_g170389 , WorldNormal246_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170389) = _ThirdShaderTex;
				SamplerState Sampler234_g170389 = SS30_g170418;
				float4 Coords234_g170389 = temp_output_37_0_g170389;
				float3 WorldPosition234_g170389 = temp_output_279_0_g170389;
				float4 localSampleStochastic2D234_g170389 = SampleStochastic2D( Texture234_g170389 , Sampler234_g170389 , Coords234_g170389 , WorldPosition234_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170389) = _ThirdShaderTex;
				SamplerState Sampler263_g170389 = SS30_g170418;
				half4 Coords263_g170389 = temp_output_37_0_g170389;
				half3 WorldPosition263_g170389 = temp_output_279_0_g170389;
				half3 WorldNormal263_g170389 = temp_output_280_0_g170389;
				half4 localSampleStochastic3D263_g170389 = SampleStochastic3D( Texture263_g170389 , Sampler263_g170389 , Coords263_g170389 , WorldPosition263_g170389 , WorldNormal263_g170389 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170386 = localSampleMain276_g170389;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170386 = localSampleExtra275_g170389;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170386 = localSamplePlanar2D238_g170389;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170386 = localSamplePlanar3D246_g170389;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170386 = localSampleStochastic2D234_g170389;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170386 = localSampleStochastic3D263_g170389;
				#else
				float4 staticSwitch722_g170386 = localSampleMain276_g170389;
				#endif
				half4 Local_ShaderTex775_g170386 = staticSwitch722_g170386;
				float lerpResult739_g170386 = lerp( 1.0 , (Local_ShaderTex775_g170386).y , _ThirdOcclusionValue);
				float4 appendResult749_g170386 = (float4(( (Local_ShaderTex775_g170386).x * _ThirdMetallicValue ) , lerpResult739_g170386 , (Local_ShaderTex775_g170386).z , ( (Local_ShaderTex775_g170386).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170386 = appendResult749_g170386;
				float clampResult17_g170392 = clamp( (Local_Masks750_g170386).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170393 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170393 = ( _ThirdMultiRemap.y - temp_output_7_0_g170393 );
				float temp_output_765_0_g170386 = saturate( ( ( clampResult17_g170392 - temp_output_7_0_g170393 ) / ( temp_output_10_0_g170393 + 0.0001 ) ) );
				half Local_MultiMask767_g170386 = temp_output_765_0_g170386;
				float lerpResult705_g170386 = lerp( 1.0 , Local_MultiMask767_g170386 , _ThirdColorMode);
				float4 lerpResult706_g170386 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170386);
				half3 Local_ColorRGB774_g170386 = (lerpResult706_g170386).rgb;
				half3 Local_Albedo768_g170386 = ( Local_AlbedoRGB771_g170386 * Local_ColorRGB774_g170386 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170410 = 2.0;
				#else
				float staticSwitch1_g170410 = 4.594794;
				#endif
				float3 lerpResult985_g170386 = lerp( Local_Albedo768_g170386 , ( Visual_Albedo527_g170386 * Local_Albedo768_g170386 * staticSwitch1_g170410 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170413) = _ThirdMaskTex;
				SamplerState Sampler276_g170413 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170386 = _third_mask_coord_value;
				float4 temp_output_37_0_g170413 = Local_MaskCoords813_g170386;
				half4 Coords276_g170413 = temp_output_37_0_g170413;
				half2 TexCoord276_g170413 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170413 = SampleMain( Texture276_g170413 , Sampler276_g170413 , Coords276_g170413 , TexCoord276_g170413 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170413) = _ThirdMaskTex;
				SamplerState Sampler275_g170413 = sampler_Linear_Repeat;
				half4 Coords275_g170413 = temp_output_37_0_g170413;
				half2 TexCoord275_g170413 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170413 = SampleExtra( Texture275_g170413 , Sampler275_g170413 , Coords275_g170413 , TexCoord275_g170413 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170413) = _ThirdMaskTex;
				SamplerState Sampler238_g170413 = sampler_Linear_Repeat;
				half4 Coords238_g170413 = temp_output_37_0_g170413;
				float3 temp_output_279_0_g170413 = Model_PositionWO636_g170386;
				half3 WorldPosition238_g170413 = temp_output_279_0_g170413;
				half4 localSamplePlanar2D238_g170413 = SamplePlanar2D( Texture238_g170413 , Sampler238_g170413 , Coords238_g170413 , WorldPosition238_g170413 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170413) = _ThirdMaskTex;
				SamplerState Sampler246_g170413 = sampler_Linear_Repeat;
				half4 Coords246_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition246_g170413 = temp_output_279_0_g170413;
				float3 temp_output_280_0_g170413 = Model_NormalWS869_g170386;
				half3 WorldNormal246_g170413 = temp_output_280_0_g170413;
				half4 localSamplePlanar3D246_g170413 = SamplePlanar3D( Texture246_g170413 , Sampler246_g170413 , Coords246_g170413 , WorldPosition246_g170413 , WorldNormal246_g170413 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170386 = localSampleMain276_g170413;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170386 = localSampleExtra275_g170413;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170386 = localSamplePlanar2D238_g170413;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170386 = localSamplePlanar3D246_g170413;
				#else
				float4 staticSwitch817_g170386 = localSampleMain276_g170413;
				#endif
				half4 Local_MaskTex861_g170386 = staticSwitch817_g170386;
				float clampResult17_g170397 = clamp( (Local_MaskTex861_g170386).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170398 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170398 = ( _ThirdMaskRemap.y - temp_output_7_0_g170398 );
				float lerpResult1028_g170386 = lerp( 1.0 , saturate( ( ( clampResult17_g170397 - temp_output_7_0_g170398 ) / ( temp_output_10_0_g170398 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170386 = lerpResult1028_g170386;
				half4 Model_VertexMasks960_g170386 = Out_VertexData15_g170414;
				float4 break961_g170386 = Model_VertexMasks960_g170386;
				float4 break33_g170401 = _third_vert_mode;
				float temp_output_30_0_g170401 = ( break961_g170386.x * break33_g170401.x );
				float temp_output_29_0_g170401 = ( break961_g170386.y * break33_g170401.y );
				float temp_output_31_0_g170401 = ( break961_g170386.z * break33_g170401.z );
				float temp_output_28_0_g170401 = ( temp_output_30_0_g170401 + temp_output_29_0_g170401 + temp_output_31_0_g170401 + ( break961_g170386.w * break33_g170401.w ) );
				float clampResult17_g170395 = clamp( temp_output_28_0_g170401 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170396 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170396 = ( _ThirdMeshRemap.y - temp_output_7_0_g170396 );
				float lerpResult1026_g170386 = lerp( 1.0 , saturate( ( ( clampResult17_g170395 - temp_output_7_0_g170396 ) / ( temp_output_10_0_g170396 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170412 = lerpResult1026_g170386;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170412 = ( temp_output_6_0_g170412 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170412 = temp_output_6_0_g170412;
				#endif
				float temp_output_992_0_g170386 = staticSwitch14_g170412;
				half Blend_VertMask913_g170386 = temp_output_992_0_g170386;
				half3 Visual_NormalWS953_g170386 = Out_NormalWS4_g170402;
				float clampResult17_g170399 = clamp( saturate( (Visual_NormalWS953_g170386).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170400 = _ThirdProjRemap.x;
				float temp_output_10_0_g170400 = ( _ThirdProjRemap.y - temp_output_7_0_g170400 );
				float lerpResult1004_g170386 = lerp( 1.0 , saturate( ( ( clampResult17_g170399 - temp_output_7_0_g170400 ) / ( temp_output_10_0_g170400 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170386 = lerpResult1004_g170386;
				TVEGlobalData Data15_g170404 = Data204_g170159;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170404 = float4( 0,0,0,0 );
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatParams15_g170404 = Data15_g170404.CoatParams;
				Out_PaintParams15_g170404 = Data15_g170404.PaintParams;
				Out_GlowParams15_g170404 = Data15_g170404.GlowParams;
				Out_AtmoParams15_g170404= Data15_g170404.AtmoParams;
				Out_FadeParams15_g170404= Data15_g170404.FadeParams;
				Out_FormParams15_g170404 = Data15_g170404.FormParams;
				Out_LandParams15_g170404 = Data15_g170404.LandParams;
				Out_WindParams15_g170404 = Data15_g170404.WindParams;
				Out_PushParams15_g170404 = Data15_g170404.PushParams;
				half4 Global_CoatParams972_g170386 = Out_CoatParams15_g170404;
				float lerpResult1023_g170386 = lerp( 1.0 , (Global_CoatParams972_g170386).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170386 = lerpResult1023_g170386;
				#else
				float staticSwitch965_g170386 = 1.0;
				#endif
				half Blend_GlobalMask968_g170386 = staticSwitch965_g170386;
				float temp_output_432_0_g170386 = ( _ThirdIntensityValue * Detail_TexMask429_g170386 * Blend_VertMask913_g170386 * Blend_ProjMask912_g170386 * Blend_GlobalMask968_g170386 );
				float clampResult17_g170406 = clamp( temp_output_432_0_g170386 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170405 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170405 = ( _ThirdBlendRemap.y - temp_output_7_0_g170405 );
				half Detail_Mask412_g170386 = ( saturate( ( ( clampResult17_g170406 - temp_output_7_0_g170405 ) / ( temp_output_10_0_g170405 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170386 = lerp( Visual_Albedo527_g170386 , lerpResult985_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170386 = lerpResult989_g170386;
				#else
				float3 staticSwitch415_g170386 = Visual_Albedo527_g170386;
				#endif
				half3 Final_Albedo601_g170386 = staticSwitch415_g170386;
				float3 In_Albedo3_g170403 = Final_Albedo601_g170386;
				half2 Visual_NormalTS529_g170386 = Out_NormalTS4_g170402;
				float2 lerpResult40_g170408 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170386 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170388) = _ThirdNormalTex;
				float localFilterTexture29_g170417 = ( 0.0 );
				SamplerState SamplerDefault29_g170417 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170417 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170417 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170417 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170417 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170417 = SamplerDefault29_g170417;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170417 = SamplerDefault29_g170417;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170417 = SamplerPoint29_g170417;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170417 = SamplerLow29_g170417;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170417 = SamplerMedium29_g170417;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170417 = SamplerHigh29_g170417;
				#endif
				SamplerState Sampler276_g170388 = SS29_g170417;
				float4 temp_output_37_0_g170388 = Local_LayerCoords790_g170386;
				half4 Coords276_g170388 = temp_output_37_0_g170388;
				half2 TexCoord276_g170388 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170388 = SampleMain( Texture276_g170388 , Sampler276_g170388 , Coords276_g170388 , TexCoord276_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170388) = _ThirdNormalTex;
				SamplerState Sampler275_g170388 = SS29_g170417;
				half4 Coords275_g170388 = temp_output_37_0_g170388;
				half2 TexCoord275_g170388 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170388 = SampleExtra( Texture275_g170388 , Sampler275_g170388 , Coords275_g170388 , TexCoord275_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170388) = _ThirdNormalTex;
				SamplerState Sampler238_g170388 = SS29_g170417;
				half4 Coords238_g170388 = temp_output_37_0_g170388;
				float3 temp_output_279_0_g170388 = Model_PositionWO636_g170386;
				half3 WorldPosition238_g170388 = temp_output_279_0_g170388;
				half4 localSamplePlanar2D238_g170388 = SamplePlanar2D( Texture238_g170388 , Sampler238_g170388 , Coords238_g170388 , WorldPosition238_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170388) = _ThirdNormalTex;
				SamplerState Sampler246_g170388 = SS29_g170417;
				half4 Coords246_g170388 = temp_output_37_0_g170388;
				half3 WorldPosition246_g170388 = temp_output_279_0_g170388;
				float3 temp_output_280_0_g170388 = Model_NormalWS869_g170386;
				half3 WorldNormal246_g170388 = temp_output_280_0_g170388;
				half4 localSamplePlanar3D246_g170388 = SamplePlanar3D( Texture246_g170388 , Sampler246_g170388 , Coords246_g170388 , WorldPosition246_g170388 , WorldNormal246_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170388) = _ThirdNormalTex;
				SamplerState Sampler234_g170388 = SS29_g170417;
				float4 Coords234_g170388 = temp_output_37_0_g170388;
				float3 WorldPosition234_g170388 = temp_output_279_0_g170388;
				float4 localSampleStochastic2D234_g170388 = SampleStochastic2D( Texture234_g170388 , Sampler234_g170388 , Coords234_g170388 , WorldPosition234_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170388) = _ThirdNormalTex;
				SamplerState Sampler263_g170388 = SS29_g170417;
				half4 Coords263_g170388 = temp_output_37_0_g170388;
				half3 WorldPosition263_g170388 = temp_output_279_0_g170388;
				half3 WorldNormal263_g170388 = temp_output_280_0_g170388;
				half4 localSampleStochastic3D263_g170388 = SampleStochastic3D( Texture263_g170388 , Sampler263_g170388 , Coords263_g170388 , WorldPosition263_g170388 , WorldNormal263_g170388 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170386 = localSampleMain276_g170388;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170386 = localSampleExtra275_g170388;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170386 = localSamplePlanar2D238_g170388;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170386 = localSamplePlanar3D246_g170388;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170386 = localSampleStochastic2D234_g170388;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170386 = localSampleStochastic3D263_g170388;
				#else
				float4 staticSwitch698_g170386 = localSampleMain276_g170388;
				#endif
				half4 Local_NormalTex776_g170386 = staticSwitch698_g170386;
				half4 Normal_Packed45_g170390 = Local_NormalTex776_g170386;
				float2 appendResult58_g170390 = (float2(( (Normal_Packed45_g170390).x * (Normal_Packed45_g170390).w ) , (Normal_Packed45_g170390).y));
				half2 Normal_Default50_g170390 = appendResult58_g170390;
				half2 Normal_ASTC41_g170390 = (Normal_Packed45_g170390).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170390 = Normal_ASTC41_g170390;
				#else
				float2 staticSwitch38_g170390 = Normal_Default50_g170390;
				#endif
				half2 Normal_NO_DTX544_g170390 = (Normal_Packed45_g170390).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170390 = Normal_NO_DTX544_g170390;
				#else
				float2 staticSwitch37_g170390 = staticSwitch38_g170390;
				#endif
				float2 temp_output_724_0_g170386 = ( (staticSwitch37_g170390*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170391 = temp_output_724_0_g170386;
				float2 break71_g170391 = Normal_Planar45_g170391;
				float3 appendResult72_g170391 = (float3(break71_g170391.x , 0.0 , break71_g170391.y));
				float2 temp_output_858_0_g170386 = (mul( ase_worldToTangent, appendResult72_g170391 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170386 = temp_output_724_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170386 = temp_output_724_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170386 = temp_output_858_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170386 = temp_output_858_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170386 = temp_output_858_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170386 = temp_output_858_0_g170386;
				#else
				float2 staticSwitch727_g170386 = temp_output_724_0_g170386;
				#endif
				half2 Local_NormalTS729_g170386 = staticSwitch727_g170386;
				float2 temp_output_36_0_g170408 = ( lerpResult40_g170408 + Local_NormalTS729_g170386 );
				float2 lerpResult405_g170386 = lerp( Visual_NormalTS529_g170386 , temp_output_36_0_g170408 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170386 = lerpResult405_g170386;
				#else
				float2 staticSwitch418_g170386 = Visual_NormalTS529_g170386;
				#endif
				half2 Final_NormalTS612_g170386 = staticSwitch418_g170386;
				float2 In_NormalTS3_g170403 = Final_NormalTS612_g170386;
				float3 appendResult68_g170409 = (float3(Final_NormalTS612_g170386 , 1.0));
				float3 tanNormal74_g170409 = appendResult68_g170409;
				float3 worldNormal74_g170409 = normalize( float3(dot(tanToWorld0,tanNormal74_g170409), dot(tanToWorld1,tanNormal74_g170409), dot(tanToWorld2,tanNormal74_g170409)) );
				half3 Final_NormalWS956_g170386 = worldNormal74_g170409;
				float3 In_NormalWS3_g170403 = Final_NormalWS956_g170386;
				half4 Visual_Shader531_g170386 = Out_Shader4_g170402;
				float4 lerpResult1000_g170386 = lerp( Local_Masks750_g170386 , ( Visual_Shader531_g170386 * Local_Masks750_g170386 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170386 = lerp( Visual_Shader531_g170386 , lerpResult1000_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170386 = lerpResult998_g170386;
				#else
				float4 staticSwitch451_g170386 = Visual_Shader531_g170386;
				#endif
				half4 Final_Masks613_g170386 = staticSwitch451_g170386;
				float4 In_Shader3_g170403 = Final_Masks613_g170386;
				float4 In_Emissive3_g170403 = Out_Emissive4_g170402;
				float3 temp_output_3_0_g170411 = Final_Albedo601_g170386;
				float dotResult20_g170411 = dot( temp_output_3_0_g170411 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170386 = dotResult20_g170411;
				float In_Grayscale3_g170403 = Final_Grayscale615_g170386;
				float clampResult651_g170386 = clamp( saturate( ( Final_Grayscale615_g170386 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170386 = clampResult651_g170386;
				float In_Luminosity3_g170403 = Final_Luminosity652_g170386;
				half Visual_MultiMask547_g170386 = Out_MultiMask4_g170402;
				float lerpResult477_g170386 = lerp( Visual_MultiMask547_g170386 , Local_MultiMask767_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float staticSwitch482_g170386 = lerpResult477_g170386;
				#else
				float staticSwitch482_g170386 = Visual_MultiMask547_g170386;
				#endif
				half Final_MultiMask572_g170386 = staticSwitch482_g170386;
				float In_MultiMask3_g170403 = Final_MultiMask572_g170386;
				half Visual_AlphaClip559_g170386 = Out_AlphaClip4_g170402;
				float temp_output_718_0_g170386 = (Local_AlbedoTex777_g170386).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170386 = ( temp_output_718_0_g170386 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170386 = temp_output_718_0_g170386;
				#endif
				half Local_AlphaClip772_g170386 = staticSwitch924_g170386;
				float lerpResult448_g170386 = lerp( Visual_AlphaClip559_g170386 , Local_AlphaClip772_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float staticSwitch564_g170386 = lerpResult448_g170386;
				#else
				float staticSwitch564_g170386 = Visual_AlphaClip559_g170386;
				#endif
				half Final_AlphaClip602_g170386 = staticSwitch564_g170386;
				float In_AlphaClip3_g170403 = Final_AlphaClip602_g170386;
				half Visual_AlphaFade588_g170386 = Out_AlphaFade4_g170402;
				half Local_AlphaFade773_g170386 = (lerpResult706_g170386).a;
				float lerpResult604_g170386 = lerp( Visual_AlphaFade588_g170386 , Local_AlphaFade773_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float staticSwitch608_g170386 = lerpResult604_g170386;
				#else
				float staticSwitch608_g170386 = Visual_AlphaFade588_g170386;
				#endif
				half Final_AlphaFade611_g170386 = staticSwitch608_g170386;
				float In_AlphaFade3_g170403 = Final_AlphaFade611_g170386;
				float3 In_Translucency3_g170403 = Out_Translucency4_g170402;
				float In_Transmission3_g170403 = Out_Transmission4_g170402;
				float In_Thickness3_g170403 = Out_Thickness4_g170402;
				float In_Diffusion3_g170403 = Out_Diffusion4_g170402;
				Data3_g170403.Dummy = In_Dummy3_g170403;
				Data3_g170403.Albedo = In_Albedo3_g170403;
				Data3_g170403.NormalTS = In_NormalTS3_g170403;
				Data3_g170403.NormalWS = In_NormalWS3_g170403;
				Data3_g170403.Shader = In_Shader3_g170403;
				Data3_g170403.Emissive= In_Emissive3_g170403;
				Data3_g170403.MultiMask = In_MultiMask3_g170403;
				Data3_g170403.Grayscale = In_Grayscale3_g170403;
				Data3_g170403.Luminosity = In_Luminosity3_g170403;
				Data3_g170403.AlphaClip = In_AlphaClip3_g170403;
				Data3_g170403.AlphaFade = In_AlphaFade3_g170403;
				Data3_g170403.Translucency = In_Translucency3_g170403;
				Data3_g170403.Transmission = In_Transmission3_g170403;
				Data3_g170403.Thickness = In_Thickness3_g170403;
				Data3_g170403.Diffusion = In_Diffusion3_g170403;
				TVEVisualData Data4_g170421 = Data3_g170403;
				float Out_Dummy4_g170421 = 0;
				float3 Out_Albedo4_g170421 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170421 = float2( 0,0 );
				float3 Out_NormalWS4_g170421 = float3( 0,0,0 );
				float4 Out_Shader4_g170421 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170421 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170421 = 0;
				float Out_Grayscale4_g170421 = 0;
				float Out_Luminosity4_g170421 = 0;
				float Out_AlphaClip4_g170421 = 0;
				float Out_AlphaFade4_g170421 = 0;
				float3 Out_Translucency4_g170421 = float3( 0,0,0 );
				float Out_Transmission4_g170421 = 0;
				float Out_Thickness4_g170421 = 0;
				float Out_Diffusion4_g170421 = 0;
				Out_Dummy4_g170421 = Data4_g170421.Dummy;
				Out_Albedo4_g170421 = Data4_g170421.Albedo;
				Out_NormalTS4_g170421 = Data4_g170421.NormalTS;
				Out_NormalWS4_g170421 = Data4_g170421.NormalWS;
				Out_Shader4_g170421 = Data4_g170421.Shader;
				Out_Emissive4_g170421= Data4_g170421.Emissive;
				Out_MultiMask4_g170421 = Data4_g170421.MultiMask;
				Out_Grayscale4_g170421 = Data4_g170421.Grayscale;
				Out_Luminosity4_g170421= Data4_g170421.Luminosity;
				Out_AlphaClip4_g170421 = Data4_g170421.AlphaClip;
				Out_AlphaFade4_g170421 = Data4_g170421.AlphaFade;
				Out_Translucency4_g170421 = Data4_g170421.Translucency;
				Out_Transmission4_g170421 = Data4_g170421.Transmission;
				Out_Thickness4_g170421 = Data4_g170421.Thickness;
				Out_Diffusion4_g170421 = Data4_g170421.Diffusion;
				half3 Visual_Albedo127_g170420 = Out_Albedo4_g170421;
				TVEModelData Data15_g170423 = Data16_g170157;
				float Out_Dummy15_g170423 = 0;
				float3 Out_PositionOS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170423 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170423 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170423 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170423 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170423 = float3( 0,0,0 );
				float4 Out_VertexData15_g170423 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170423 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170423 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170423 = float4( 0,0,0,0 );
				Out_Dummy15_g170423 = Data15_g170423.Dummy;
				Out_PositionOS15_g170423 = Data15_g170423.PositionOS;
				Out_PositionWS15_g170423 = Data15_g170423.PositionWS;
				Out_PositionWO15_g170423 = Data15_g170423.PositionWO;
				Out_PositionRawOS15_g170423 = Data15_g170423.PositionRawOS;
				Out_PositionAddOS15_g170423 = Data15_g170423.PositionAddOS;
				Out_PivotOS15_g170423 = Data15_g170423.PivotOS;
				Out_PivotWS15_g170423 = Data15_g170423.PivotWS;
				Out_PivotWO15_g170423 = Data15_g170423.PivotWO;
				Out_NormalOS15_g170423 = Data15_g170423.NormalOS;
				Out_NormalWS15_g170423 = Data15_g170423.NormalWS;
				Out_NormalRawOS15_g170423 = Data15_g170423.NormalRawOS;
				Out_NormalRawWS15_g170423 = Data15_g170423.NormalRawWS;
				Out_TangentOS15_g170423 = Data15_g170423.TangentOS;
				Out_ViewDirWS15_g170423 = Data15_g170423.ViewDirWS;
				Out_VertexData15_g170423 = Data15_g170423.VertexData;
				Out_MotionData15_g170423 = Data15_g170423.MotionData;
				Out_BoundsData15_g170423 = Data15_g170423.BoundsData;
				Out_RotationData15_g170423 = Data15_g170423.RotationData;
				half4 Model_VertexData206_g170420 = Out_VertexData15_g170423;
				float4 break208_g170420 = Model_VertexData206_g170420;
				float4 break33_g170428 = _occlusion_vert_mode;
				float temp_output_30_0_g170428 = ( break208_g170420.x * break33_g170428.x );
				float temp_output_29_0_g170428 = ( break208_g170420.y * break33_g170428.y );
				float temp_output_31_0_g170428 = ( break208_g170420.z * break33_g170428.z );
				float temp_output_28_0_g170428 = ( temp_output_30_0_g170428 + temp_output_29_0_g170428 + temp_output_31_0_g170428 + ( break208_g170420.w * break33_g170428.w ) );
				float temp_output_194_0_g170420 = temp_output_28_0_g170428;
				float clampResult17_g170426 = clamp( temp_output_194_0_g170420 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170425 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170425 );
				float temp_output_6_0_g170427 = saturate( ( ( clampResult17_g170426 - temp_output_7_0_g170425 ) / ( temp_output_10_0_g170425 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170427 = ( temp_output_6_0_g170427 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170427 = temp_output_6_0_g170427;
				#endif
				half Occlusion_Mask82_g170420 = staticSwitch14_g170427;
				float3 lerpResult75_g170420 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170420);
				float3 lerpResult186_g170420 = lerp( Visual_Albedo127_g170420 , ( Visual_Albedo127_g170420 * lerpResult75_g170420 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170420 = lerpResult186_g170420;
				#else
				float3 staticSwitch171_g170420 = Visual_Albedo127_g170420;
				#endif
				half3 Final_Albedo160_g170420 = staticSwitch171_g170420;
				float3 In_Albedo3_g170422 = Final_Albedo160_g170420;
				float2 In_NormalTS3_g170422 = Out_NormalTS4_g170421;
				float3 In_NormalWS3_g170422 = Out_NormalWS4_g170421;
				float4 In_Shader3_g170422 = Out_Shader4_g170421;
				float4 In_Emissive3_g170422 = Out_Emissive4_g170421;
				float3 temp_output_3_0_g170424 = Final_Albedo160_g170420;
				float dotResult20_g170424 = dot( temp_output_3_0_g170424 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170420 = dotResult20_g170424;
				float In_Grayscale3_g170422 = Final_Grayscale164_g170420;
				float clampResult180_g170420 = clamp( saturate( ( Final_Grayscale164_g170420 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170420 = clampResult180_g170420;
				float In_Luminosity3_g170422 = Final_Shading181_g170420;
				float In_MultiMask3_g170422 = Out_MultiMask4_g170421;
				float In_AlphaClip3_g170422 = Out_AlphaClip4_g170421;
				float In_AlphaFade3_g170422 = Out_AlphaFade4_g170421;
				float3 In_Translucency3_g170422 = Out_Translucency4_g170421;
				float In_Transmission3_g170422 = Out_Transmission4_g170421;
				float In_Thickness3_g170422 = Out_Thickness4_g170421;
				float In_Diffusion3_g170422 = Out_Diffusion4_g170421;
				Data3_g170422.Dummy = In_Dummy3_g170422;
				Data3_g170422.Albedo = In_Albedo3_g170422;
				Data3_g170422.NormalTS = In_NormalTS3_g170422;
				Data3_g170422.NormalWS = In_NormalWS3_g170422;
				Data3_g170422.Shader = In_Shader3_g170422;
				Data3_g170422.Emissive= In_Emissive3_g170422;
				Data3_g170422.MultiMask = In_MultiMask3_g170422;
				Data3_g170422.Grayscale = In_Grayscale3_g170422;
				Data3_g170422.Luminosity = In_Luminosity3_g170422;
				Data3_g170422.AlphaClip = In_AlphaClip3_g170422;
				Data3_g170422.AlphaFade = In_AlphaFade3_g170422;
				Data3_g170422.Translucency = In_Translucency3_g170422;
				Data3_g170422.Transmission = In_Transmission3_g170422;
				Data3_g170422.Thickness = In_Thickness3_g170422;
				Data3_g170422.Diffusion = In_Diffusion3_g170422;
				TVEVisualData Data4_g170433 = Data3_g170422;
				float Out_Dummy4_g170433 = 0;
				float3 Out_Albedo4_g170433 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170433 = float2( 0,0 );
				float3 Out_NormalWS4_g170433 = float3( 0,0,0 );
				float4 Out_Shader4_g170433 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170433 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170433 = 0;
				float Out_Grayscale4_g170433 = 0;
				float Out_Luminosity4_g170433 = 0;
				float Out_AlphaClip4_g170433 = 0;
				float Out_AlphaFade4_g170433 = 0;
				float3 Out_Translucency4_g170433 = float3( 0,0,0 );
				float Out_Transmission4_g170433 = 0;
				float Out_Thickness4_g170433 = 0;
				float Out_Diffusion4_g170433 = 0;
				Out_Dummy4_g170433 = Data4_g170433.Dummy;
				Out_Albedo4_g170433 = Data4_g170433.Albedo;
				Out_NormalTS4_g170433 = Data4_g170433.NormalTS;
				Out_NormalWS4_g170433 = Data4_g170433.NormalWS;
				Out_Shader4_g170433 = Data4_g170433.Shader;
				Out_Emissive4_g170433= Data4_g170433.Emissive;
				Out_MultiMask4_g170433 = Data4_g170433.MultiMask;
				Out_Grayscale4_g170433 = Data4_g170433.Grayscale;
				Out_Luminosity4_g170433= Data4_g170433.Luminosity;
				Out_AlphaClip4_g170433 = Data4_g170433.AlphaClip;
				Out_AlphaFade4_g170433 = Data4_g170433.AlphaFade;
				Out_Translucency4_g170433 = Data4_g170433.Translucency;
				Out_Transmission4_g170433 = Data4_g170433.Transmission;
				Out_Thickness4_g170433 = Data4_g170433.Thickness;
				Out_Diffusion4_g170433 = Data4_g170433.Diffusion;
				half3 Visual_Albedo127_g170430 = Out_Albedo4_g170433;
				TVEModelData Data15_g170431 = Data16_g170157;
				float Out_Dummy15_g170431 = 0;
				float3 Out_PositionOS15_g170431 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170431 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170431 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170431 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170431 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170431 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170431 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170431 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170431 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170431 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170431 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170431 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170431 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170431 = float3( 0,0,0 );
				float4 Out_VertexData15_g170431 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170431 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170431 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170431 = float4( 0,0,0,0 );
				Out_Dummy15_g170431 = Data15_g170431.Dummy;
				Out_PositionOS15_g170431 = Data15_g170431.PositionOS;
				Out_PositionWS15_g170431 = Data15_g170431.PositionWS;
				Out_PositionWO15_g170431 = Data15_g170431.PositionWO;
				Out_PositionRawOS15_g170431 = Data15_g170431.PositionRawOS;
				Out_PositionAddOS15_g170431 = Data15_g170431.PositionAddOS;
				Out_PivotOS15_g170431 = Data15_g170431.PivotOS;
				Out_PivotWS15_g170431 = Data15_g170431.PivotWS;
				Out_PivotWO15_g170431 = Data15_g170431.PivotWO;
				Out_NormalOS15_g170431 = Data15_g170431.NormalOS;
				Out_NormalWS15_g170431 = Data15_g170431.NormalWS;
				Out_NormalRawOS15_g170431 = Data15_g170431.NormalRawOS;
				Out_NormalRawWS15_g170431 = Data15_g170431.NormalRawWS;
				Out_TangentOS15_g170431 = Data15_g170431.TangentOS;
				Out_ViewDirWS15_g170431 = Data15_g170431.ViewDirWS;
				Out_VertexData15_g170431 = Data15_g170431.VertexData;
				Out_MotionData15_g170431 = Data15_g170431.MotionData;
				Out_BoundsData15_g170431 = Data15_g170431.BoundsData;
				Out_RotationData15_g170431 = Data15_g170431.RotationData;
				half4 Model_VertexData224_g170430 = Out_VertexData15_g170431;
				float4 break226_g170430 = Model_VertexData224_g170430;
				float4 break33_g170432 = _gradient_vert_mode;
				float temp_output_30_0_g170432 = ( break226_g170430.x * break33_g170432.x );
				float temp_output_29_0_g170432 = ( break226_g170430.y * break33_g170432.y );
				float temp_output_31_0_g170432 = ( break226_g170430.z * break33_g170432.z );
				float temp_output_28_0_g170432 = ( temp_output_30_0_g170432 + temp_output_29_0_g170432 + temp_output_31_0_g170432 + ( break226_g170430.w * break33_g170432.w ) );
				float temp_output_211_0_g170430 = temp_output_28_0_g170432;
				float clampResult17_g170437 = clamp( temp_output_211_0_g170430 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _GradientMeshRemap.x;
				float temp_output_10_0_g170438 = ( _GradientMeshRemap.y - temp_output_7_0_g170438 );
				float temp_output_6_0_g170439 = saturate( ( ( clampResult17_g170437 - temp_output_7_0_g170438 ) / ( temp_output_10_0_g170438 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170439 = ( temp_output_6_0_g170439 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170439 = temp_output_6_0_g170439;
				#endif
				half Gradient_VertMask82_g170430 = staticSwitch14_g170439;
				half Gradient_Mask200_g170430 = Gradient_VertMask82_g170430;
				float3 lerpResult75_g170430 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170430);
				float temp_output_162_11_g170430 = Out_MultiMask4_g170433;
				half Visual_MultiMask196_g170430 = temp_output_162_11_g170430;
				float lerpResult190_g170430 = lerp( 1.0 , Visual_MultiMask196_g170430 , _GradientMultiValue);
				half Gradient_MultiMask194_g170430 = lerpResult190_g170430;
				float3 lerpResult186_g170430 = lerp( Visual_Albedo127_g170430 , ( Visual_Albedo127_g170430 * lerpResult75_g170430 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170430 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170430 = lerpResult186_g170430;
				#else
				float3 staticSwitch171_g170430 = Visual_Albedo127_g170430;
				#endif
				half3 Final_Albedo160_g170430 = staticSwitch171_g170430;
				float3 In_Albedo3_g170434 = Final_Albedo160_g170430;
				float2 In_NormalTS3_g170434 = Out_NormalTS4_g170433;
				float3 In_NormalWS3_g170434 = Out_NormalWS4_g170433;
				float4 In_Shader3_g170434 = Out_Shader4_g170433;
				float4 In_Emissive3_g170434 = Out_Emissive4_g170433;
				float3 temp_output_3_0_g170435 = Final_Albedo160_g170430;
				float dotResult20_g170435 = dot( temp_output_3_0_g170435 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170430 = dotResult20_g170435;
				float In_Grayscale3_g170434 = Final_Grayscale164_g170430;
				float clampResult180_g170430 = clamp( saturate( ( Final_Grayscale164_g170430 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170430 = clampResult180_g170430;
				float In_Luminosity3_g170434 = Final_Luminosity181_g170430;
				float In_MultiMask3_g170434 = temp_output_162_11_g170430;
				float In_AlphaClip3_g170434 = Out_AlphaClip4_g170433;
				float In_AlphaFade3_g170434 = Out_AlphaFade4_g170433;
				float3 In_Translucency3_g170434 = Out_Translucency4_g170433;
				float In_Transmission3_g170434 = Out_Transmission4_g170433;
				float In_Thickness3_g170434 = Out_Thickness4_g170433;
				float In_Diffusion3_g170434 = Out_Diffusion4_g170433;
				Data3_g170434.Dummy = In_Dummy3_g170434;
				Data3_g170434.Albedo = In_Albedo3_g170434;
				Data3_g170434.NormalTS = In_NormalTS3_g170434;
				Data3_g170434.NormalWS = In_NormalWS3_g170434;
				Data3_g170434.Shader = In_Shader3_g170434;
				Data3_g170434.Emissive= In_Emissive3_g170434;
				Data3_g170434.MultiMask = In_MultiMask3_g170434;
				Data3_g170434.Grayscale = In_Grayscale3_g170434;
				Data3_g170434.Luminosity = In_Luminosity3_g170434;
				Data3_g170434.AlphaClip = In_AlphaClip3_g170434;
				Data3_g170434.AlphaFade = In_AlphaFade3_g170434;
				Data3_g170434.Translucency = In_Translucency3_g170434;
				Data3_g170434.Transmission = In_Transmission3_g170434;
				Data3_g170434.Thickness = In_Thickness3_g170434;
				Data3_g170434.Diffusion = In_Diffusion3_g170434;
				TVEVisualData Data4_g170441 = Data3_g170434;
				float Out_Dummy4_g170441 = 0;
				float3 Out_Albedo4_g170441 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170441 = float2( 0,0 );
				float3 Out_NormalWS4_g170441 = float3( 0,0,0 );
				float4 Out_Shader4_g170441 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170441 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170441 = 0;
				float Out_Grayscale4_g170441 = 0;
				float Out_Luminosity4_g170441 = 0;
				float Out_AlphaClip4_g170441 = 0;
				float Out_AlphaFade4_g170441 = 0;
				float3 Out_Translucency4_g170441 = float3( 0,0,0 );
				float Out_Transmission4_g170441 = 0;
				float Out_Thickness4_g170441 = 0;
				float Out_Diffusion4_g170441 = 0;
				Out_Dummy4_g170441 = Data4_g170441.Dummy;
				Out_Albedo4_g170441 = Data4_g170441.Albedo;
				Out_NormalTS4_g170441 = Data4_g170441.NormalTS;
				Out_NormalWS4_g170441 = Data4_g170441.NormalWS;
				Out_Shader4_g170441 = Data4_g170441.Shader;
				Out_Emissive4_g170441= Data4_g170441.Emissive;
				Out_MultiMask4_g170441 = Data4_g170441.MultiMask;
				Out_Grayscale4_g170441 = Data4_g170441.Grayscale;
				Out_Luminosity4_g170441= Data4_g170441.Luminosity;
				Out_AlphaClip4_g170441 = Data4_g170441.AlphaClip;
				Out_AlphaFade4_g170441 = Data4_g170441.AlphaFade;
				Out_Translucency4_g170441 = Data4_g170441.Translucency;
				Out_Transmission4_g170441 = Data4_g170441.Transmission;
				Out_Thickness4_g170441 = Data4_g170441.Thickness;
				Out_Diffusion4_g170441 = Data4_g170441.Diffusion;
				half3 Visual_Albedo127_g170440 = Out_Albedo4_g170441;
				float4 vertexToFrag24_g170419 = IN.ase_texcoord10;
				half4 Interp_Data2469 = vertexToFrag24_g170419;
				float clampResult208_g170440 = clamp( (Interp_Data2469).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170440 = ( Visual_Albedo127_g170440 + ( ( Visual_Albedo127_g170440 * Visual_Albedo127_g170440 * 200.0 * _motion_highlight_color ) * clampResult208_g170440 ) );
				#else
				float3 staticSwitch214_g170440 = Visual_Albedo127_g170440;
				#endif
				half3 Final_Albedo160_g170440 = staticSwitch214_g170440;
				float3 In_Albedo3_g170442 = Final_Albedo160_g170440;
				float2 In_NormalTS3_g170442 = Out_NormalTS4_g170441;
				float3 In_NormalWS3_g170442 = Out_NormalWS4_g170441;
				float4 In_Shader3_g170442 = Out_Shader4_g170441;
				float4 In_Emissive3_g170442 = Out_Emissive4_g170441;
				float In_Grayscale3_g170442 = Out_Grayscale4_g170441;
				float In_Luminosity3_g170442 = Out_Luminosity4_g170441;
				float In_MultiMask3_g170442 = Out_MultiMask4_g170441;
				float In_AlphaClip3_g170442 = Out_AlphaClip4_g170441;
				float In_AlphaFade3_g170442 = Out_AlphaFade4_g170441;
				float3 In_Translucency3_g170442 = Out_Translucency4_g170441;
				float In_Transmission3_g170442 = Out_Transmission4_g170441;
				float In_Thickness3_g170442 = Out_Thickness4_g170441;
				float In_Diffusion3_g170442 = Out_Diffusion4_g170441;
				Data3_g170442.Dummy = In_Dummy3_g170442;
				Data3_g170442.Albedo = In_Albedo3_g170442;
				Data3_g170442.NormalTS = In_NormalTS3_g170442;
				Data3_g170442.NormalWS = In_NormalWS3_g170442;
				Data3_g170442.Shader = In_Shader3_g170442;
				Data3_g170442.Emissive= In_Emissive3_g170442;
				Data3_g170442.MultiMask = In_MultiMask3_g170442;
				Data3_g170442.Grayscale = In_Grayscale3_g170442;
				Data3_g170442.Luminosity = In_Luminosity3_g170442;
				Data3_g170442.AlphaClip = In_AlphaClip3_g170442;
				Data3_g170442.AlphaFade = In_AlphaFade3_g170442;
				Data3_g170442.Translucency = In_Translucency3_g170442;
				Data3_g170442.Transmission = In_Transmission3_g170442;
				Data3_g170442.Thickness = In_Thickness3_g170442;
				Data3_g170442.Diffusion = In_Diffusion3_g170442;
				TVEVisualData Data4_g170444 = Data3_g170442;
				float Out_Dummy4_g170444 = 0;
				float3 Out_Albedo4_g170444 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170444 = float2( 0,0 );
				float3 Out_NormalWS4_g170444 = float3( 0,0,0 );
				float4 Out_Shader4_g170444 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170444 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170444 = 0;
				float Out_Grayscale4_g170444 = 0;
				float Out_Luminosity4_g170444 = 0;
				float Out_AlphaClip4_g170444 = 0;
				float Out_AlphaFade4_g170444 = 0;
				float3 Out_Translucency4_g170444 = float3( 0,0,0 );
				float Out_Transmission4_g170444 = 0;
				float Out_Thickness4_g170444 = 0;
				float Out_Diffusion4_g170444 = 0;
				Out_Dummy4_g170444 = Data4_g170444.Dummy;
				Out_Albedo4_g170444 = Data4_g170444.Albedo;
				Out_NormalTS4_g170444 = Data4_g170444.NormalTS;
				Out_NormalWS4_g170444 = Data4_g170444.NormalWS;
				Out_Shader4_g170444 = Data4_g170444.Shader;
				Out_Emissive4_g170444= Data4_g170444.Emissive;
				Out_MultiMask4_g170444 = Data4_g170444.MultiMask;
				Out_Grayscale4_g170444 = Data4_g170444.Grayscale;
				Out_Luminosity4_g170444= Data4_g170444.Luminosity;
				Out_AlphaClip4_g170444 = Data4_g170444.AlphaClip;
				Out_AlphaFade4_g170444 = Data4_g170444.AlphaFade;
				Out_Translucency4_g170444 = Data4_g170444.Translucency;
				Out_Transmission4_g170444 = Data4_g170444.Transmission;
				Out_Thickness4_g170444 = Data4_g170444.Thickness;
				Out_Diffusion4_g170444 = Data4_g170444.Diffusion;
				half3 Visual_Albedo127_g170443 = Out_Albedo4_g170444;
				float3 temp_output_622_0_g170443 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170447) = _OverlayAlbedoTex;
				float localFilterTexture19_g170472 = ( 0.0 );
				SamplerState SamplerDefault19_g170472 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170472 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170472 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170472 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170472 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170472 = SamplerDefault19_g170472;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170472 = SamplerDefault19_g170472;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170472 = SamplerPoint19_g170472;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170472 = SamplerLow19_g170472;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170472 = SamplerMedium19_g170472;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170472 = SamplerHigh19_g170472;
				#endif
				SamplerState Sampler238_g170447 = SS19_g170472;
				float4 temp_output_6_0_g170450 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170450 = ( temp_output_6_0_g170450 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170450 = temp_output_6_0_g170450;
				#endif
				half4 Overlay_Coords639_g170443 = staticSwitch14_g170450;
				float4 temp_output_37_0_g170447 = Overlay_Coords639_g170443;
				half4 Coords238_g170447 = temp_output_37_0_g170447;
				TVEModelData Data15_g170451 = Data16_g170157;
				float Out_Dummy15_g170451 = 0;
				float3 Out_PositionOS15_g170451 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170451 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170451 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170451 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170451 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170451 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170451 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170451 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170451 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170451 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170451 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170451 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170451 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170451 = float3( 0,0,0 );
				float4 Out_VertexData15_g170451 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170451 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170451 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170451 = float4( 0,0,0,0 );
				Out_Dummy15_g170451 = Data15_g170451.Dummy;
				Out_PositionOS15_g170451 = Data15_g170451.PositionOS;
				Out_PositionWS15_g170451 = Data15_g170451.PositionWS;
				Out_PositionWO15_g170451 = Data15_g170451.PositionWO;
				Out_PositionRawOS15_g170451 = Data15_g170451.PositionRawOS;
				Out_PositionAddOS15_g170451 = Data15_g170451.PositionAddOS;
				Out_PivotOS15_g170451 = Data15_g170451.PivotOS;
				Out_PivotWS15_g170451 = Data15_g170451.PivotWS;
				Out_PivotWO15_g170451 = Data15_g170451.PivotWO;
				Out_NormalOS15_g170451 = Data15_g170451.NormalOS;
				Out_NormalWS15_g170451 = Data15_g170451.NormalWS;
				Out_NormalRawOS15_g170451 = Data15_g170451.NormalRawOS;
				Out_NormalRawWS15_g170451 = Data15_g170451.NormalRawWS;
				Out_TangentOS15_g170451 = Data15_g170451.TangentOS;
				Out_ViewDirWS15_g170451 = Data15_g170451.ViewDirWS;
				Out_VertexData15_g170451 = Data15_g170451.VertexData;
				Out_MotionData15_g170451 = Data15_g170451.MotionData;
				Out_BoundsData15_g170451 = Data15_g170451.BoundsData;
				Out_RotationData15_g170451 = Data15_g170451.RotationData;
				half3 Model_PositionWO602_g170443 = Out_PositionWO15_g170451;
				float3 temp_output_279_0_g170447 = Model_PositionWO602_g170443;
				half3 WorldPosition238_g170447 = temp_output_279_0_g170447;
				half4 localSamplePlanar2D238_g170447 = SamplePlanar2D( Texture238_g170447 , Sampler238_g170447 , Coords238_g170447 , WorldPosition238_g170447 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170447) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170447 = SS19_g170472;
				half4 Coords246_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition246_g170447 = temp_output_279_0_g170447;
				half3 Model_NormalWS712_g170443 = Out_NormalWS15_g170451;
				float3 temp_output_280_0_g170447 = Model_NormalWS712_g170443;
				half3 WorldNormal246_g170447 = temp_output_280_0_g170447;
				half4 localSamplePlanar3D246_g170447 = SamplePlanar3D( Texture246_g170447 , Sampler246_g170447 , Coords246_g170447 , WorldPosition246_g170447 , WorldNormal246_g170447 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170447) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170447 = SS19_g170472;
				float4 Coords234_g170447 = temp_output_37_0_g170447;
				float3 WorldPosition234_g170447 = temp_output_279_0_g170447;
				float4 localSampleStochastic2D234_g170447 = SampleStochastic2D( Texture234_g170447 , Sampler234_g170447 , Coords234_g170447 , WorldPosition234_g170447 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170447) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170447 = SS19_g170472;
				half4 Coords263_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition263_g170447 = temp_output_279_0_g170447;
				half3 WorldNormal263_g170447 = temp_output_280_0_g170447;
				half4 localSampleStochastic3D263_g170447 = SampleStochastic3D( Texture263_g170447 , Sampler263_g170447 , Coords263_g170447 , WorldPosition263_g170447 , WorldNormal263_g170447 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170443 = localSamplePlanar2D238_g170447;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170443 = localSamplePlanar3D246_g170447;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170443 = localSampleStochastic2D234_g170447;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170443 = localSampleStochastic3D263_g170447;
				#else
				float4 staticSwitch676_g170443 = localSamplePlanar2D238_g170447;
				#endif
				half3 Overlay_Albedo526_g170443 = (staticSwitch676_g170443).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170443 = ( temp_output_622_0_g170443 * Overlay_Albedo526_g170443 );
				#else
				float3 staticSwitch578_g170443 = temp_output_622_0_g170443;
				#endif
				float3 temp_output_6_0_g170466 = staticSwitch578_g170443;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170466 = ( temp_output_6_0_g170466 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170466 = temp_output_6_0_g170466;
				#endif
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170453) = _OverlayMaskTex;
				SamplerState Sampler276_g170453 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170454 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170454 = ( temp_output_6_0_g170454 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170454 = temp_output_6_0_g170454;
				#endif
				half4 Local_MaskCoords886_g170443 = staticSwitch14_g170454;
				float4 temp_output_37_0_g170453 = Local_MaskCoords886_g170443;
				half4 Coords276_g170453 = temp_output_37_0_g170453;
				half2 TexCoord276_g170453 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170453 = SampleMain( Texture276_g170453 , Sampler276_g170453 , Coords276_g170453 , TexCoord276_g170453 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170453) = _OverlayMaskTex;
				SamplerState Sampler275_g170453 = sampler_Linear_Repeat;
				half4 Coords275_g170453 = temp_output_37_0_g170453;
				half2 TexCoord275_g170453 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170453 = SampleExtra( Texture275_g170453 , Sampler275_g170453 , Coords275_g170453 , TexCoord275_g170453 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170443 = localSampleMain276_g170453;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170443 = localSampleExtra275_g170453;
				#else
				float4 staticSwitch894_g170443 = localSampleMain276_g170453;
				#endif
				half4 Local_MaskTex885_g170443 = staticSwitch894_g170443;
				float clampResult17_g170468 = clamp( (Local_MaskTex885_g170443).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170469 = ( _OverlayMaskRemap.y - temp_output_7_0_g170469 );
				float lerpResult898_g170443 = lerp( 1.0 , saturate( ( ( clampResult17_g170468 - temp_output_7_0_g170469 ) / ( temp_output_10_0_g170469 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask906_g170443 = lerpResult898_g170443;
				float3 temp_output_739_21_g170443 = Out_NormalWS4_g170444;
				half3 Visual_NormalWS749_g170443 = temp_output_739_21_g170443;
				float clampResult17_g170463 = clamp( saturate( (Visual_NormalWS749_g170443).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170462 = _OverlayProjRemap.x;
				float temp_output_10_0_g170462 = ( _OverlayProjRemap.y - temp_output_7_0_g170462 );
				float lerpResult842_g170443 = lerp( 1.0 , saturate( ( ( clampResult17_g170463 - temp_output_7_0_g170462 ) / ( temp_output_10_0_g170462 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170443 = lerpResult842_g170443;
				float temp_output_739_15_g170443 = Out_Luminosity4_g170444;
				half Visual_Luminosity654_g170443 = temp_output_739_15_g170443;
				float clampResult17_g170465 = clamp( Visual_Luminosity654_g170443 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170464 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170464 = ( _OverlayLumaRemap.y - temp_output_7_0_g170464 );
				float lerpResult587_g170443 = lerp( 1.0 , saturate( ( ( clampResult17_g170465 - temp_output_7_0_g170464 ) / ( temp_output_10_0_g170464 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170443 = lerpResult587_g170443;
				half4 Model_VertexMasks791_g170443 = Out_VertexData15_g170451;
				float4 break792_g170443 = Model_VertexMasks791_g170443;
				float4 break33_g170455 = _overlay_vert_mode;
				float temp_output_30_0_g170455 = ( break792_g170443.x * break33_g170455.x );
				float temp_output_29_0_g170455 = ( break792_g170443.y * break33_g170455.y );
				float temp_output_31_0_g170455 = ( break792_g170443.z * break33_g170455.z );
				float temp_output_28_0_g170455 = ( temp_output_30_0_g170455 + temp_output_29_0_g170455 + temp_output_31_0_g170455 + ( break792_g170443.w * break33_g170455.w ) );
				float clampResult17_g170456 = clamp( temp_output_28_0_g170455 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170459 = ( _OverlayMeshRemap.y - temp_output_7_0_g170459 );
				float lerpResult879_g170443 = lerp( 1.0 , saturate( ( ( clampResult17_g170456 - temp_output_7_0_g170459 ) / ( temp_output_10_0_g170459 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170467 = lerpResult879_g170443;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170467 = ( temp_output_6_0_g170467 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170467 = temp_output_6_0_g170467;
				#endif
				float temp_output_831_0_g170443 = staticSwitch14_g170467;
				half Overlay_VertMask801_g170443 = temp_output_831_0_g170443;
				half Overlay_MaskNoise427_g170443 = 1.0;
				TVEGlobalData Data15_g170445 = Data204_g170159;
				float Out_Dummy15_g170445 = 0;
				float4 Out_CoatParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170445 = float4( 0,0,0,0 );
				Out_Dummy15_g170445 = Data15_g170445.Dummy;
				Out_CoatParams15_g170445 = Data15_g170445.CoatParams;
				Out_PaintParams15_g170445 = Data15_g170445.PaintParams;
				Out_GlowParams15_g170445 = Data15_g170445.GlowParams;
				Out_AtmoParams15_g170445= Data15_g170445.AtmoParams;
				Out_FadeParams15_g170445= Data15_g170445.FadeParams;
				Out_FormParams15_g170445 = Data15_g170445.FormParams;
				Out_LandParams15_g170445 = Data15_g170445.LandParams;
				Out_WindParams15_g170445 = Data15_g170445.WindParams;
				Out_PushParams15_g170445 = Data15_g170445.PushParams;
				half4 Global_AtmoParams516_g170443 = Out_AtmoParams15_g170445;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170443 = (Global_AtmoParams516_g170443).z;
				#else
				float staticSwitch705_g170443 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170443 = staticSwitch705_g170443;
				half Custom_Mask646_g170443 = 1.0;
				float temp_output_7_0_g170470 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170470 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170470 );
				half Overlay_Mask494_g170443 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g170443 * Overlay_MaskProj457_g170443 * Overlay_MaskLuma438_g170443 * Overlay_VertMask801_g170443 * Overlay_MaskNoise427_g170443 * Overlay_MaskGlobal429_g170443 * Custom_Mask646_g170443 ) - temp_output_7_0_g170470 ) / ( temp_output_10_0_g170470 + 0.0001 ) ) );
				float3 lerpResult467_g170443 = lerp( Visual_Albedo127_g170443 , staticSwitch14_g170466 , Overlay_Mask494_g170443);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170443 = lerpResult467_g170443;
				#else
				float3 staticSwitch577_g170443 = Visual_Albedo127_g170443;
				#endif
				half3 Final_Albedo493_g170443 = staticSwitch577_g170443;
				float3 In_Albedo3_g170446 = Final_Albedo493_g170443;
				half2 Visual_NormalTS535_g170443 = Out_NormalTS4_g170444;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170452) = _OverlayNormalTex;
				float localFilterTexture29_g170471 = ( 0.0 );
				SamplerState SamplerDefault29_g170471 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170471 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170471 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170471 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170471 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170471 = SamplerDefault29_g170471;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170471 = SamplerDefault29_g170471;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170471 = SamplerPoint29_g170471;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170471 = SamplerLow29_g170471;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170471 = SamplerMedium29_g170471;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170471 = SamplerHigh29_g170471;
				#endif
				SamplerState Sampler238_g170452 = SS29_g170471;
				float4 temp_output_37_0_g170452 = Overlay_Coords639_g170443;
				half4 Coords238_g170452 = temp_output_37_0_g170452;
				float3 temp_output_279_0_g170452 = Model_PositionWO602_g170443;
				half3 WorldPosition238_g170452 = temp_output_279_0_g170452;
				half4 localSamplePlanar2D238_g170452 = SamplePlanar2D( Texture238_g170452 , Sampler238_g170452 , Coords238_g170452 , WorldPosition238_g170452 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170452) = _OverlayNormalTex;
				SamplerState Sampler246_g170452 = SS29_g170471;
				half4 Coords246_g170452 = temp_output_37_0_g170452;
				half3 WorldPosition246_g170452 = temp_output_279_0_g170452;
				float3 temp_output_280_0_g170452 = Model_NormalWS712_g170443;
				half3 WorldNormal246_g170452 = temp_output_280_0_g170452;
				half4 localSamplePlanar3D246_g170452 = SamplePlanar3D( Texture246_g170452 , Sampler246_g170452 , Coords246_g170452 , WorldPosition246_g170452 , WorldNormal246_g170452 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170452) = _OverlayNormalTex;
				SamplerState Sampler234_g170452 = SS29_g170471;
				float4 Coords234_g170452 = temp_output_37_0_g170452;
				float3 WorldPosition234_g170452 = temp_output_279_0_g170452;
				float4 localSampleStochastic2D234_g170452 = SampleStochastic2D( Texture234_g170452 , Sampler234_g170452 , Coords234_g170452 , WorldPosition234_g170452 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170452) = _OverlayNormalTex;
				SamplerState Sampler263_g170452 = SS29_g170471;
				half4 Coords263_g170452 = temp_output_37_0_g170452;
				half3 WorldPosition263_g170452 = temp_output_279_0_g170452;
				half3 WorldNormal263_g170452 = temp_output_280_0_g170452;
				half4 localSampleStochastic3D263_g170452 = SampleStochastic3D( Texture263_g170452 , Sampler263_g170452 , Coords263_g170452 , WorldPosition263_g170452 , WorldNormal263_g170452 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170443 = localSamplePlanar2D238_g170452;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170443 = localSamplePlanar3D246_g170452;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170443 = localSampleStochastic2D234_g170452;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170443 = localSampleStochastic3D263_g170452;
				#else
				float4 staticSwitch686_g170443 = localSamplePlanar2D238_g170452;
				#endif
				half4 Normal_Packed45_g170449 = staticSwitch686_g170443;
				float2 appendResult58_g170449 = (float2(( (Normal_Packed45_g170449).x * (Normal_Packed45_g170449).w ) , (Normal_Packed45_g170449).y));
				half2 Normal_Default50_g170449 = appendResult58_g170449;
				half2 Normal_ASTC41_g170449 = (Normal_Packed45_g170449).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170449 = Normal_ASTC41_g170449;
				#else
				float2 staticSwitch38_g170449 = Normal_Default50_g170449;
				#endif
				half2 Normal_NO_DTX544_g170449 = (Normal_Packed45_g170449).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170449 = Normal_NO_DTX544_g170449;
				#else
				float2 staticSwitch37_g170449 = staticSwitch38_g170449;
				#endif
				half2 Normal_Planar45_g170448 = (staticSwitch37_g170449*2.0 + -1.0);
				float2 break71_g170448 = Normal_Planar45_g170448;
				float3 appendResult72_g170448 = (float3(break71_g170448.x , 0.0 , break71_g170448.y));
				half2 Overlay_Normal528_g170443 = (mul( ase_worldToTangent, appendResult72_g170448 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170443 = Overlay_Normal528_g170443;
				#else
				float2 staticSwitch579_g170443 = Visual_NormalTS535_g170443;
				#endif
				float2 lerpResult551_g170443 = lerp( Visual_NormalTS535_g170443 , ( staticSwitch579_g170443 * _OverlayNormalValue ) , Overlay_Mask494_g170443);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170443 = lerpResult551_g170443;
				#else
				float2 staticSwitch583_g170443 = Visual_NormalTS535_g170443;
				#endif
				half2 Final_NormalTS499_g170443 = staticSwitch583_g170443;
				float2 In_NormalTS3_g170446 = Final_NormalTS499_g170443;
				float3 In_NormalWS3_g170446 = temp_output_739_21_g170443;
				half4 Visual_Masks536_g170443 = Out_Shader4_g170444;
				float4 appendResult585_g170443 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170443 = lerp( Visual_Masks536_g170443 , appendResult585_g170443 , Overlay_Mask494_g170443);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170443 = lerpResult584_g170443;
				#else
				float4 staticSwitch586_g170443 = Visual_Masks536_g170443;
				#endif
				half4 Final_Masks482_g170443 = staticSwitch586_g170443;
				float4 In_Shader3_g170446 = Final_Masks482_g170443;
				float4 In_Emissive3_g170446 = Out_Emissive4_g170444;
				float temp_output_739_12_g170443 = Out_Grayscale4_g170444;
				float In_Grayscale3_g170446 = temp_output_739_12_g170443;
				float In_Luminosity3_g170446 = temp_output_739_15_g170443;
				float In_MultiMask3_g170446 = Out_MultiMask4_g170444;
				float In_AlphaClip3_g170446 = Out_AlphaClip4_g170444;
				float In_AlphaFade3_g170446 = Out_AlphaFade4_g170444;
				float3 In_Translucency3_g170446 = Out_Translucency4_g170444;
				half Visual_Transmission699_g170443 = Out_Transmission4_g170444;
				float lerpResult746_g170443 = lerp( Visual_Transmission699_g170443 , ( Visual_Transmission699_g170443 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170443 * Overlay_MaskNoise427_g170443 * Overlay_MaskGlobal429_g170443 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170443 = lerpResult746_g170443;
				#else
				float staticSwitch703_g170443 = Visual_Transmission699_g170443;
				#endif
				half Final_Transmission702_g170443 = staticSwitch703_g170443;
				float In_Transmission3_g170446 = Final_Transmission702_g170443;
				float In_Thickness3_g170446 = Out_Thickness4_g170444;
				float In_Diffusion3_g170446 = Out_Diffusion4_g170444;
				Data3_g170446.Dummy = In_Dummy3_g170446;
				Data3_g170446.Albedo = In_Albedo3_g170446;
				Data3_g170446.NormalTS = In_NormalTS3_g170446;
				Data3_g170446.NormalWS = In_NormalWS3_g170446;
				Data3_g170446.Shader = In_Shader3_g170446;
				Data3_g170446.Emissive= In_Emissive3_g170446;
				Data3_g170446.MultiMask = In_MultiMask3_g170446;
				Data3_g170446.Grayscale = In_Grayscale3_g170446;
				Data3_g170446.Luminosity = In_Luminosity3_g170446;
				Data3_g170446.AlphaClip = In_AlphaClip3_g170446;
				Data3_g170446.AlphaFade = In_AlphaFade3_g170446;
				Data3_g170446.Translucency = In_Translucency3_g170446;
				Data3_g170446.Transmission = In_Transmission3_g170446;
				Data3_g170446.Thickness = In_Thickness3_g170446;
				Data3_g170446.Diffusion = In_Diffusion3_g170446;
				TVEVisualData Data4_g170492 = Data3_g170446;
				float Out_Dummy4_g170492 = 0;
				float3 Out_Albedo4_g170492 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170492 = float2( 0,0 );
				float3 Out_NormalWS4_g170492 = float3( 0,0,0 );
				float4 Out_Shader4_g170492 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170492 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170492 = 0;
				float Out_Grayscale4_g170492 = 0;
				float Out_Luminosity4_g170492 = 0;
				float Out_AlphaClip4_g170492 = 0;
				float Out_AlphaFade4_g170492 = 0;
				float3 Out_Translucency4_g170492 = float3( 0,0,0 );
				float Out_Transmission4_g170492 = 0;
				float Out_Thickness4_g170492 = 0;
				float Out_Diffusion4_g170492 = 0;
				Out_Dummy4_g170492 = Data4_g170492.Dummy;
				Out_Albedo4_g170492 = Data4_g170492.Albedo;
				Out_NormalTS4_g170492 = Data4_g170492.NormalTS;
				Out_NormalWS4_g170492 = Data4_g170492.NormalWS;
				Out_Shader4_g170492 = Data4_g170492.Shader;
				Out_Emissive4_g170492= Data4_g170492.Emissive;
				Out_MultiMask4_g170492 = Data4_g170492.MultiMask;
				Out_Grayscale4_g170492 = Data4_g170492.Grayscale;
				Out_Luminosity4_g170492= Data4_g170492.Luminosity;
				Out_AlphaClip4_g170492 = Data4_g170492.AlphaClip;
				Out_AlphaFade4_g170492 = Data4_g170492.AlphaFade;
				Out_Translucency4_g170492 = Data4_g170492.Translucency;
				Out_Transmission4_g170492 = Data4_g170492.Transmission;
				Out_Thickness4_g170492 = Data4_g170492.Thickness;
				Out_Diffusion4_g170492 = Data4_g170492.Diffusion;
				float3 temp_output_297_0_g170481 = Out_Albedo4_g170492;
				float3 In_Albedo3_g170493 = temp_output_297_0_g170481;
				float2 In_NormalTS3_g170493 = Out_NormalTS4_g170492;
				float3 In_NormalWS3_g170493 = Out_NormalWS4_g170492;
				float4 In_Shader3_g170493 = Out_Shader4_g170492;
				float4 temp_cast_6 = (0.0).xxxx;
				half4 Visual_Emissive255_g170481 = Out_Emissive4_g170492;
				TVEModelData Data15_g170482 = Data16_g170157;
				float Out_Dummy15_g170482 = 0;
				float3 Out_PositionOS15_g170482 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170482 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170482 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170482 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170482 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170482 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170482 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170482 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170482 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170482 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170482 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170482 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170482 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170482 = float3( 0,0,0 );
				float4 Out_VertexData15_g170482 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170482 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170482 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170482 = float4( 0,0,0,0 );
				Out_Dummy15_g170482 = Data15_g170482.Dummy;
				Out_PositionOS15_g170482 = Data15_g170482.PositionOS;
				Out_PositionWS15_g170482 = Data15_g170482.PositionWS;
				Out_PositionWO15_g170482 = Data15_g170482.PositionWO;
				Out_PositionRawOS15_g170482 = Data15_g170482.PositionRawOS;
				Out_PositionAddOS15_g170482 = Data15_g170482.PositionAddOS;
				Out_PivotOS15_g170482 = Data15_g170482.PivotOS;
				Out_PivotWS15_g170482 = Data15_g170482.PivotWS;
				Out_PivotWO15_g170482 = Data15_g170482.PivotWO;
				Out_NormalOS15_g170482 = Data15_g170482.NormalOS;
				Out_NormalWS15_g170482 = Data15_g170482.NormalWS;
				Out_NormalRawOS15_g170482 = Data15_g170482.NormalRawOS;
				Out_NormalRawWS15_g170482 = Data15_g170482.NormalRawWS;
				Out_TangentOS15_g170482 = Data15_g170482.TangentOS;
				Out_ViewDirWS15_g170482 = Data15_g170482.ViewDirWS;
				Out_VertexData15_g170482 = Data15_g170482.VertexData;
				Out_MotionData15_g170482 = Data15_g170482.MotionData;
				Out_BoundsData15_g170482 = Data15_g170482.BoundsData;
				Out_RotationData15_g170482 = Data15_g170482.RotationData;
				half4 Model_VertexMasks216_g170481 = Out_VertexData15_g170482;
				float4 break251_g170481 = Model_VertexMasks216_g170481;
				float4 break33_g170486 = _emissive_vert_mode;
				float temp_output_30_0_g170486 = ( break251_g170481.x * break33_g170486.x );
				float temp_output_29_0_g170486 = ( break251_g170481.y * break33_g170486.y );
				float temp_output_31_0_g170486 = ( break251_g170481.z * break33_g170486.z );
				float temp_output_28_0_g170486 = ( temp_output_30_0_g170486 + temp_output_29_0_g170486 + temp_output_31_0_g170486 + ( break251_g170481.w * break33_g170486.w ) );
				float clampResult17_g170485 = clamp( temp_output_28_0_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170489 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170489 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170489 );
				float lerpResult303_g170481 = lerp( 1.0 , saturate( ( ( clampResult17_g170485 - temp_output_7_0_g170489 ) / ( temp_output_10_0_g170489 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170495 = lerpResult303_g170481;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170495 = ( temp_output_6_0_g170495 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170495 = temp_output_6_0_g170495;
				#endif
				float temp_output_263_0_g170481 = staticSwitch14_g170495;
				half Emissive_MeshMask221_g170481 = temp_output_263_0_g170481;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170484) = _EmissiveMaskTex;
				SamplerState Sampler276_g170484 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170490 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170490 = ( temp_output_6_0_g170490 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170490 = temp_output_6_0_g170490;
				#endif
				half4 Emissive_Coords167_g170481 = staticSwitch14_g170490;
				float4 temp_output_37_0_g170484 = Emissive_Coords167_g170481;
				half4 Coords276_g170484 = temp_output_37_0_g170484;
				half2 TexCoord276_g170484 = IN.ase_texcoord3.xy;
				half4 localSampleMain276_g170484 = SampleMain( Texture276_g170484 , Sampler276_g170484 , Coords276_g170484 , TexCoord276_g170484 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170484) = _EmissiveMaskTex;
				SamplerState Sampler275_g170484 = sampler_Linear_Repeat;
				half4 Coords275_g170484 = temp_output_37_0_g170484;
				half2 TexCoord275_g170484 = IN.ase_texcoord4.xy;
				half4 localSampleExtra275_g170484 = SampleExtra( Texture275_g170484 , Sampler275_g170484 , Coords275_g170484 , TexCoord275_g170484 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170481 = localSampleMain276_g170484;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170481 = localSampleExtra275_g170484;
				#else
				float4 staticSwitch176_g170481 = localSampleMain276_g170484;
				#endif
				half4 Emissive_MaskTex201_g170481 = staticSwitch176_g170481;
				float clampResult17_g170488 = clamp( (Emissive_MaskTex201_g170481).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170487 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170487 );
				float lerpResult302_g170481 = lerp( 1.0 , saturate( ( ( clampResult17_g170488 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170481 = lerpResult302_g170481;
				float temp_output_279_0_g170481 = ( Emissive_MeshMask221_g170481 * Emissive_Mask103_g170481 );
				float3 appendResult293_g170481 = (float3(temp_output_279_0_g170481 , temp_output_279_0_g170481 , temp_output_279_0_g170481));
				half3 Local_EmissiveColor278_g170481 = appendResult293_g170481;
				float3 temp_cast_7 = (1.0).xxx;
				TVEGlobalData Data15_g170483 = Data204_g170159;
				float Out_Dummy15_g170483 = 0;
				float4 Out_CoatParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170483 = float4( 0,0,0,0 );
				Out_Dummy15_g170483 = Data15_g170483.Dummy;
				Out_CoatParams15_g170483 = Data15_g170483.CoatParams;
				Out_PaintParams15_g170483 = Data15_g170483.PaintParams;
				Out_GlowParams15_g170483 = Data15_g170483.GlowParams;
				Out_AtmoParams15_g170483= Data15_g170483.AtmoParams;
				Out_FadeParams15_g170483= Data15_g170483.FadeParams;
				Out_FormParams15_g170483 = Data15_g170483.FormParams;
				Out_LandParams15_g170483 = Data15_g170483.LandParams;
				Out_WindParams15_g170483 = Data15_g170483.WindParams;
				Out_PushParams15_g170483 = Data15_g170483.PushParams;
				half4 Global_GlowParams179_g170481 = Out_GlowParams15_g170483;
				float3 lerpResult299_g170481 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170481).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170481 = lerpResult299_g170481;
				#else
				float3 staticSwitch228_g170481 = temp_cast_7;
				#endif
				half3 Emissive_GlobalMask248_g170481 = staticSwitch228_g170481;
				half3 Local_EmissiveValue88_g170481 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170481 );
				half3 Emissive_Blend260_g170481 = ( ( (Visual_Emissive255_g170481).xyz * Local_EmissiveColor278_g170481 ) * Local_EmissiveValue88_g170481 );
				float3 temp_output_3_0_g170491 = Emissive_Blend260_g170481;
				float temp_output_15_0_g170491 = _emissive_power_value;
				float3 temp_output_23_0_g170491 = ( temp_output_3_0_g170491 * temp_output_15_0_g170491 );
				float4 appendResult295_g170481 = (float4(temp_output_23_0_g170491 , Emissive_Mask103_g170481));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170481 = appendResult295_g170481;
				#else
				float4 staticSwitch129_g170481 = temp_cast_6;
				#endif
				half4 Final_Emissive184_g170481 = staticSwitch129_g170481;
				float4 In_Emissive3_g170493 = Final_Emissive184_g170481;
				float In_Grayscale3_g170493 = Out_Grayscale4_g170492;
				float In_Luminosity3_g170493 = Out_Luminosity4_g170492;
				float temp_output_297_11_g170481 = Out_MultiMask4_g170492;
				float In_MultiMask3_g170493 = temp_output_297_11_g170481;
				float In_AlphaClip3_g170493 = Out_AlphaClip4_g170492;
				float In_AlphaFade3_g170493 = Out_AlphaFade4_g170492;
				float3 In_Translucency3_g170493 = Out_Translucency4_g170492;
				float In_Transmission3_g170493 = Out_Transmission4_g170492;
				float In_Thickness3_g170493 = Out_Thickness4_g170492;
				float In_Diffusion3_g170493 = Out_Diffusion4_g170492;
				Data3_g170493.Dummy = In_Dummy3_g170493;
				Data3_g170493.Albedo = In_Albedo3_g170493;
				Data3_g170493.NormalTS = In_NormalTS3_g170493;
				Data3_g170493.NormalWS = In_NormalWS3_g170493;
				Data3_g170493.Shader = In_Shader3_g170493;
				Data3_g170493.Emissive= In_Emissive3_g170493;
				Data3_g170493.MultiMask = In_MultiMask3_g170493;
				Data3_g170493.Grayscale = In_Grayscale3_g170493;
				Data3_g170493.Luminosity = In_Luminosity3_g170493;
				Data3_g170493.AlphaClip = In_AlphaClip3_g170493;
				Data3_g170493.AlphaFade = In_AlphaFade3_g170493;
				Data3_g170493.Translucency = In_Translucency3_g170493;
				Data3_g170493.Transmission = In_Transmission3_g170493;
				Data3_g170493.Thickness = In_Thickness3_g170493;
				Data3_g170493.Diffusion = In_Diffusion3_g170493;
				TVEVisualData Data4_g170517 = Data3_g170493;
				float Out_Dummy4_g170517 = 0;
				float3 Out_Albedo4_g170517 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170517 = float2( 0,0 );
				float3 Out_NormalWS4_g170517 = float3( 0,0,0 );
				float4 Out_Shader4_g170517 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170517 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170517 = 0;
				float Out_Grayscale4_g170517 = 0;
				float Out_Luminosity4_g170517 = 0;
				float Out_AlphaClip4_g170517 = 0;
				float Out_AlphaFade4_g170517 = 0;
				float3 Out_Translucency4_g170517 = float3( 0,0,0 );
				float Out_Transmission4_g170517 = 0;
				float Out_Thickness4_g170517 = 0;
				float Out_Diffusion4_g170517 = 0;
				Out_Dummy4_g170517 = Data4_g170517.Dummy;
				Out_Albedo4_g170517 = Data4_g170517.Albedo;
				Out_NormalTS4_g170517 = Data4_g170517.NormalTS;
				Out_NormalWS4_g170517 = Data4_g170517.NormalWS;
				Out_Shader4_g170517 = Data4_g170517.Shader;
				Out_Emissive4_g170517= Data4_g170517.Emissive;
				Out_MultiMask4_g170517 = Data4_g170517.MultiMask;
				Out_Grayscale4_g170517 = Data4_g170517.Grayscale;
				Out_Luminosity4_g170517= Data4_g170517.Luminosity;
				Out_AlphaClip4_g170517 = Data4_g170517.AlphaClip;
				Out_AlphaFade4_g170517 = Data4_g170517.AlphaFade;
				Out_Translucency4_g170517 = Data4_g170517.Translucency;
				Out_Transmission4_g170517 = Data4_g170517.Transmission;
				Out_Thickness4_g170517 = Data4_g170517.Thickness;
				Out_Diffusion4_g170517 = Data4_g170517.Diffusion;
				half3 Visual_Albedo199_g170516 = Out_Albedo4_g170517;
				half3 Final_Albedo312_g170516 = Visual_Albedo199_g170516;
				float3 In_Albedo3_g170518 = Final_Albedo312_g170516;
				float2 In_NormalTS3_g170518 = Out_NormalTS4_g170517;
				float3 In_NormalWS3_g170518 = Out_NormalWS4_g170517;
				float4 In_Shader3_g170518 = Out_Shader4_g170517;
				float4 In_Emissive3_g170518 = Out_Emissive4_g170517;
				float In_Grayscale3_g170518 = Out_Grayscale4_g170517;
				float In_Luminosity3_g170518 = Out_Luminosity4_g170517;
				float temp_output_301_11_g170516 = Out_MultiMask4_g170517;
				float In_MultiMask3_g170518 = temp_output_301_11_g170516;
				float In_AlphaClip3_g170518 = Out_AlphaClip4_g170517;
				float In_AlphaFade3_g170518 = Out_AlphaFade4_g170517;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170516 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170516 );
				half Visual_Transmission138_g170516 = Out_Transmission4_g170517;
				half Subsurface_Value268_g170516 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170520 = Data204_g170159;
				float Out_Dummy15_g170520 = 0;
				float4 Out_CoatParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170520 = float4( 0,0,0,0 );
				Out_Dummy15_g170520 = Data15_g170520.Dummy;
				Out_CoatParams15_g170520 = Data15_g170520.CoatParams;
				Out_PaintParams15_g170520 = Data15_g170520.PaintParams;
				Out_GlowParams15_g170520 = Data15_g170520.GlowParams;
				Out_AtmoParams15_g170520= Data15_g170520.AtmoParams;
				Out_FadeParams15_g170520= Data15_g170520.FadeParams;
				Out_FormParams15_g170520 = Data15_g170520.FormParams;
				Out_LandParams15_g170520 = Data15_g170520.LandParams;
				Out_WindParams15_g170520 = Data15_g170520.WindParams;
				Out_PushParams15_g170520 = Data15_g170520.PushParams;
				half4 Global_GlowParams373_g170516 = Out_GlowParams15_g170520;
				float lerpResult403_g170516 = lerp( 1.0 , saturate( (Global_GlowParams373_g170516).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170516 = lerpResult403_g170516;
				#else
				float staticSwitch367_g170516 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170516 = staticSwitch367_g170516;
				half Visual_MultiMask292_g170516 = temp_output_301_11_g170516;
				float lerpResult293_g170516 = lerp( 1.0 , Visual_MultiMask292_g170516 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170516 = lerpResult293_g170516;
				half Custom_Mask363_g170516 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170516 = ( Visual_Transmission138_g170516 * Subsurface_Value268_g170516 * Subsurface_GlobalMask369_g170516 * Subsurface_MultiMask296_g170516 * Custom_Mask363_g170516 );
				#else
				float staticSwitch345_g170516 = 0.0;
				#endif
				half Final_Transmission269_g170516 = staticSwitch345_g170516;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170516 = ( Subsurface_Color264_g170516 * Final_Transmission269_g170516 * 10.0 );
				#else
				float3 staticSwitch348_g170516 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170516 = staticSwitch348_g170516;
				float3 In_Translucency3_g170518 = Final_Translucency254_g170516;
				float In_Transmission3_g170518 = Final_Transmission269_g170516;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170516 = 0.0;
				#else
				float staticSwitch351_g170516 = 1.0;
				#endif
				half Final_Thickness275_g170516 = staticSwitch351_g170516;
				float In_Thickness3_g170518 = Final_Thickness275_g170516;
				float Final_Diffusion340_g170516 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170518 = Final_Diffusion340_g170516;
				Data3_g170518.Dummy = In_Dummy3_g170518;
				Data3_g170518.Albedo = In_Albedo3_g170518;
				Data3_g170518.NormalTS = In_NormalTS3_g170518;
				Data3_g170518.NormalWS = In_NormalWS3_g170518;
				Data3_g170518.Shader = In_Shader3_g170518;
				Data3_g170518.Emissive= In_Emissive3_g170518;
				Data3_g170518.MultiMask = In_MultiMask3_g170518;
				Data3_g170518.Grayscale = In_Grayscale3_g170518;
				Data3_g170518.Luminosity = In_Luminosity3_g170518;
				Data3_g170518.AlphaClip = In_AlphaClip3_g170518;
				Data3_g170518.AlphaFade = In_AlphaFade3_g170518;
				Data3_g170518.Translucency = In_Translucency3_g170518;
				Data3_g170518.Transmission = In_Transmission3_g170518;
				Data3_g170518.Thickness = In_Thickness3_g170518;
				Data3_g170518.Diffusion = In_Diffusion3_g170518;
				TVEVisualData Data4_g170529 = Data3_g170518;
				float Out_Dummy4_g170529 = 0;
				float3 Out_Albedo4_g170529 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170529 = float2( 0,0 );
				float3 Out_NormalWS4_g170529 = float3( 0,0,0 );
				float4 Out_Shader4_g170529 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170529 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170529 = 0;
				float Out_Grayscale4_g170529 = 0;
				float Out_Luminosity4_g170529 = 0;
				float Out_AlphaClip4_g170529 = 0;
				float Out_AlphaFade4_g170529 = 0;
				float3 Out_Translucency4_g170529 = float3( 0,0,0 );
				float Out_Transmission4_g170529 = 0;
				float Out_Thickness4_g170529 = 0;
				float Out_Diffusion4_g170529 = 0;
				Out_Dummy4_g170529 = Data4_g170529.Dummy;
				Out_Albedo4_g170529 = Data4_g170529.Albedo;
				Out_NormalTS4_g170529 = Data4_g170529.NormalTS;
				Out_NormalWS4_g170529 = Data4_g170529.NormalWS;
				Out_Shader4_g170529 = Data4_g170529.Shader;
				Out_Emissive4_g170529= Data4_g170529.Emissive;
				Out_MultiMask4_g170529 = Data4_g170529.MultiMask;
				Out_Grayscale4_g170529 = Data4_g170529.Grayscale;
				Out_Luminosity4_g170529= Data4_g170529.Luminosity;
				Out_AlphaClip4_g170529 = Data4_g170529.AlphaClip;
				Out_AlphaFade4_g170529 = Data4_g170529.AlphaFade;
				Out_Translucency4_g170529 = Data4_g170529.Translucency;
				Out_Transmission4_g170529 = Data4_g170529.Transmission;
				Out_Thickness4_g170529 = Data4_g170529.Thickness;
				Out_Diffusion4_g170529 = Data4_g170529.Diffusion;
				half3 Input_Albedo24_g170528 = Out_Albedo4_g170529;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170528 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g170528 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g170528 = staticSwitch22_g170528;
				float4 break24_g170523 = Out_Shader4_g170529;
				half Metallic95_g170523 = break24_g170523.x;
				half Input_Metallic25_g170528 = Metallic95_g170523;
				half OneMinusReflectivity31_g170528 = ( (ColorSpaceDielectricSpec23_g170528).w - ( (ColorSpaceDielectricSpec23_g170528).w * Input_Metallic25_g170528 ) );
				
				float localCustomAlphaClip19_g170530 = ( 0.0 );
				float temp_output_3_0_g170530 = Out_AlphaClip4_g170529;
				float Alpha19_g170530 = temp_output_3_0_g170530;
				float temp_output_15_0_g170530 = 0.0;
				float Treshold19_g170530 = temp_output_15_0_g170530;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170530 - Treshold19_g170530);
				#endif
				#else
				clip(Alpha19_g170530 - Treshold19_g170530);
				#endif
				#endif
				
				o.Albedo = ( Input_Albedo24_g170528 * OneMinusReflectivity31_g170528 );
				o.Normal = fixed3( 0, 0, 1 );
				o.Emission = (Out_Emissive4_g170529).xyz;
				o.Alpha = saturate( ( Alpha19_g170530 * Out_AlphaFade4_g170529 ) );
				float AlphaClipThreshold = 0.5;

				#ifdef _ALPHATEST_ON
					clip( o.Alpha - AlphaClipThreshold );
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				UnityMetaInput metaIN;
				UNITY_INITIALIZE_OUTPUT(UnityMetaInput, metaIN);
				metaIN.Albedo = o.Albedo;
				metaIN.Emission = o.Emission;
				#ifdef EDITOR_VISUALIZATION
					metaIN.VizUV = IN.vizUV;
					metaIN.LightCoord = IN.lightCoord;
				#endif
				return UnityMetaFragment(metaIN);
			}
			ENDCG
		}

		
		Pass
		{
			
			Name "ShadowCaster"
			Tags { "LightMode"="ShadowCaster" }
			ZWrite On
			ZTest LEqual
			AlphaToMask Off

			CGPROGRAM
			#define ASE_GEOMETRY 1
			#define ASE_NEEDS_FRAG_SHADOWCOORDS
			#pragma multi_compile_instancing
			#pragma multi_compile __ LOD_FADE_CROSSFADE
			#pragma multi_compile_fog
			#define ASE_FOG 1
			#define ASE_TRANSLUCENCY 1
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _SPECULAR_SETUP 1
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma vertex vert
			#pragma fragment frag
			#pragma skip_variants FOG_LINEAR FOG_EXP FOG_EXP2
			#pragma multi_compile_shadowcaster
			#ifndef UNITY_PASS_SHADOWCASTER
				#define UNITY_PASS_SHADOWCASTER
			#endif
			#include "HLSLSupport.cginc"

			#ifdef ASE_GEOMETRY
				#ifndef UNITY_INSTANCED_LOD_FADE
					#define UNITY_INSTANCED_LOD_FADE
				#endif
				#ifndef UNITY_INSTANCED_SH
					#define UNITY_INSTANCED_SH
				#endif
				#ifndef UNITY_INSTANCED_LIGHTMAPSTS
					#define UNITY_INSTANCED_LIGHTMAPSTS
				#endif
			#endif

			#if ( SHADER_API_D3D11 || SHADER_API_GLCORE || SHADER_API_GLES || SHADER_API_GLES3 || SHADER_API_METAL || SHADER_API_VULKAN )
				#define CAN_SKIP_VPOS
			#endif
			#include "UnityShaderVariables.cginc"
			#include "UnityCG.cginc"
			#include "Lighting.cginc"
			#include "UnityPBSLighting.cginc"

			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation
			#if defined(SHADER_API_D3D11) || defined(SHADER_API_XBOXONE) || defined(UNITY_COMPILER_HLSLCC) || defined(SHADER_API_PSSL) || (defined(SHADER_TARGET_SURFACE_ANALYSIS) && !defined(SHADER_TARGET_SURFACE_ANALYSIS_MOJOSHADER))//ASE Sampler Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex.Sample(samplerTex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex.SampleBias(samplerTex,coord,bias)
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex.SampleGrad(samplerTex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplerTex,coord,lod) tex.SampleLevel(samplerTex,coord, lod)
			#else//ASE Sampling Macros
			#define SAMPLE_TEXTURE2D(tex,samplerTex,coord) tex2D(tex,coord)
			#define SAMPLE_TEXTURE2D_LOD(tex,samplerTex,coord,lod) tex2Dlod(tex,float4(coord,0,lod))
			#define SAMPLE_TEXTURE2D_BIAS(tex,samplerTex,coord,bias) tex2Dbias(tex,float4(coord,0,bias))
			#define SAMPLE_TEXTURE2D_GRAD(tex,samplerTex,coord,ddx,ddy) tex2Dgrad(tex,coord,ddx,ddy)
			#define SAMPLE_TEXTURE2D_ARRAY_LOD(tex,samplertex,coord,lod) tex2DArraylod(tex, float4(coord,lod))
			#endif//ASE Sampling Macros
			

			struct appdata {
				float4 vertex : POSITION;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct v2f {
				V2F_SHADOW_CASTER;
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			#ifdef UNITY_STANDARD_USE_DITHER_MASK
				sampler3D _DitherMaskLOD;
			#endif
			#ifdef ASE_TESSELLATION
				float _TessPhongStrength;
				float _TessValue;
				float _TessMin;
				float _TessMax;
				float _TessEdgeLength;
				float _TessMaxDisp;
			#endif
			uniform half4 _OverlayColoringOn;
			uniform half4 _OverlayColoringOff;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayGlitterTex);
			SamplerState sampler_OverlayGlitterTex;
			uniform half _OverlayGlitterTillingValue;
			uniform half _OverlayGlitterIntensityValue;
			uniform half _OverlayLiteInfo;
			uniform half4 _OverlayGlitterColor;
			uniform half _NormalLiteInfo;
			uniform half4 _NormalColoringStart;
			uniform half4 _NormalColoringEnd;
			uniform half _SubsurfaceScatteringValue;
			uniform half _SubsurfaceAngleValue;
			uniform float _SubsurfaceDiffusion;
			uniform float4 _SubsurfaceDiffusion_Asset;
			uniform half _SubsurfaceSpace;
			uniform half _RenderZWrite;
			uniform half4 _Color;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_BumpMap);
			SamplerState sampler_BumpMap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainTex);
			SamplerState sampler_MainTex;
			uniform half _Cutoff;
			uniform half _IsVersion;
			uniform half _RenderCategory;
			uniform half _RenderEnd;
			uniform half _RenderMode;
			uniform half _NoiseCategory;
			uniform half _NoiseEnd;
			uniform half _RenderCull;
			uniform half _RenderNormal;
			UNITY_DECLARE_TEX3D_NOSAMPLER(_NoiseTex3D);
			SamplerState sampler_NoiseTex3D;
			uniform half _RenderBakeGI;
			uniform half _RenderDecals;
			uniform half _RenderSSR;
			uniform half _RenderPriority;
			uniform half _RenderQueue;
			uniform half _RenderMotion;
			uniform half _RenderClip;
			uniform half _RenderShadow;
			uniform half _IsTVEShader;
			uniform half _IsCustomShader;
			uniform half _IsShared;
			uniform half _HasDefaultTextures;
			uniform half _IsCollected;
			uniform half _IsConverted;
			uniform half _IsIdentifier;
			uniform half _RenderFilter;
			uniform half _render_src;
			uniform half _render_cull;
			uniform half _render_dst;
			uniform half _render_zw;
			uniform half _render_coverage;
			uniform half _IsLiteShader;
			uniform half _IsSubsurfaceShader;
			uniform half _IsGeneralShader;
			uniform half _NormalCategory;
			uniform half _NormalEnd;
			uniform half _NormalComputeValue;
			uniform half _MotionWindCategory;
			uniform half _MotionWindEnd;
			uniform half _MotionWindElementMode;
			uniform half _MotionInteractionCategory;
			uniform half _MotionInteractionEnd;
			uniform half _InteractionLiteInfo;
			uniform half4 _InteractionColoring;
			uniform half _MotionPushIntensityValue;
			uniform half _MotionPushPivotValue;
			uniform half _MotionPushPhaseValue;
			uniform half4 _MotionPushMaskRemap;
			uniform half _MotionPushMaskMode;
			uniform half _MotionPushElementMode;
			uniform half _ObjectCategory;
			uniform half _ObjectEnd;
			uniform half _ObjectModelMode;
			uniform half _ObjectPivotMode;
			uniform half _ObjectPhaseMode;
			uniform float3 TVE_WorldOrigin;
			uniform half4 _object_phase_mode;
			uniform half _ObjectHeightValue;
			uniform half _ObjectRadiusValue;
			uniform half _MotionSmallIntensityValue;
			uniform half4 _motion_small_vert_mode;
			uniform half4 _motion_small_proc_mode;
			uniform half _motion_small_mask_mode;
			uniform half4 _MotionSmallMaskRemap;
			uniform half _MotionSmallMaskMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MotionNoiseTex);
			uniform half _MotionBasePivotValue;
			uniform half _MotionBasePhaseValue;
			uniform half _MotionTillingValue;
			SamplerState sampler_Linear_Repeat;
			uniform half _MotionIntensityValue;
			uniform half _global_wind_layer_value;
			uniform float TVE_WindLayers[10];
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindBaseTex);
			uniform half4 TVE_RenderBaseCoords;
			SamplerState sampler_Linear_Clamp;
			UNITY_DECLARE_TEX2DARRAY_NOSAMPLER(TVE_WindNearTex);
			uniform half4 TVE_RenderNearCoords;
			uniform float4 TVE_RenderNearPositionR;
			uniform half TVE_RenderNearFadeValue;
			uniform half4 TVE_WindParams;
			uniform half _MotionSmallPivotValue;
			uniform half _MotionSmallPhaseValue;
			uniform half _MotionFrontValue;
			uniform half _MotionTinyIntensityValue;
			uniform half4 _motion_tiny_vert_mode;
			uniform half4 _motion_tiny_proc_mode;
			uniform half _motion_tiny_mask_mode;
			uniform half4 _MotionTinyMaskRemap;
			uniform half _MotionTinyMaskMode;
			uniform half _MotionDistValue;
			uniform half _MotionBaseIntensityValue;
			uniform half4 _motion_base_vert_mode;
			uniform half4 _motion_base_proc_mode;
			uniform half _motion_base_mask_mode;
			uniform half4 _MotionBaseMaskRemap;
			uniform half _MotionBaseMaskMode;
			uniform half _MotionDelayValue;
			uniform half _NormalFlattenValue;
			uniform half3 _NormalSphereOffsetValue;
			uniform half _NormalSphereValue;
			uniform half4 _normal_vert_mode;
			uniform half4 _NormalMeshRemap;
			uniform half _NormalMeshValue;
			uniform half _NormalMeshMode;
			uniform half _DisableSRPBatcher;
			uniform half _VariationLiteInfo;
			uniform half4 _VariationColoring;
			uniform half _VariationCategory;
			uniform half _VariationEnd;
			uniform half _VariationIntensityValue;
			uniform half4 _VariationColorTwo;
			uniform half4 _VariationColorOne;
			uniform half _VariationMultiValue;
			uniform half4 _VariationNoiseRemap;
			uniform half _VariationNoisePivotsValue1;
			uniform half _VariationNoiseTillingValue;
			uniform half _TintingLiteInfo;
			uniform half4 _TintingColoring;
			uniform half _TintingCategory;
			uniform half _TintingEnd;
			uniform half _TintingSpace;
			uniform half _TintingBakeMode;
			uniform half _TintingElementMode;
			uniform half _TintingIntensityValue;
			uniform float4 _TintingColor;
			uniform half _TintingGrayValue;
			uniform half _TintingMultiValue;
			uniform half _TintingLumaValue;
			uniform half4 _TintingLumaRemap;
			uniform half _TintingMeshMode;
			uniform half4 _TintingMeshRemap;
			uniform half _TintingMeshValue;
			uniform half4 _TintingBlendRemap;
			uniform half _DrynessLiteInfo;
			uniform half4 _DrynessColoring;
			uniform half _DrynessCategory;
			uniform half _DrynessEnd;
			uniform half _DrynessSpace;
			uniform half _DrynessElementMode;
			uniform half _DrynessBakeMode;
			uniform half _DrynessIntensityValue;
			uniform float4 _DrynessColor;
			uniform half _DrynessGrayValue;
			uniform half _DrynessShiftValue;
			uniform half _DrynessSmoothnessValue;
			uniform half _DrynessSubsurfaceValue;
			uniform half _DrynessMultiValue;
			uniform half _DrynessLumaValue;
			uniform half4 _DrynessLumaRemap;
			uniform half _DrynessMeshMode;
			uniform half4 _DrynessMeshRemap;
			uniform half _DrynessMeshValue;
			uniform half4 _DrynessBlendRemap;
			uniform half _WetnessLiteInfo;
			uniform half4 _WetnessColoring;
			uniform half _WetnessCategory;
			uniform half _WetnessEnd;
			uniform half _WetnessElementMode;
			uniform half _WetnessBakeMode;
			uniform half _WetnessIntensityValue;
			uniform half _WetnessContrastValue;
			uniform half _WetnessSmoothnessValue;
			uniform half _WetnessWaterIntensityValue;
			uniform half4 _WetnessWaterColor;
			uniform half _WetnessWaterBaseValue;
			uniform half4 _WetnessWaterBlendRemap;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_WetnessDropsTex);
			uniform float4 _WetnessDropsTex_ST;
			SamplerState sampler_WetnessDropsTex;
			uniform half _WetnessDropsIntensityValue;
			uniform half _WetnessDropsNormalValue;
			uniform half _WetnessDropsTillingValue;
			uniform half _WetnessDropsDistValue;
			uniform half _CutoutLiteInfo;
			uniform half4 _CutoutColoring;
			uniform half _CutoutCategory;
			uniform half _CutoutEnd;
			uniform half _CutoutSpace;
			uniform half _CutoutElementMode;
			uniform half _CutoutBakeMode;
			uniform half _CutoutIntensityValue;
			uniform half _CutoutMultiValue;
			uniform half _CutoutAlphaValue;
			uniform half _CutoutNoiseValue;
			uniform half _CutoutNoiseTillingValue;
			uniform half _CutoutMeshValue;
			uniform half _CutoutMeshMode;
			uniform half4 _CutoutMeshRemap;
			uniform half _DitherLiteInfo;
			uniform half4 _DitherColoring;
			uniform half _DitherCategory;
			uniform half _DitherEnd;
			uniform half _DitherConstantValue;
			uniform half _DitherProximityValue;
			uniform half _DitherProximityDistValue;
			uniform half _DitherGlancingValue;
			uniform half _DitherGlancingAngleValue;
			uniform half _DitherDistanceValue;
			uniform half _DitherDistanceMaxValue;
			uniform half _DitherDistanceMinValue;
			uniform half _DitherMultiValue;
			uniform half _DitherNoiseTillingValue;
			uniform half _PerspectiveLiteInfo;
			uniform half4 _PerspectiveColoring;
			uniform half _PerspectiveCategory;
			uniform half _PerspectiveEnd;
			uniform half _PerspectiveIntensityValue;
			uniform half _PerspectiveAngleValue;
			uniform half _SizeFadeLiteInfo;
			uniform half4 _SizeFadeColoring;
			uniform half _SizeFadeCategory;
			uniform half _SizeFadeEnd;
			uniform half _SizeFadeElementMode;
			uniform half _SizeFadeIntensityValue;
			uniform half _SizeFadeScaleMode;
			uniform half _SizeFadeScaleValue;
			uniform half _SizeFadeDistMinValue;
			uniform half _SizeFadeDistMaxValue;
			uniform half _SubsurfaceCategory;
			uniform half _SubsurfaceEnd;
			uniform half _SubsurfaceDirectValue;
			uniform half _SubsurfaceNormalValue;
			uniform half _SubsurfaceAmbientValue;
			uniform half _SubsurfaceShadowValue;
			uniform half _SubsurfaceElementMode;
			uniform half _EmissiveCategory;
			uniform half _EmissiveEnd;
			uniform half _EmissivePowerMode;
			uniform half _EmissivePowerValue;
			uniform half _EmissiveElementMode;
			uniform half _EmissiveFlagMode;
			uniform half _OverlayCategory;
			uniform half _OverlayEnd;
			uniform half _OverlaySpace;
			uniform half _OverlayElementMode;
			uniform half _OverlayBakeMode;
			uniform float4 _OverlayGlitterTex_ST;
			uniform half _OverlayGlitterDistValue;
			uniform half _GradientCategory;
			uniform half _GradientEnd;
			uniform half _GradientBakeMode;
			uniform half _OcclusionCategory;
			uniform half _OcclusionEnd;
			uniform half _OcclusionBakeMode;
			uniform half _DetailCategory;
			uniform half _DetailEnd;
			uniform half _ThirdSampleMode;
			uniform half _ThirdCoordMode;
			uniform half4 _ThirdCoordValue;
			uniform half _ThirdMaskSampleMode;
			uniform half _ThirdMaskCoordMode;
			uniform half4 _ThirdMaskCoordValue;
			uniform half _ThirdElementMode;
			uniform half _ThirdBakeMode;
			uniform half _LayerCategory;
			uniform half _LayerEnd;
			uniform half _SecondSampleMode;
			uniform half _SecondCoordMode;
			uniform half4 _SecondCoordValue;
			uniform half _SecondMaskSampleMode;
			uniform half _SecondMaskCoordMode;
			uniform half4 _SecondMaskCoordValue;
			uniform half _SecondElementMode;
			uniform half _SecondBakeMode;
			uniform half _MainCategory;
			uniform half _MainEnd;
			uniform half _MainSampleMode;
			uniform half _MainCoordMode;
			uniform half4 _MainCoordValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainAlbedoTex);
			SamplerState sampler_Linear_Repeat_Aniso8;
			SamplerState sampler_Point_Repeat;
			uniform half4 _main_coord_value;
			uniform half _MainAlbedoValue;
			uniform half4 _MainColorTwo;
			uniform half4 _MainColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainShaderTex);
			uniform half _MainMetallicValue;
			uniform half _MainOcclusionValue;
			uniform half _MainSmoothnessValue;
			uniform half4 _MainMultiRemap;
			uniform half _MainColorMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_MainNormalTex);
			uniform half _MainNormalValue;
			uniform half _MainAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondAlbedoTex);
			uniform half4 _second_coord_value;
			uniform half _SecondAlbedoValue;
			uniform half4 _SecondColorTwo;
			uniform half4 _SecondColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondShaderTex);
			uniform half _SecondMetallicValue;
			uniform half _SecondOcclusionValue;
			uniform half _SecondSmoothnessValue;
			uniform half4 _SecondMultiRemap;
			uniform half _SecondColorMode;
			uniform half _SecondBlendAlbedoValue;
			uniform half _SecondIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondMaskTex);
			uniform half4 _second_mask_coord_value;
			uniform half4 _SecondMaskRemap;
			uniform half _SecondMaskValue;
			uniform half4 _SecondProjRemap;
			uniform half _SecondProjValue;
			uniform half4 _second_vert_mode;
			uniform half4 _SecondMeshRemap;
			uniform half _SecondMeshValue;
			uniform half _SecondMeshMode;
			uniform half _GlobalLiteInfo;
			uniform half _GlobalCategory;
			uniform half _GlobalEnd;
			uniform half4 TVE_CoatParams;
			uniform half4 TVE_PaintParams;
			uniform half4 TVE_GlowParams;
			uniform half4 TVE_AtmoParams;
			uniform half4 TVE_FormParams;
			uniform half4 TVE_PushParams;
			uniform half TVE_IsEnabled;
			uniform half4 _SecondBlendRemap;
			uniform half _SecondBlendIntensityValue;
			uniform half _SecondBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondNormalTex);
			uniform half _SecondNormalValue;
			uniform half _SecondBlendShaderValue;
			uniform half _SecondAlphaClipValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdAlbedoTex);
			uniform half4 _third_coord_value;
			uniform half _ThirdAlbedoValue;
			uniform half4 _ThirdColorTwo;
			uniform half4 _ThirdColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdShaderTex);
			uniform half _ThirdMetallicValue;
			uniform half _ThirdOcclusionValue;
			uniform half _ThirdSmoothnessValue;
			uniform half4 _ThirdMultiRemap;
			uniform half _ThirdColorMode;
			uniform half _ThirdBlendAlbedoValue;
			uniform half _ThirdIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdMaskTex);
			uniform half4 _third_mask_coord_value;
			uniform half4 _ThirdMaskRemap;
			uniform half _ThirdMaskValue;
			uniform half4 _third_vert_mode;
			uniform half4 _ThirdMeshRemap;
			uniform half _ThirdMeshValue;
			uniform half _ThirdMeshMode;
			uniform half4 _ThirdProjRemap;
			uniform half _ThirdProjValue;
			uniform half4 _ThirdBlendRemap;
			uniform half _ThirdBlendIntensityValue;
			uniform half _ThirdBlendNormalValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdNormalTex);
			uniform half _ThirdNormalValue;
			uniform half _ThirdBlendShaderValue;
			uniform half _ThirdAlphaClipValue;
			uniform half4 _OcclusionColorTwo;
			uniform half4 _OcclusionColorOne;
			uniform half4 _occlusion_vert_mode;
			uniform half4 _OcclusionMeshRemap;
			uniform half _OcclusionMeshMode;
			uniform half _OcclusionIntensityValue;
			uniform half4 _GradientColorTwo;
			uniform half4 _GradientColorOne;
			uniform half4 _gradient_vert_mode;
			uniform half4 _GradientMeshRemap;
			uniform half _GradientMeshMode;
			uniform half _GradientIntensityValue;
			uniform half _GradientMultiValue;
			uniform half3 _motion_highlight_color;
			uniform half _MotionHighlightValue;
			uniform half4 _MotionHighlightColor;
			uniform half4 _OverlayColor;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayAlbedoTex);
			uniform half4 _overlay_coord_value;
			uniform half _OverlaySampleMode;
			uniform half _OverlayCoordMode;
			uniform half4 _OverlayCoordValue;
			uniform half _OverlayTextureMode;
			uniform half _OverlayIntensityValue;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayMaskTex);
			uniform half4 _overlay_mask_coord_value;
			uniform half _OverlayMaskSampleMode;
			uniform half _OverlayMaskCoordMode;
			uniform half4 _OverlayMaskCoordValue;
			uniform half4 _OverlayMaskRemap;
			uniform half _OverlayMaskValue;
			uniform half4 _OverlayProjRemap;
			uniform half _OverlayProjValue;
			uniform half4 _OverlayLumaRemap;
			uniform half _OverlayLumaValue;
			uniform half4 _overlay_vert_mode;
			uniform half4 _OverlayMeshRemap;
			uniform half _OverlayMeshValue;
			uniform half _OverlayMeshMode;
			uniform half4 _OverlayBlendRemap1;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_OverlayNormalTex);
			uniform half _OverlayNormalValue;
			uniform half _OverlaySmoothnessValue;
			uniform half _OverlaySubsurfaceValue;
			uniform half4 _emissive_vert_mode;
			uniform half4 _EmissiveMeshRemap;
			uniform half _EmissiveMeshValue;
			uniform half _EmissiveMeshMode;
			UNITY_DECLARE_TEX2D_NOSAMPLER(_EmissiveMaskTex);
			uniform half4 _emissive_coord_value;
			uniform half _EmissiveSampleMode;
			uniform half _EmissiveCoordMode;
			uniform half4 _EmissiveCoordValue;
			uniform half4 _EmissiveMaskRemap;
			uniform half _EmissiveMaskValue;
			uniform half _EmissiveIntensityValue;
			uniform half4 _EmissiveColor;
			uniform float _emissive_power_value;
			uniform half4 _SubsurfaceColor;
			uniform half _SubsurfaceIntensityValue;
			uniform half _SubsurfaceMultiValue;


			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( UNITY_DECLARE_TEX2D_NOSAMPLER(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			

			v2f VertexFunction (appdata v  ) {
				UNITY_SETUP_INSTANCE_ID(v);
				v2f o;
				UNITY_INITIALIZE_OUTPUT(v2f,o);
				UNITY_TRANSFER_INSTANCE_ID(v,o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				TVEModelData Data16_g170515 = (TVEModelData)0;
				float In_Dummy16_g170515 = 0.0;
				TVEModelData Data16_g170498 = (TVEModelData)0;
				half Dummy1575_g170496 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170498 = Dummy1575_g170496;
				TVEModelData Data16_g170475 = (TVEModelData)0;
				float In_Dummy16_g170475 = 0.0;
				TVEModelData Data16_g170286 = (TVEModelData)0;
				half4 Dummy181_g170277 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g170286 = Dummy181_g170277.r;
				TVEModelData Data16_g170225 = (TVEModelData)0;
				float In_Dummy16_g170225 = 0.0;
				TVEModelData Data16_g170158 = (TVEModelData)0;
				half Dummy207_g170143 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g170158 = Dummy207_g170143;
				half3 PositionOS131_g170143 = v.vertex.xyz;
				float3 In_PositionOS16_g170158 = PositionOS131_g170143;
				float3 ase_worldPos = mul(unity_ObjectToWorld, float4( (v.vertex).xyz, 1 )).xyz;
				float3 vertexToFrag73_g170143 = ase_worldPos;
				half3 PositionWS122_g170143 = vertexToFrag73_g170143;
				float3 In_PositionWS16_g170158 = PositionWS122_g170143;
				float4x4 break19_g170145 = unity_ObjectToWorld;
				float3 appendResult20_g170145 = (float3(break19_g170145[ 0 ][ 3 ] , break19_g170145[ 1 ][ 3 ] , break19_g170145[ 2 ][ 3 ]));
				half3 ObjectData20_g170147 = appendResult20_g170145;
				half3 WorldData19_g170147 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170147 = WorldData19_g170147;
				#else
				float3 staticSwitch14_g170147 = ObjectData20_g170147;
				#endif
				float3 temp_output_124_0_g170145 = staticSwitch14_g170147;
				float3 temp_output_239_7_g170143 = temp_output_124_0_g170145;
				float4x4 break19_g170149 = unity_ObjectToWorld;
				float3 appendResult20_g170149 = (float3(break19_g170149[ 0 ][ 3 ] , break19_g170149[ 1 ][ 3 ] , break19_g170149[ 2 ][ 3 ]));
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g170153 = (float3(v.ase_texcoord3.x , 0.0 , v.ase_texcoord3.y));
				float3 break233_g170143 = PositionOS131_g170143;
				float3 appendResult234_g170143 = (float3(break233_g170143.x , 0.0 , break233_g170143.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g170143 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g170143 = appendResult60_g170153;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g170143 = appendResult234_g170143;
				#else
				float3 staticSwitch229_g170143 = _Vector0;
				#endif
				half3 PivotOS149_g170143 = staticSwitch229_g170143;
				float3 temp_output_122_0_g170149 = PivotOS149_g170143;
				float3 PivotsOnly105_g170149 = (mul( unity_ObjectToWorld, float4( temp_output_122_0_g170149 , 0.0 ) ).xyz).xyz;
				half3 ObjectData20_g170151 = ( appendResult20_g170149 + PivotsOnly105_g170149 );
				half3 WorldData19_g170151 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g170151 = WorldData19_g170151;
				#else
				float3 staticSwitch14_g170151 = ObjectData20_g170151;
				#endif
				float3 temp_output_124_0_g170149 = staticSwitch14_g170151;
				float3 temp_output_237_7_g170143 = temp_output_124_0_g170149;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g170143 = temp_output_239_7_g170143;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g170143 = temp_output_237_7_g170143;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g170143 = temp_output_237_7_g170143;
				#else
				float3 staticSwitch236_g170143 = temp_output_239_7_g170143;
				#endif
				float3 vertexToFrag76_g170143 = staticSwitch236_g170143;
				half3 PivotWS121_g170143 = vertexToFrag76_g170143;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170143 = ( PositionWS122_g170143 - PivotWS121_g170143 );
				#else
				float3 staticSwitch204_g170143 = PositionWS122_g170143;
				#endif
				half3 PositionWO132_g170143 = ( staticSwitch204_g170143 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170158 = PositionWO132_g170143;
				float3 In_PositionRawOS16_g170158 = PositionOS131_g170143;
				float3 In_PositionAddOS16_g170158 = float3( 0,0,0 );
				float3 In_PivotOS16_g170158 = PivotOS149_g170143;
				float3 In_PivotWS16_g170158 = PivotWS121_g170143;
				half3 PivotWO133_g170143 = ( PivotWS121_g170143 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170158 = PivotWO133_g170143;
				half3 NormalOS134_g170143 = v.normal;
				float3 In_NormalOS16_g170158 = NormalOS134_g170143;
				float3 ase_worldNormal = UnityObjectToWorldNormal(v.normal);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170143 = normalizedWorldNormal;
				float3 In_NormalWS16_g170158 = Normal_WS95_g170143;
				float3 In_NormalRawOS16_g170158 = NormalOS134_g170143;
				float3 objToWorldDir298_g170143 = normalize( mul( unity_ObjectToWorld, float4( v.normal, 0 ) ).xyz );
				half3 Normal_RawWS136_g170143 = objToWorldDir298_g170143;
				float3 In_NormalRawWS16_g170158 = Normal_RawWS136_g170143;
				half4 TangentlOS153_g170143 = v.tangent;
				float4 In_TangentOS16_g170158 = TangentlOS153_g170143;
				float3 normalizeResult296_g170143 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170143 ) );
				half3 ViewDirWS169_g170143 = normalizeResult296_g170143;
				float3 In_ViewDirWS16_g170158 = ViewDirWS169_g170143;
				half4 VertexMasks171_g170143 = v.ase_color;
				float4 In_VertexData16_g170158 = VertexMasks171_g170143;
				float4 break33_g170156 = _object_phase_mode;
				float temp_output_30_0_g170156 = ( v.ase_color.r * break33_g170156.x );
				float temp_output_29_0_g170156 = ( v.ase_color.g * break33_g170156.y );
				float temp_output_31_0_g170156 = ( v.ase_color.b * break33_g170156.z );
				float temp_output_28_0_g170156 = ( temp_output_30_0_g170156 + temp_output_29_0_g170156 + temp_output_31_0_g170156 + ( v.ase_color.a * break33_g170156.w ) );
				float3 break243_g170143 = PivotWO133_g170143;
				float temp_output_315_0_g170143 = (frac( ( temp_output_28_0_g170156 + ( break243_g170143.x + break243_g170143.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g170143 = (float4(1.0 , 1.0 , temp_output_315_0_g170143 , 1.0));
				half4 MotionMasks176_g170143 = appendResult177_g170143;
				float4 In_MotionData16_g170158 = MotionMasks176_g170143;
				half Object_HeightValue267_g170143 = _ObjectHeightValue;
				half Object_RadiusValue268_g170143 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g170143 = saturate( ( (PositionOS131_g170143).y / Object_HeightValue267_g170143 ) );
				half Bounds_SphereMask282_g170143 = saturate( ( length( PositionOS131_g170143 ) / max( Object_HeightValue267_g170143 , Object_RadiusValue268_g170143 ) ) );
				float4 appendResult253_g170143 = (float4(Object_HeightValue267_g170143 , Object_RadiusValue268_g170143 , Bounds_HeightMask274_g170143 , Bounds_SphereMask282_g170143));
				half4 BoundsData254_g170143 = appendResult253_g170143;
				float4 In_BoundsData16_g170158 = BoundsData254_g170143;
				float4 In_RotationData16_g170158 = float4( 0,0,0,0 );
				Data16_g170158.Dummy = In_Dummy16_g170158;
				Data16_g170158.PositionOS = In_PositionOS16_g170158;
				Data16_g170158.PositionWS = In_PositionWS16_g170158;
				Data16_g170158.PositionWO = In_PositionWO16_g170158;
				Data16_g170158.PositionRawOS = In_PositionRawOS16_g170158;
				Data16_g170158.PositionAddOS = In_PositionAddOS16_g170158;
				Data16_g170158.PivotOS = In_PivotOS16_g170158;
				Data16_g170158.PivotWS = In_PivotWS16_g170158;
				Data16_g170158.PivotWO = In_PivotWO16_g170158;
				Data16_g170158.NormalOS = In_NormalOS16_g170158;
				Data16_g170158.NormalWS = In_NormalWS16_g170158;
				Data16_g170158.NormalRawOS = In_NormalRawOS16_g170158;
				Data16_g170158.NormalRawWS = In_NormalRawWS16_g170158;
				Data16_g170158.TangentOS = In_TangentOS16_g170158;
				Data16_g170158.ViewDirWS = In_ViewDirWS16_g170158;
				Data16_g170158.VertexData = In_VertexData16_g170158;
				Data16_g170158.MotionData = In_MotionData16_g170158;
				Data16_g170158.BoundsData = In_BoundsData16_g170158;
				Data16_g170158.RotationData = In_RotationData16_g170158;
				TVEModelData Data15_g170226 = Data16_g170158;
				float Out_Dummy15_g170226 = 0;
				float3 Out_PositionOS15_g170226 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170226 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170226 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170226 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170226 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170226 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170226 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170226 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170226 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170226 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170226 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170226 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170226 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170226 = float3( 0,0,0 );
				float4 Out_VertexData15_g170226 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170226 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170226 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170226 = float4( 0,0,0,0 );
				Out_Dummy15_g170226 = Data15_g170226.Dummy;
				Out_PositionOS15_g170226 = Data15_g170226.PositionOS;
				Out_PositionWS15_g170226 = Data15_g170226.PositionWS;
				Out_PositionWO15_g170226 = Data15_g170226.PositionWO;
				Out_PositionRawOS15_g170226 = Data15_g170226.PositionRawOS;
				Out_PositionAddOS15_g170226 = Data15_g170226.PositionAddOS;
				Out_PivotOS15_g170226 = Data15_g170226.PivotOS;
				Out_PivotWS15_g170226 = Data15_g170226.PivotWS;
				Out_PivotWO15_g170226 = Data15_g170226.PivotWO;
				Out_NormalOS15_g170226 = Data15_g170226.NormalOS;
				Out_NormalWS15_g170226 = Data15_g170226.NormalWS;
				Out_NormalRawOS15_g170226 = Data15_g170226.NormalRawOS;
				Out_NormalRawWS15_g170226 = Data15_g170226.NormalRawWS;
				Out_TangentOS15_g170226 = Data15_g170226.TangentOS;
				Out_ViewDirWS15_g170226 = Data15_g170226.ViewDirWS;
				Out_VertexData15_g170226 = Data15_g170226.VertexData;
				Out_MotionData15_g170226 = Data15_g170226.MotionData;
				Out_BoundsData15_g170226 = Data15_g170226.BoundsData;
				Out_RotationData15_g170226 = Data15_g170226.RotationData;
				float3 temp_output_218_24_g170224 = Out_PivotOS15_g170226;
				float3 In_PositionOS16_g170225 = ( Out_PositionOS15_g170226 - temp_output_218_24_g170224 );
				float3 In_PositionWS16_g170225 = Out_PositionWS15_g170226;
				float3 In_PositionWO16_g170225 = Out_PositionWO15_g170226;
				float3 In_PositionRawOS16_g170225 = Out_PositionRawOS15_g170226;
				float3 In_PositionAddOS16_g170225 = Out_PositionAddOS15_g170226;
				float3 In_PivotOS16_g170225 = temp_output_218_24_g170224;
				float3 In_PivotWS16_g170225 = Out_PivotWS15_g170226;
				float3 In_PivotWO16_g170225 = Out_PivotWO15_g170226;
				float3 In_NormalOS16_g170225 = Out_NormalOS15_g170226;
				float3 In_NormalWS16_g170225 = Out_NormalWS15_g170226;
				float3 In_NormalRawOS16_g170225 = Out_NormalRawOS15_g170226;
				float3 In_NormalRawWS16_g170225 = Out_NormalRawWS15_g170226;
				float4 In_TangentOS16_g170225 = Out_TangentOS15_g170226;
				float3 In_ViewDirWS16_g170225 = Out_ViewDirWS15_g170226;
				float4 In_VertexData16_g170225 = Out_VertexData15_g170226;
				float4 In_MotionData16_g170225 = Out_MotionData15_g170226;
				float4 In_BoundsData16_g170225 = Out_BoundsData15_g170226;
				float4 In_RotationData16_g170225 = Out_RotationData15_g170226;
				Data16_g170225.Dummy = In_Dummy16_g170225;
				Data16_g170225.PositionOS = In_PositionOS16_g170225;
				Data16_g170225.PositionWS = In_PositionWS16_g170225;
				Data16_g170225.PositionWO = In_PositionWO16_g170225;
				Data16_g170225.PositionRawOS = In_PositionRawOS16_g170225;
				Data16_g170225.PositionAddOS = In_PositionAddOS16_g170225;
				Data16_g170225.PivotOS = In_PivotOS16_g170225;
				Data16_g170225.PivotWS = In_PivotWS16_g170225;
				Data16_g170225.PivotWO = In_PivotWO16_g170225;
				Data16_g170225.NormalOS = In_NormalOS16_g170225;
				Data16_g170225.NormalWS = In_NormalWS16_g170225;
				Data16_g170225.NormalRawOS = In_NormalRawOS16_g170225;
				Data16_g170225.NormalRawWS = In_NormalRawWS16_g170225;
				Data16_g170225.TangentOS = In_TangentOS16_g170225;
				Data16_g170225.ViewDirWS = In_ViewDirWS16_g170225;
				Data16_g170225.VertexData = In_VertexData16_g170225;
				Data16_g170225.MotionData = In_MotionData16_g170225;
				Data16_g170225.BoundsData = In_BoundsData16_g170225;
				Data16_g170225.RotationData = In_RotationData16_g170225;
				TVEModelData Data15_g170278 = Data16_g170225;
				float Out_Dummy15_g170278 = 0;
				float3 Out_PositionOS15_g170278 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170278 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170278 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170278 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170278 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170278 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170278 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170278 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170278 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170278 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170278 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170278 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170278 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170278 = float3( 0,0,0 );
				float4 Out_VertexData15_g170278 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170278 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170278 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170278 = float4( 0,0,0,0 );
				Out_Dummy15_g170278 = Data15_g170278.Dummy;
				Out_PositionOS15_g170278 = Data15_g170278.PositionOS;
				Out_PositionWS15_g170278 = Data15_g170278.PositionWS;
				Out_PositionWO15_g170278 = Data15_g170278.PositionWO;
				Out_PositionRawOS15_g170278 = Data15_g170278.PositionRawOS;
				Out_PositionAddOS15_g170278 = Data15_g170278.PositionAddOS;
				Out_PivotOS15_g170278 = Data15_g170278.PivotOS;
				Out_PivotWS15_g170278 = Data15_g170278.PivotWS;
				Out_PivotWO15_g170278 = Data15_g170278.PivotWO;
				Out_NormalOS15_g170278 = Data15_g170278.NormalOS;
				Out_NormalWS15_g170278 = Data15_g170278.NormalWS;
				Out_NormalRawOS15_g170278 = Data15_g170278.NormalRawOS;
				Out_NormalRawWS15_g170278 = Data15_g170278.NormalRawWS;
				Out_TangentOS15_g170278 = Data15_g170278.TangentOS;
				Out_ViewDirWS15_g170278 = Data15_g170278.ViewDirWS;
				Out_VertexData15_g170278 = Data15_g170278.VertexData;
				Out_MotionData15_g170278 = Data15_g170278.MotionData;
				Out_BoundsData15_g170278 = Data15_g170278.BoundsData;
				Out_RotationData15_g170278 = Data15_g170278.RotationData;
				float3 temp_output_1567_0_g170277 = Out_PositionOS15_g170278;
				float3 In_PositionOS16_g170286 = temp_output_1567_0_g170277;
				float3 temp_output_1567_16_g170277 = Out_PositionWS15_g170278;
				float3 In_PositionWS16_g170286 = temp_output_1567_16_g170277;
				float3 temp_output_1567_17_g170277 = Out_PositionWO15_g170278;
				float3 In_PositionWO16_g170286 = temp_output_1567_17_g170277;
				float3 In_PositionRawOS16_g170286 = Out_PositionRawOS15_g170278;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g170277 = Out_VertexData15_g170278;
				half4 Model_VertexMasks518_g170277 = temp_output_1567_29_g170277;
				float4 break1689_g170277 = Model_VertexMasks518_g170277;
				float4 break33_g170283 = _motion_small_vert_mode;
				float temp_output_30_0_g170283 = ( break1689_g170277.x * break33_g170283.x );
				float temp_output_29_0_g170283 = ( break1689_g170277.y * break33_g170283.y );
				float temp_output_31_0_g170283 = ( break1689_g170277.z * break33_g170283.z );
				float temp_output_28_0_g170283 = ( temp_output_30_0_g170283 + temp_output_29_0_g170283 + temp_output_31_0_g170283 + ( break1689_g170277.w * break33_g170283.w ) );
				float temp_output_1727_0_g170277 = temp_output_28_0_g170283;
				float4 temp_output_1567_30_g170277 = Out_BoundsData15_g170278;
				half4 Model_BoundsData1322_g170277 = temp_output_1567_30_g170277;
				float4 break33_g170288 = _motion_small_proc_mode;
				float temp_output_30_0_g170288 = ( (Model_BoundsData1322_g170277).z * break33_g170288.x );
				float temp_output_29_0_g170288 = ( (Model_BoundsData1322_g170277).w * break33_g170288.y );
				float temp_output_1734_0_g170277 = ( temp_output_30_0_g170288 + temp_output_29_0_g170288 );
				float lerpResult1866_g170277 = lerp( temp_output_1727_0_g170277 , temp_output_1734_0_g170277 , _motion_small_mask_mode);
				float enc1805_g170277 = v.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170277 = DecodeFloatToVector2( enc1805_g170277 );
				float2 break1804_g170277 = localDecodeFloatToVector21805_g170277;
				half Small_Mask_Legacy1806_g170277 = break1804_g170277.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170277 = Small_Mask_Legacy1806_g170277;
				#else
				float staticSwitch1800_g170277 = lerpResult1866_g170277;
				#endif
				float clampResult17_g170290 = clamp( staticSwitch1800_g170277 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170291 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170291 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170291 );
				float temp_output_6_0_g170292 = saturate( ( ( clampResult17_g170290 - temp_output_7_0_g170291 ) / ( temp_output_10_0_g170291 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170292 = ( temp_output_6_0_g170292 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170292 = temp_output_6_0_g170292;
				#endif
				half Small_Mask640_g170277 = staticSwitch14_g170292;
				half3 Model_PositionOS147_g170277 = temp_output_1567_0_g170277;
				float3 normalizeResult1832_g170277 = normalize( Model_PositionOS147_g170277 );
				half3 Model_PositionWO162_g170277 = temp_output_1567_17_g170277;
				float3 temp_output_1567_19_g170277 = Out_PivotWO15_g170278;
				half3 Model_PivotWO402_g170277 = temp_output_1567_19_g170277;
				float3 lerpResult829_g170277 = lerp( Model_PositionWO162_g170277 , Model_PivotWO402_g170277 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170277 = Out_MotionData15_g170278;
				half4 Model_MotionMasks489_g170277 = temp_output_1567_27_g170277;
				half3 Base_Position1394_g170277 = ( lerpResult829_g170277 + ( (Model_MotionMasks489_g170277).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170304 = Base_Position1394_g170277;
				half Flow_Tillling1397_g170277 = _MotionTillingValue;
				half Input_MotionTilling321_g170304 = ( Flow_Tillling1397_g170277 + 0.2 );
				half2 Noise_Coord515_g170304 = ( -(Input_PositionWO419_g170304).xz * Input_MotionTilling321_g170304 * 0.005 );
				half4 Noise_Params535_g170304 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170304, 0.0 );
				float2 temp_output_648_0_g170304 = (Noise_Params535_g170304).rg;
				half Flow_Value1858_g170277 = _MotionIntensityValue;
				half Input_MotionValue629_g170304 = Flow_Value1858_g170277;
				float2 lerpResult645_g170304 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170304 , Input_MotionValue629_g170304);
				float3 appendResult566_g170304 = (float3(lerpResult645_g170304 , (Noise_Params535_g170304).b));
				float temp_output_136_0_g170305 = _global_wind_layer_value;
				float temp_output_19_0_g170307 = TVE_WindLayers[(int)temp_output_136_0_g170305];
				half3 Input_Position180_g170308 = Input_PositionWO419_g170304;
				float2 temp_output_75_0_g170308 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170308).xz ) );
				float temp_output_82_0_g170308 = temp_output_136_0_g170305;
				float2 temp_output_119_0_g170308 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170308).xz ) );
				float temp_output_7_0_g170313 = 1.0;
				float temp_output_10_0_g170313 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170313 );
				float4 lerpResult131_g170308 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170308,temp_output_82_0_g170308), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170308,temp_output_82_0_g170308), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170308 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170313 ) / temp_output_10_0_g170313 ) ));
				float4 temp_output_17_0_g170307 = lerpResult131_g170308;
				float4 temp_output_3_0_g170307 = TVE_WindParams;
				float4 ifLocalVar18_g170307 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170307 >= 0.5 )
				ifLocalVar18_g170307 = temp_output_17_0_g170307;
				else
				ifLocalVar18_g170307 = temp_output_3_0_g170307;
				float4 lerpResult22_g170307 = lerp( temp_output_3_0_g170307 , temp_output_17_0_g170307 , temp_output_19_0_g170307);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170307 = lerpResult22_g170307;
				#else
				float4 staticSwitch24_g170307 = ifLocalVar18_g170307;
				#endif
				float4 temp_output_610_0_g170304 = staticSwitch24_g170307;
				float3 appendResult643_g170304 = (float3((temp_output_610_0_g170304).rg , (temp_output_610_0_g170304).b));
				float3 lerpResult623_g170304 = lerp( appendResult566_g170304 , appendResult643_g170304 , (temp_output_610_0_g170304).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170304 = lerpResult623_g170304;
				#else
				float3 staticSwitch612_g170304 = appendResult566_g170304;
				#endif
				float3 temp_output_1947_567_g170277 = staticSwitch612_g170304;
				float2 break83_g170301 = ((temp_output_1947_567_g170277).xy*2.0 + -1.0);
				float3 appendResult79_g170301 = (float3(break83_g170301.x , 0.0 , break83_g170301.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( unity_WorldToObject[ 0 ].xyz ), length( unity_WorldToObject[ 1 ].xyz ), length( unity_WorldToObject[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170277 = (( mul( unity_WorldToObject, float4( appendResult79_g170301 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170277 = lerp( Model_PositionWO162_g170277 , Model_PivotWO402_g170277 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170277 = ( lerpResult1411_g170277 + ( (Model_MotionMasks489_g170277).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170319 = Small_Position1421_g170277;
				half Input_MotionTilling321_g170319 = ( Flow_Tillling1397_g170277 + 0.2 );
				half2 Noise_Coord515_g170319 = ( -(Input_PositionWO419_g170319).xz * Input_MotionTilling321_g170319 * 0.005 );
				half4 Noise_Params535_g170319 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170319, 0.0 );
				float2 temp_output_648_0_g170319 = (Noise_Params535_g170319).rg;
				half Input_MotionValue629_g170319 = Flow_Value1858_g170277;
				float2 lerpResult645_g170319 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170319 , Input_MotionValue629_g170319);
				float3 appendResult566_g170319 = (float3(lerpResult645_g170319 , (Noise_Params535_g170319).b));
				float temp_output_136_0_g170320 = _global_wind_layer_value;
				float temp_output_19_0_g170322 = TVE_WindLayers[(int)temp_output_136_0_g170320];
				half3 Input_Position180_g170323 = Input_PositionWO419_g170319;
				float2 temp_output_75_0_g170323 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170323).xz ) );
				float temp_output_82_0_g170323 = temp_output_136_0_g170320;
				float2 temp_output_119_0_g170323 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170323).xz ) );
				float temp_output_7_0_g170328 = 1.0;
				float temp_output_10_0_g170328 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170328 );
				float4 lerpResult131_g170323 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, float3(temp_output_75_0_g170323,temp_output_82_0_g170323), 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, float3(temp_output_119_0_g170323,temp_output_82_0_g170323), 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170323 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170328 ) / temp_output_10_0_g170328 ) ));
				float4 temp_output_17_0_g170322 = lerpResult131_g170323;
				float4 temp_output_3_0_g170322 = TVE_WindParams;
				float4 ifLocalVar18_g170322 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170322 >= 0.5 )
				ifLocalVar18_g170322 = temp_output_17_0_g170322;
				else
				ifLocalVar18_g170322 = temp_output_3_0_g170322;
				float4 lerpResult22_g170322 = lerp( temp_output_3_0_g170322 , temp_output_17_0_g170322 , temp_output_19_0_g170322);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170322 = lerpResult22_g170322;
				#else
				float4 staticSwitch24_g170322 = ifLocalVar18_g170322;
				#endif
				float4 temp_output_610_0_g170319 = staticSwitch24_g170322;
				float3 appendResult643_g170319 = (float3((temp_output_610_0_g170319).rg , (temp_output_610_0_g170319).b));
				float3 lerpResult623_g170319 = lerp( appendResult566_g170319 , appendResult643_g170319 , (temp_output_610_0_g170319).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170319 = lerpResult623_g170319;
				#else
				float3 staticSwitch612_g170319 = appendResult566_g170319;
				#endif
				float3 temp_output_1946_567_g170277 = staticSwitch612_g170319;
				float2 break83_g170302 = ((temp_output_1946_567_g170277).xy*2.0 + -1.0);
				float3 appendResult79_g170302 = (float3(break83_g170302.x , 0.0 , break83_g170302.y));
				half2 Small_Direction1489_g170277 = (( mul( unity_WorldToObject, float4( appendResult79_g170302 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170277 = Small_Direction1489_g170277;
				#else
				float2 staticSwitch1485_g170277 = Base_Direction893_g170277;
				#endif
				half2 Wave_Direction1486_g170277 = staticSwitch1485_g170277;
				float2 break1828_g170277 = -Wave_Direction1486_g170277;
				float3 appendResult1830_g170277 = (float3(break1828_g170277.x , 0.0 , break1828_g170277.y));
				float dotResult1831_g170277 = dot( normalizeResult1832_g170277 , appendResult1830_g170277 );
				float lerpResult1826_g170277 = lerp( 1.0 , (dotResult1831_g170277*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170277 = lerpResult1826_g170277;
				float2 break1922_g170277 = Small_Direction1489_g170277;
				half Small_Intensity1881_g170277 = length( Small_Direction1489_g170277 );
				float3 appendResult1920_g170277 = (float3(break1922_g170277.x , Small_Intensity1881_g170277 , break1922_g170277.y));
				half Small_Noise1427_g170277 = (temp_output_1946_567_g170277).z;
				float3 appendResult1921_g170277 = (float3(Small_Noise1427_g170277 , (Small_Noise1427_g170277*0.8 + -0.4) , Small_Noise1427_g170277));
				half3 Small_Motion789_g170277 = ( _MotionSmallIntensityValue * Small_Mask640_g170277 * Motion_FrontMask1142_g170277 * appendResult1920_g170277 * appendResult1921_g170277 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170277 = Small_Motion789_g170277;
				#else
				float3 staticSwitch495_g170277 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g170277 = Model_VertexMasks518_g170277;
				float4 break33_g170284 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170284 = ( break1710_g170277.x * break33_g170284.x );
				float temp_output_29_0_g170284 = ( break1710_g170277.y * break33_g170284.y );
				float temp_output_31_0_g170284 = ( break1710_g170277.z * break33_g170284.z );
				float temp_output_28_0_g170284 = ( temp_output_30_0_g170284 + temp_output_29_0_g170284 + temp_output_31_0_g170284 + ( break1710_g170277.w * break33_g170284.w ) );
				float temp_output_1729_0_g170277 = temp_output_28_0_g170284;
				float4 break33_g170289 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170289 = ( (Model_BoundsData1322_g170277).z * break33_g170289.x );
				float temp_output_29_0_g170289 = ( (Model_BoundsData1322_g170277).w * break33_g170289.y );
				float temp_output_1735_0_g170277 = ( temp_output_30_0_g170289 + temp_output_29_0_g170289 );
				float lerpResult1867_g170277 = lerp( temp_output_1729_0_g170277 , temp_output_1735_0_g170277 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170277 = break1804_g170277.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170277 = Tiny_Mask_Legacy1807_g170277;
				#else
				float staticSwitch1810_g170277 = lerpResult1867_g170277;
				#endif
				float clampResult17_g170293 = clamp( staticSwitch1810_g170277 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170294 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170294 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170294 );
				float temp_output_6_0_g170295 = saturate( ( ( clampResult17_g170293 - temp_output_7_0_g170294 ) / ( temp_output_10_0_g170294 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170295 = ( temp_output_6_0_g170295 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170295 = temp_output_6_0_g170295;
				#endif
				half Tiny_Mask218_g170277 = staticSwitch14_g170295;
				half3 Input_Position500_g170296 = Model_PositionWO162_g170277;
				float2 temp_output_498_0_g170296 = (Input_Position500_g170296).xz;
				float4 tex2DNode460_g170296 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, temp_output_498_0_g170296, 0.0 );
				float3 appendResult462_g170296 = (float3(tex2DNode460_g170296.a , tex2DNode460_g170296.a , tex2DNode460_g170296.a));
				half3 Flutter_Texture489_g170296 = (appendResult462_g170296*2.0 + -1.0);
				half3 Tiny_Direction859_g170277 = Flutter_Texture489_g170296;
				half3 Model_PositionWS1819_g170277 = temp_output_1567_16_g170277;
				half Motion_FadeMask1820_g170277 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170277 ) / _MotionDistValue ) ) );
				half Base_Intensity1878_g170277 = length( Base_Direction893_g170277 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1899_g170277 = Small_Intensity1881_g170277;
				#else
				float staticSwitch1899_g170277 = Base_Intensity1878_g170277;
				#endif
				half Wave_Intensity1900_g170277 = staticSwitch1899_g170277;
				half Base_Noise1159_g170277 = (temp_output_1947_567_g170277).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170277 = Small_Noise1427_g170277;
				#else
				float staticSwitch1453_g170277 = Base_Noise1159_g170277;
				#endif
				half Wave_Noise1475_g170277 = staticSwitch1453_g170277;
				half3 Tiny_Motion1451_g170277 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170277 * Tiny_Direction859_g170277 * Motion_FrontMask1142_g170277 * Motion_FadeMask1820_g170277 * Wave_Intensity1900_g170277 * Wave_Noise1475_g170277 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170277 = Tiny_Motion1451_g170277;
				#else
				float3 staticSwitch414_g170277 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g170277 = ( staticSwitch495_g170277 + staticSwitch414_g170277 );
				float3 In_PositionAddOS16_g170286 = Final_PositionADD1569_g170277;
				float3 temp_output_1567_24_g170277 = Out_PivotOS15_g170278;
				float3 In_PivotOS16_g170286 = temp_output_1567_24_g170277;
				float3 In_PivotWS16_g170286 = Out_PivotWS15_g170278;
				float3 In_PivotWO16_g170286 = temp_output_1567_19_g170277;
				float3 temp_output_1567_20_g170277 = Out_NormalOS15_g170278;
				float3 In_NormalOS16_g170286 = temp_output_1567_20_g170277;
				float3 In_NormalWS16_g170286 = Out_NormalWS15_g170278;
				float3 In_NormalRawOS16_g170286 = Out_NormalRawOS15_g170278;
				float3 In_NormalRawWS16_g170286 = Out_NormalRawWS15_g170278;
				float4 In_TangentOS16_g170286 = Out_TangentOS15_g170278;
				float3 In_ViewDirWS16_g170286 = Out_ViewDirWS15_g170278;
				float4 In_VertexData16_g170286 = temp_output_1567_29_g170277;
				float4 In_MotionData16_g170286 = temp_output_1567_27_g170277;
				float4 In_BoundsData16_g170286 = temp_output_1567_30_g170277;
				float2 temp_cast_17 = (0.0).xx;
				float4 break748_g170277 = Model_VertexMasks518_g170277;
				float4 break33_g170285 = _motion_base_vert_mode;
				float temp_output_30_0_g170285 = ( break748_g170277.x * break33_g170285.x );
				float temp_output_29_0_g170285 = ( break748_g170277.y * break33_g170285.y );
				float temp_output_31_0_g170285 = ( break748_g170277.z * break33_g170285.z );
				float temp_output_28_0_g170285 = ( temp_output_30_0_g170285 + temp_output_29_0_g170285 + temp_output_31_0_g170285 + ( break748_g170277.w * break33_g170285.w ) );
				float temp_output_1731_0_g170277 = temp_output_28_0_g170285;
				float4 break33_g170287 = _motion_base_proc_mode;
				float temp_output_30_0_g170287 = ( (Model_BoundsData1322_g170277).z * break33_g170287.x );
				float temp_output_29_0_g170287 = ( (Model_BoundsData1322_g170277).w * break33_g170287.y );
				float temp_output_1733_0_g170277 = ( temp_output_30_0_g170287 + temp_output_29_0_g170287 );
				float lerpResult1863_g170277 = lerp( temp_output_1731_0_g170277 , temp_output_1733_0_g170277 , _motion_base_mask_mode);
				float clampResult17_g170280 = clamp( lerpResult1863_g170277 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170281 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170281 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170281 );
				float temp_output_6_0_g170282 = saturate( ( ( clampResult17_g170280 - temp_output_7_0_g170281 ) / ( temp_output_10_0_g170281 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170282 = ( temp_output_6_0_g170282 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170282 = temp_output_6_0_g170282;
				#endif
				half Base_Mask217_g170277 = staticSwitch14_g170282;
				half Flow_Delay1939_g170277 = _MotionDelayValue;
				float lerpResult1908_g170277 = lerp( 1.0 , ( Base_Intensity1878_g170277 * Base_Intensity1878_g170277 ) , Flow_Delay1939_g170277);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170277 = ( _MotionBaseIntensityValue * Base_Mask217_g170277 * Base_Noise1159_g170277 * Base_Direction893_g170277 * lerpResult1908_g170277 );
				#else
				float2 staticSwitch1573_g170277 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g170277 = staticSwitch1573_g170277;
				half2 Final_VertexBend1570_g170277 = Base_Motion1440_g170277;
				float4 In_RotationData16_g170286 = float4( Final_VertexBend1570_g170277, 0.0 , 0.0 );
				Data16_g170286.Dummy = In_Dummy16_g170286;
				Data16_g170286.PositionOS = In_PositionOS16_g170286;
				Data16_g170286.PositionWS = In_PositionWS16_g170286;
				Data16_g170286.PositionWO = In_PositionWO16_g170286;
				Data16_g170286.PositionRawOS = In_PositionRawOS16_g170286;
				Data16_g170286.PositionAddOS = In_PositionAddOS16_g170286;
				Data16_g170286.PivotOS = In_PivotOS16_g170286;
				Data16_g170286.PivotWS = In_PivotWS16_g170286;
				Data16_g170286.PivotWO = In_PivotWO16_g170286;
				Data16_g170286.NormalOS = In_NormalOS16_g170286;
				Data16_g170286.NormalWS = In_NormalWS16_g170286;
				Data16_g170286.NormalRawOS = In_NormalRawOS16_g170286;
				Data16_g170286.NormalRawWS = In_NormalRawWS16_g170286;
				Data16_g170286.TangentOS = In_TangentOS16_g170286;
				Data16_g170286.ViewDirWS = In_ViewDirWS16_g170286;
				Data16_g170286.VertexData = In_VertexData16_g170286;
				Data16_g170286.MotionData = In_MotionData16_g170286;
				Data16_g170286.BoundsData = In_BoundsData16_g170286;
				Data16_g170286.RotationData = In_RotationData16_g170286;
				TVEModelData Data15_g170474 = Data16_g170286;
				float Out_Dummy15_g170474 = 0;
				float3 Out_PositionOS15_g170474 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170474 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170474 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170474 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170474 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170474 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170474 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170474 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170474 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170474 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170474 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170474 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170474 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170474 = float3( 0,0,0 );
				float4 Out_VertexData15_g170474 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170474 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170474 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170474 = float4( 0,0,0,0 );
				Out_Dummy15_g170474 = Data15_g170474.Dummy;
				Out_PositionOS15_g170474 = Data15_g170474.PositionOS;
				Out_PositionWS15_g170474 = Data15_g170474.PositionWS;
				Out_PositionWO15_g170474 = Data15_g170474.PositionWO;
				Out_PositionRawOS15_g170474 = Data15_g170474.PositionRawOS;
				Out_PositionAddOS15_g170474 = Data15_g170474.PositionAddOS;
				Out_PivotOS15_g170474 = Data15_g170474.PivotOS;
				Out_PivotWS15_g170474 = Data15_g170474.PivotWS;
				Out_PivotWO15_g170474 = Data15_g170474.PivotWO;
				Out_NormalOS15_g170474 = Data15_g170474.NormalOS;
				Out_NormalWS15_g170474 = Data15_g170474.NormalWS;
				Out_NormalRawOS15_g170474 = Data15_g170474.NormalRawOS;
				Out_NormalRawWS15_g170474 = Data15_g170474.NormalRawWS;
				Out_TangentOS15_g170474 = Data15_g170474.TangentOS;
				Out_ViewDirWS15_g170474 = Data15_g170474.ViewDirWS;
				Out_VertexData15_g170474 = Data15_g170474.VertexData;
				Out_MotionData15_g170474 = Data15_g170474.MotionData;
				Out_BoundsData15_g170474 = Data15_g170474.BoundsData;
				Out_RotationData15_g170474 = Data15_g170474.RotationData;
				half3 Model_PositionOS147_g170473 = Out_PositionOS15_g170474;
				half3 Input_False58_g170479 = Model_PositionOS147_g170473;
				half3 VertexPos40_g170476 = Model_PositionOS147_g170473;
				half3 VertexPos40_g170477 = VertexPos40_g170476;
				float3 appendResult74_g170477 = (float3(VertexPos40_g170477.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170477 = appendResult74_g170477;
				float3 break84_g170477 = VertexPos40_g170477;
				float3 appendResult81_g170477 = (float3(0.0 , break84_g170477.y , break84_g170477.z));
				half3 VertexPosOtherAxis82_g170477 = appendResult81_g170477;
				float4 temp_output_1567_33_g170473 = Out_RotationData15_g170474;
				half4 Model_VertexBend1569_g170473 = temp_output_1567_33_g170473;
				half2 Angle44_g170476 = (Model_VertexBend1569_g170473).xy;
				half Angle44_g170477 = (Angle44_g170476).y;
				half3 VertexPos40_g170478 = ( VertexPosRotationAxis50_g170477 + ( VertexPosOtherAxis82_g170477 * cos( Angle44_g170477 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170477 ) * sin( Angle44_g170477 ) ) );
				float3 appendResult74_g170478 = (float3(0.0 , 0.0 , VertexPos40_g170478.z));
				half3 VertexPosRotationAxis50_g170478 = appendResult74_g170478;
				float3 break84_g170478 = VertexPos40_g170478;
				float3 appendResult81_g170478 = (float3(break84_g170478.x , break84_g170478.y , 0.0));
				half3 VertexPosOtherAxis82_g170478 = appendResult81_g170478;
				half Angle44_g170478 = -(Angle44_g170476).x;
				half3 Input_True57_g170479 = ( VertexPosRotationAxis50_g170478 + ( VertexPosOtherAxis82_g170478 * cos( Angle44_g170478 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170478 ) * sin( Angle44_g170478 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170479 = Input_True57_g170479;
				#else
				float3 staticSwitch65_g170479 = Input_False58_g170479;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170479 = Input_True57_g170479;
				#else
				float3 staticSwitch67_g170479 = staticSwitch65_g170479;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170479 = Input_True57_g170479;
				#else
				float3 staticSwitch69_g170479 = staticSwitch67_g170479;
				#endif
				float3 temp_output_1578_0_g170473 = staticSwitch69_g170479;
				float3 temp_output_1567_31_g170473 = Out_PositionAddOS15_g170474;
				half3 Model_PositionADD1568_g170473 = temp_output_1567_31_g170473;
				half3 Final_PositionOS178_g170473 = ( temp_output_1578_0_g170473 + Model_PositionADD1568_g170473 );
				float3 In_PositionOS16_g170475 = Final_PositionOS178_g170473;
				float3 In_PositionWS16_g170475 = Out_PositionWS15_g170474;
				float3 In_PositionWO16_g170475 = Out_PositionWO15_g170474;
				float3 In_PositionRawOS16_g170475 = Out_PositionRawOS15_g170474;
				float3 In_PositionAddOS16_g170475 = temp_output_1567_31_g170473;
				float3 In_PivotOS16_g170475 = Out_PivotOS15_g170474;
				float3 In_PivotWS16_g170475 = Out_PivotWS15_g170474;
				float3 In_PivotWO16_g170475 = Out_PivotWO15_g170474;
				float3 In_NormalOS16_g170475 = Out_NormalOS15_g170474;
				float3 In_NormalWS16_g170475 = Out_NormalWS15_g170474;
				float3 In_NormalRawOS16_g170475 = Out_NormalRawOS15_g170474;
				float3 In_NormalRawWS16_g170475 = Out_NormalRawWS15_g170474;
				float4 In_TangentOS16_g170475 = Out_TangentOS15_g170474;
				float3 In_ViewDirWS16_g170475 = Out_ViewDirWS15_g170474;
				float4 In_VertexData16_g170475 = Out_VertexData15_g170474;
				float4 In_MotionData16_g170475 = Out_MotionData15_g170474;
				float4 In_BoundsData16_g170475 = Out_BoundsData15_g170474;
				float4 In_RotationData16_g170475 = temp_output_1567_33_g170473;
				Data16_g170475.Dummy = In_Dummy16_g170475;
				Data16_g170475.PositionOS = In_PositionOS16_g170475;
				Data16_g170475.PositionWS = In_PositionWS16_g170475;
				Data16_g170475.PositionWO = In_PositionWO16_g170475;
				Data16_g170475.PositionRawOS = In_PositionRawOS16_g170475;
				Data16_g170475.PositionAddOS = In_PositionAddOS16_g170475;
				Data16_g170475.PivotOS = In_PivotOS16_g170475;
				Data16_g170475.PivotWS = In_PivotWS16_g170475;
				Data16_g170475.PivotWO = In_PivotWO16_g170475;
				Data16_g170475.NormalOS = In_NormalOS16_g170475;
				Data16_g170475.NormalWS = In_NormalWS16_g170475;
				Data16_g170475.NormalRawOS = In_NormalRawOS16_g170475;
				Data16_g170475.NormalRawWS = In_NormalRawWS16_g170475;
				Data16_g170475.TangentOS = In_TangentOS16_g170475;
				Data16_g170475.ViewDirWS = In_ViewDirWS16_g170475;
				Data16_g170475.VertexData = In_VertexData16_g170475;
				Data16_g170475.MotionData = In_MotionData16_g170475;
				Data16_g170475.BoundsData = In_BoundsData16_g170475;
				Data16_g170475.RotationData = In_RotationData16_g170475;
				TVEModelData Data15_g170497 = Data16_g170475;
				float Out_Dummy15_g170497 = 0;
				float3 Out_PositionOS15_g170497 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170497 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170497 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170497 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170497 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170497 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170497 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170497 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170497 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170497 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170497 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170497 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170497 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170497 = float3( 0,0,0 );
				float4 Out_VertexData15_g170497 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170497 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170497 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170497 = float4( 0,0,0,0 );
				Out_Dummy15_g170497 = Data15_g170497.Dummy;
				Out_PositionOS15_g170497 = Data15_g170497.PositionOS;
				Out_PositionWS15_g170497 = Data15_g170497.PositionWS;
				Out_PositionWO15_g170497 = Data15_g170497.PositionWO;
				Out_PositionRawOS15_g170497 = Data15_g170497.PositionRawOS;
				Out_PositionAddOS15_g170497 = Data15_g170497.PositionAddOS;
				Out_PivotOS15_g170497 = Data15_g170497.PivotOS;
				Out_PivotWS15_g170497 = Data15_g170497.PivotWS;
				Out_PivotWO15_g170497 = Data15_g170497.PivotWO;
				Out_NormalOS15_g170497 = Data15_g170497.NormalOS;
				Out_NormalWS15_g170497 = Data15_g170497.NormalWS;
				Out_NormalRawOS15_g170497 = Data15_g170497.NormalRawOS;
				Out_NormalRawWS15_g170497 = Data15_g170497.NormalRawWS;
				Out_TangentOS15_g170497 = Data15_g170497.TangentOS;
				Out_ViewDirWS15_g170497 = Data15_g170497.ViewDirWS;
				Out_VertexData15_g170497 = Data15_g170497.VertexData;
				Out_MotionData15_g170497 = Data15_g170497.MotionData;
				Out_BoundsData15_g170497 = Data15_g170497.BoundsData;
				Out_RotationData15_g170497 = Data15_g170497.RotationData;
				float3 In_PositionOS16_g170498 = Out_PositionOS15_g170497;
				float3 In_PositionWS16_g170498 = Out_PositionWS15_g170497;
				float3 In_PositionWO16_g170498 = Out_PositionWO15_g170497;
				float3 temp_output_1567_26_g170496 = Out_PositionRawOS15_g170497;
				float3 In_PositionRawOS16_g170498 = temp_output_1567_26_g170496;
				float3 In_PositionAddOS16_g170498 = Out_PositionAddOS15_g170497;
				float3 In_PivotOS16_g170498 = Out_PivotOS15_g170497;
				float3 In_PivotWS16_g170498 = Out_PivotWS15_g170497;
				float3 In_PivotWO16_g170498 = Out_PivotWO15_g170497;
				half3 Model_NormalOS1568_g170496 = Out_NormalOS15_g170497;
				float3 lerpResult1617_g170496 = lerp( Model_NormalOS1568_g170496 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170496 = temp_output_1567_26_g170496;
				float3 normalizeResult1641_g170496 = ASESafeNormalize( ( Model_PositionRAW1592_g170496 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170496 = lerp( lerpResult1617_g170496 , normalizeResult1641_g170496 , _NormalSphereValue);
				float4 temp_output_1567_30_g170496 = Out_BoundsData15_g170497;
				half4 Model_VertexData1608_g170496 = temp_output_1567_30_g170496;
				float4 break1673_g170496 = Model_VertexData1608_g170496;
				float4 break33_g170499 = _normal_vert_mode;
				float temp_output_30_0_g170499 = ( break1673_g170496.x * break33_g170499.x );
				float temp_output_29_0_g170499 = ( break1673_g170496.y * break33_g170499.y );
				float temp_output_31_0_g170499 = ( break1673_g170496.z * break33_g170499.z );
				float temp_output_28_0_g170499 = ( temp_output_30_0_g170499 + temp_output_29_0_g170499 + temp_output_31_0_g170499 + ( break1673_g170496.w * break33_g170499.w ) );
				float clampResult17_g170501 = clamp( temp_output_28_0_g170499 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170500 = _NormalMeshRemap.x;
				float temp_output_10_0_g170500 = ( _NormalMeshRemap.y - temp_output_7_0_g170500 );
				float lerpResult1682_g170496 = lerp( 1.0 , saturate( ( ( clampResult17_g170501 - temp_output_7_0_g170500 ) / ( temp_output_10_0_g170500 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170502 = lerpResult1682_g170496;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170502 = ( temp_output_6_0_g170502 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170502 = temp_output_6_0_g170502;
				#endif
				float temp_output_1679_0_g170496 = staticSwitch14_g170502;
				half Normal_MeskMask1684_g170496 = temp_output_1679_0_g170496;
				float3 lerpResult1667_g170496 = lerp( Model_NormalOS1568_g170496 , lerpResult1616_g170496 , Normal_MeskMask1684_g170496);
				half3 Final_NormalOS1666_g170496 = lerpResult1667_g170496;
				float3 In_NormalOS16_g170498 = Final_NormalOS1666_g170496;
				float3 temp_output_1567_21_g170496 = Out_NormalWS15_g170497;
				float3 In_NormalWS16_g170498 = temp_output_1567_21_g170496;
				float3 In_NormalRawOS16_g170498 = Out_NormalRawOS15_g170497;
				float3 In_NormalRawWS16_g170498 = Out_NormalRawWS15_g170497;
				float4 In_TangentOS16_g170498 = Out_TangentOS15_g170497;
				float3 In_ViewDirWS16_g170498 = Out_ViewDirWS15_g170497;
				float4 In_VertexData16_g170498 = Out_VertexData15_g170497;
				float4 In_MotionData16_g170498 = Out_MotionData15_g170497;
				float4 In_BoundsData16_g170498 = temp_output_1567_30_g170496;
				float4 In_RotationData16_g170498 = Out_RotationData15_g170497;
				Data16_g170498.Dummy = In_Dummy16_g170498;
				Data16_g170498.PositionOS = In_PositionOS16_g170498;
				Data16_g170498.PositionWS = In_PositionWS16_g170498;
				Data16_g170498.PositionWO = In_PositionWO16_g170498;
				Data16_g170498.PositionRawOS = In_PositionRawOS16_g170498;
				Data16_g170498.PositionAddOS = In_PositionAddOS16_g170498;
				Data16_g170498.PivotOS = In_PivotOS16_g170498;
				Data16_g170498.PivotWS = In_PivotWS16_g170498;
				Data16_g170498.PivotWO = In_PivotWO16_g170498;
				Data16_g170498.NormalOS = In_NormalOS16_g170498;
				Data16_g170498.NormalWS = In_NormalWS16_g170498;
				Data16_g170498.NormalRawOS = In_NormalRawOS16_g170498;
				Data16_g170498.NormalRawWS = In_NormalRawWS16_g170498;
				Data16_g170498.TangentOS = In_TangentOS16_g170498;
				Data16_g170498.ViewDirWS = In_ViewDirWS16_g170498;
				Data16_g170498.VertexData = In_VertexData16_g170498;
				Data16_g170498.MotionData = In_MotionData16_g170498;
				Data16_g170498.BoundsData = In_BoundsData16_g170498;
				Data16_g170498.RotationData = In_RotationData16_g170498;
				TVEModelData Data15_g170514 = Data16_g170498;
				float Out_Dummy15_g170514 = 0;
				float3 Out_PositionOS15_g170514 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170514 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170514 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170514 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170514 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170514 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170514 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170514 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170514 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170514 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170514 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170514 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170514 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170514 = float3( 0,0,0 );
				float4 Out_VertexData15_g170514 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170514 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170514 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170514 = float4( 0,0,0,0 );
				Out_Dummy15_g170514 = Data15_g170514.Dummy;
				Out_PositionOS15_g170514 = Data15_g170514.PositionOS;
				Out_PositionWS15_g170514 = Data15_g170514.PositionWS;
				Out_PositionWO15_g170514 = Data15_g170514.PositionWO;
				Out_PositionRawOS15_g170514 = Data15_g170514.PositionRawOS;
				Out_PositionAddOS15_g170514 = Data15_g170514.PositionAddOS;
				Out_PivotOS15_g170514 = Data15_g170514.PivotOS;
				Out_PivotWS15_g170514 = Data15_g170514.PivotWS;
				Out_PivotWO15_g170514 = Data15_g170514.PivotWO;
				Out_NormalOS15_g170514 = Data15_g170514.NormalOS;
				Out_NormalWS15_g170514 = Data15_g170514.NormalWS;
				Out_NormalRawOS15_g170514 = Data15_g170514.NormalRawOS;
				Out_NormalRawWS15_g170514 = Data15_g170514.NormalRawWS;
				Out_TangentOS15_g170514 = Data15_g170514.TangentOS;
				Out_ViewDirWS15_g170514 = Data15_g170514.ViewDirWS;
				Out_VertexData15_g170514 = Data15_g170514.VertexData;
				Out_MotionData15_g170514 = Data15_g170514.MotionData;
				Out_BoundsData15_g170514 = Data15_g170514.BoundsData;
				Out_RotationData15_g170514 = Data15_g170514.RotationData;
				float3 temp_output_217_24_g170513 = Out_PivotOS15_g170514;
				float3 In_PositionOS16_g170515 = ( Out_PositionOS15_g170514 + temp_output_217_24_g170513 );
				float3 In_PositionWS16_g170515 = Out_PositionWS15_g170514;
				float3 In_PositionWO16_g170515 = Out_PositionWO15_g170514;
				float3 In_PositionRawOS16_g170515 = Out_PositionRawOS15_g170514;
				float3 In_PositionAddOS16_g170515 = Out_PositionAddOS15_g170514;
				float3 In_PivotOS16_g170515 = temp_output_217_24_g170513;
				float3 In_PivotWS16_g170515 = Out_PivotWS15_g170514;
				float3 In_PivotWO16_g170515 = Out_PivotWO15_g170514;
				float3 In_NormalOS16_g170515 = Out_NormalOS15_g170514;
				float3 In_NormalWS16_g170515 = Out_NormalWS15_g170514;
				float3 In_NormalRawOS16_g170515 = Out_NormalRawOS15_g170514;
				float3 In_NormalRawWS16_g170515 = Out_NormalRawWS15_g170514;
				float4 In_TangentOS16_g170515 = Out_TangentOS15_g170514;
				float3 In_ViewDirWS16_g170515 = Out_ViewDirWS15_g170514;
				float4 In_VertexData16_g170515 = Out_VertexData15_g170514;
				float4 In_MotionData16_g170515 = Out_MotionData15_g170514;
				float4 In_BoundsData16_g170515 = Out_BoundsData15_g170514;
				float4 In_RotationData16_g170515 = Out_RotationData15_g170514;
				Data16_g170515.Dummy = In_Dummy16_g170515;
				Data16_g170515.PositionOS = In_PositionOS16_g170515;
				Data16_g170515.PositionWS = In_PositionWS16_g170515;
				Data16_g170515.PositionWO = In_PositionWO16_g170515;
				Data16_g170515.PositionRawOS = In_PositionRawOS16_g170515;
				Data16_g170515.PositionAddOS = In_PositionAddOS16_g170515;
				Data16_g170515.PivotOS = In_PivotOS16_g170515;
				Data16_g170515.PivotWS = In_PivotWS16_g170515;
				Data16_g170515.PivotWO = In_PivotWO16_g170515;
				Data16_g170515.NormalOS = In_NormalOS16_g170515;
				Data16_g170515.NormalWS = In_NormalWS16_g170515;
				Data16_g170515.NormalRawOS = In_NormalRawOS16_g170515;
				Data16_g170515.NormalRawWS = In_NormalRawWS16_g170515;
				Data16_g170515.TangentOS = In_TangentOS16_g170515;
				Data16_g170515.ViewDirWS = In_ViewDirWS16_g170515;
				Data16_g170515.VertexData = In_VertexData16_g170515;
				Data16_g170515.MotionData = In_MotionData16_g170515;
				Data16_g170515.BoundsData = In_BoundsData16_g170515;
				Data16_g170515.RotationData = In_RotationData16_g170515;
				TVEModelData Data15_g170526 = Data16_g170515;
				float Out_Dummy15_g170526 = 0;
				float3 Out_PositionOS15_g170526 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170526 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170526 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170526 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170526 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170526 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170526 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170526 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170526 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170526 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170526 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170526 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170526 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170526 = float3( 0,0,0 );
				float4 Out_VertexData15_g170526 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170526 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170526 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170526 = float4( 0,0,0,0 );
				Out_Dummy15_g170526 = Data15_g170526.Dummy;
				Out_PositionOS15_g170526 = Data15_g170526.PositionOS;
				Out_PositionWS15_g170526 = Data15_g170526.PositionWS;
				Out_PositionWO15_g170526 = Data15_g170526.PositionWO;
				Out_PositionRawOS15_g170526 = Data15_g170526.PositionRawOS;
				Out_PositionAddOS15_g170526 = Data15_g170526.PositionAddOS;
				Out_PivotOS15_g170526 = Data15_g170526.PivotOS;
				Out_PivotWS15_g170526 = Data15_g170526.PivotWS;
				Out_PivotWO15_g170526 = Data15_g170526.PivotWO;
				Out_NormalOS15_g170526 = Data15_g170526.NormalOS;
				Out_NormalWS15_g170526 = Data15_g170526.NormalWS;
				Out_NormalRawOS15_g170526 = Data15_g170526.NormalRawOS;
				Out_NormalRawWS15_g170526 = Data15_g170526.NormalRawWS;
				Out_TangentOS15_g170526 = Data15_g170526.TangentOS;
				Out_ViewDirWS15_g170526 = Data15_g170526.ViewDirWS;
				Out_VertexData15_g170526 = Data15_g170526.VertexData;
				Out_MotionData15_g170526 = Data15_g170526.MotionData;
				Out_BoundsData15_g170526 = Data15_g170526.BoundsData;
				Out_RotationData15_g170526 = Data15_g170526.RotationData;
				float3 temp_output_31_0_g170523 = Out_PositionOS15_g170526;
				
				float4 temp_output_6_0_g170538 = Out_TangentOS15_g170526;
				float2 uv_WetnessDropsTex = v.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data2262 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + 0.0 ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + 0.0 ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170538 = ( temp_output_6_0_g170538 + ( Dummy_Data2262 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170538 = temp_output_6_0_g170538;
				#endif
				
				o.ase_texcoord4.xyz = vertexToFrag73_g170143;
				o.ase_texcoord5.xyz = vertexToFrag76_g170143;
				o.ase_texcoord6.xyz = ase_worldNormal;
				float3 ase_worldTangent = UnityObjectToWorldDir(v.tangent);
				o.ase_texcoord7.xyz = ase_worldTangent;
				float ase_vertexTangentSign = v.tangent.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				o.ase_texcoord8.xyz = ase_worldBitangent;
				float temp_output_6_0_g170303 = ( _MotionHighlightValue * Motion_FadeMask1820_g170277 * Wave_Intensity1900_g170277 * ( Base_Mask217_g170277 * Base_Mask217_g170277 ) * ( Wave_Noise1475_g170277 * Wave_Noise1475_g170277 * Wave_Noise1475_g170277 * Wave_Noise1475_g170277 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170303 = ( temp_output_6_0_g170303 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170303 = temp_output_6_0_g170303;
				#endif
				half Wave_Mask2479 = staticSwitch14_g170303;
				float4 appendResult23_g170419 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask2479));
				float4 vertexToFrag24_g170419 = appendResult23_g170419;
				o.ase_texcoord9 = vertexToFrag24_g170419;
				
				o.ase_texcoord2 = v.ase_texcoord;
				o.ase_texcoord3.xy = v.texcoord2.xyzw.xy;
				o.ase_color = v.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				o.ase_texcoord3.zw = 0;
				o.ase_texcoord4.w = 0;
				o.ase_texcoord5.w = 0;
				o.ase_texcoord6.w = 0;
				o.ase_texcoord7.w = 0;
				o.ase_texcoord8.w = 0;
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					float3 defaultVertexValue = v.vertex.xyz;
				#else
					float3 defaultVertexValue = float3(0, 0, 0);
				#endif
				float3 vertexValue = ( temp_output_31_0_g170523 + _DisableSRPBatcher );
				#ifdef ASE_ABSOLUTE_VERTEX_POS
					v.vertex.xyz = vertexValue;
				#else
					v.vertex.xyz += vertexValue;
				#endif
				v.vertex.w = 1;
				v.normal = Out_NormalOS15_g170526;
				v.tangent = staticSwitch14_g170538;

				TRANSFER_SHADOW_CASTER_NORMALOFFSET(o)
				return o;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float4 vertex : INTERNALTESSPOS;
				float4 tangent : TANGENT;
				float3 normal : NORMAL;
				float4 texcoord1 : TEXCOORD1;
				float4 texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl vert ( appdata v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.vertex = v.vertex;
				o.tangent = v.tangent;
				o.normal = v.normal;
				o.texcoord1 = v.texcoord1;
				o.texcoord2 = v.texcoord2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, tessValue, tessMin, tessMax, UNITY_MATRIX_M, _WorldSpaceCameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(v[0].vertex, v[1].vertex, v[2].vertex, edgeLength, tessMaxDisp, UNITY_MATRIX_M, _WorldSpaceCameraPos, _ScreenParams, unity_CameraWorldClipPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			v2f DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				appdata o = (appdata) 0;
				o.vertex = patch[0].vertex * bary.x + patch[1].vertex * bary.y + patch[2].vertex * bary.z;
				o.tangent = patch[0].tangent * bary.x + patch[1].tangent * bary.y + patch[2].tangent * bary.z;
				o.normal = patch[0].normal * bary.x + patch[1].normal * bary.y + patch[2].normal * bary.z;
				o.texcoord1 = patch[0].texcoord1 * bary.x + patch[1].texcoord1 * bary.y + patch[2].texcoord1 * bary.z;
				o.texcoord2 = patch[0].texcoord2 * bary.x + patch[1].texcoord2 * bary.y + patch[2].texcoord2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.vertex.xyz - patch[i].normal * (dot(o.vertex.xyz, patch[i].normal) - dot(patch[i].vertex.xyz, patch[i].normal));
				float phongStrength = _TessPhongStrength;
				o.vertex.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.vertex.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			v2f vert ( appdata v )
			{
				return VertexFunction( v );
			}
			#endif

			fixed4 frag (v2f IN 
				#ifdef _DEPTHOFFSET_ON
				, out float outputDepth : SV_Depth
				#endif
				#if !defined( CAN_SKIP_VPOS )
				, UNITY_VPOS_TYPE vpos : VPOS
				#endif
				) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID(IN);

				#ifdef LOD_FADE_CROSSFADE
					UNITY_APPLY_DITHER_CROSSFADE(IN.pos.xy);
				#endif

				#if defined(ASE_LIGHTING_SIMPLE)
					SurfaceOutput o = (SurfaceOutput)0;
				#else
					#if defined(_SPECULAR_SETUP)
						SurfaceOutputStandardSpecular o = (SurfaceOutputStandardSpecular)0;
					#else
						SurfaceOutputStandard o = (SurfaceOutputStandard)0;
					#endif
				#endif

				float localCustomAlphaClip19_g170530 = ( 0.0 );
				float localBreakData4_g170529 = ( 0.0 );
				float localCompData3_g170518 = ( 0.0 );
				TVEVisualData Data3_g170518 = (TVEVisualData)0;
				half Dummy145_g170516 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170518 = Dummy145_g170516;
				float localBreakData4_g170517 = ( 0.0 );
				float localCompData3_g170493 = ( 0.0 );
				TVEVisualData Data3_g170493 = (TVEVisualData)0;
				half Dummy145_g170481 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170493 = Dummy145_g170481;
				float localBreakData4_g170492 = ( 0.0 );
				float localCompData3_g170446 = ( 0.0 );
				TVEVisualData Data3_g170446 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = IN.ase_texcoord2.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g170443 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g170446 = Dummy594_g170443.r;
				float localBreakData4_g170444 = ( 0.0 );
				float localCompData3_g170442 = ( 0.0 );
				TVEVisualData Data3_g170442 = (TVEVisualData)0;
				float In_Dummy3_g170442 = 0.0;
				float localBreakData4_g170441 = ( 0.0 );
				float localCompData3_g170434 = ( 0.0 );
				TVEVisualData Data3_g170434 = (TVEVisualData)0;
				half Dummy220_g170430 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170434 = Dummy220_g170430;
				float localBreakData4_g170433 = ( 0.0 );
				float localCompData3_g170422 = ( 0.0 );
				TVEVisualData Data3_g170422 = (TVEVisualData)0;
				half Dummy202_g170420 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170422 = Dummy202_g170420;
				float localBreakData4_g170421 = ( 0.0 );
				float localCompData3_g170403 = ( 0.0 );
				TVEVisualData Data3_g170403 = (TVEVisualData)0;
				half4 Dummy944_g170386 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170403 = Dummy944_g170386.x;
				float localBreakData4_g170402 = ( 0.0 );
				float localCompData3_g170363 = ( 0.0 );
				TVEVisualData Data3_g170363 = (TVEVisualData)0;
				half4 Dummy946_g170352 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170363 = Dummy946_g170352.x;
				float localBreakData4_g170366 = ( 0.0 );
				float localCompData3_g170344 = ( 0.0 );
				TVEVisualData Data3_g170344 = (TVEVisualData)0;
				half4 Dummy130_g170334 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170344 = Dummy130_g170334.x;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170345) = _MainAlbedoTex;
				float localFilterTexture19_g170348 = ( 0.0 );
				SamplerState SamplerDefault19_g170348 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170348 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170348 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170348 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170348 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170348 = SamplerDefault19_g170348;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170348 = SamplerDefault19_g170348;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170348 = SamplerPoint19_g170348;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170348 = SamplerLow19_g170348;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170348 = SamplerMedium19_g170348;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170348 = SamplerHigh19_g170348;
				#endif
				SamplerState Sampler276_g170345 = SS19_g170348;
				half4 Local_Coords180_g170334 = _main_coord_value;
				float4 temp_output_37_0_g170345 = Local_Coords180_g170334;
				half4 Coords276_g170345 = temp_output_37_0_g170345;
				half2 TexCoord276_g170345 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170345 = SampleMain( Texture276_g170345 , Sampler276_g170345 , Coords276_g170345 , TexCoord276_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170345) = _MainAlbedoTex;
				SamplerState Sampler275_g170345 = SS19_g170348;
				half4 Coords275_g170345 = temp_output_37_0_g170345;
				half2 TexCoord275_g170345 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170345 = SampleExtra( Texture275_g170345 , Sampler275_g170345 , Coords275_g170345 , TexCoord275_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170345) = _MainAlbedoTex;
				SamplerState Sampler238_g170345 = SS19_g170348;
				half4 Coords238_g170345 = temp_output_37_0_g170345;
				TVEModelData Data16_g170157 = (TVEModelData)0;
				float In_Dummy16_g170157 = 0.0;
				float3 In_PositionOS16_g170157 = float3( 0,0,0 );
				float3 vertexToFrag73_g170143 = IN.ase_texcoord4.xyz;
				half3 PositionWS122_g170143 = vertexToFrag73_g170143;
				float3 In_PositionWS16_g170157 = PositionWS122_g170143;
				float3 vertexToFrag76_g170143 = IN.ase_texcoord5.xyz;
				half3 PivotWS121_g170143 = vertexToFrag76_g170143;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g170143 = ( PositionWS122_g170143 - PivotWS121_g170143 );
				#else
				float3 staticSwitch204_g170143 = PositionWS122_g170143;
				#endif
				half3 PositionWO132_g170143 = ( staticSwitch204_g170143 - TVE_WorldOrigin );
				float3 In_PositionWO16_g170157 = PositionWO132_g170143;
				float3 In_PositionRawOS16_g170157 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g170157 = float3( 0,0,0 );
				float3 In_PivotOS16_g170157 = float3( 0,0,0 );
				float3 In_PivotWS16_g170157 = PivotWS121_g170143;
				half3 PivotWO133_g170143 = ( PivotWS121_g170143 - TVE_WorldOrigin );
				float3 In_PivotWO16_g170157 = PivotWO133_g170143;
				float3 In_NormalOS16_g170157 = float3( 0,0,0 );
				float3 ase_worldNormal = IN.ase_texcoord6.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g170143 = normalizedWorldNormal;
				float3 In_NormalWS16_g170157 = Normal_WS95_g170143;
				float3 In_NormalRawOS16_g170157 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g170157 = float3( 0,0,0 );
				float4 In_TangentOS16_g170157 = float4( 0,1,0,1 );
				float3 normalizeResult296_g170143 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g170143 ) );
				half3 ViewDirWS169_g170143 = normalizeResult296_g170143;
				float3 In_ViewDirWS16_g170157 = ViewDirWS169_g170143;
				half4 VertexMasks171_g170143 = IN.ase_color;
				float4 In_VertexData16_g170157 = VertexMasks171_g170143;
				float4 In_MotionData16_g170157 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g170157 = float4( 1,1,1,1 );
				float4 In_RotationData16_g170157 = float4( 0,0,0,0 );
				Data16_g170157.Dummy = In_Dummy16_g170157;
				Data16_g170157.PositionOS = In_PositionOS16_g170157;
				Data16_g170157.PositionWS = In_PositionWS16_g170157;
				Data16_g170157.PositionWO = In_PositionWO16_g170157;
				Data16_g170157.PositionRawOS = In_PositionRawOS16_g170157;
				Data16_g170157.PositionAddOS = In_PositionAddOS16_g170157;
				Data16_g170157.PivotOS = In_PivotOS16_g170157;
				Data16_g170157.PivotWS = In_PivotWS16_g170157;
				Data16_g170157.PivotWO = In_PivotWO16_g170157;
				Data16_g170157.NormalOS = In_NormalOS16_g170157;
				Data16_g170157.NormalWS = In_NormalWS16_g170157;
				Data16_g170157.NormalRawOS = In_NormalRawOS16_g170157;
				Data16_g170157.NormalRawWS = In_NormalRawWS16_g170157;
				Data16_g170157.TangentOS = In_TangentOS16_g170157;
				Data16_g170157.ViewDirWS = In_ViewDirWS16_g170157;
				Data16_g170157.VertexData = In_VertexData16_g170157;
				Data16_g170157.MotionData = In_MotionData16_g170157;
				Data16_g170157.BoundsData = In_BoundsData16_g170157;
				Data16_g170157.RotationData = In_RotationData16_g170157;
				TVEModelData Data15_g170335 = Data16_g170157;
				float Out_Dummy15_g170335 = 0;
				float3 Out_PositionOS15_g170335 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170335 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170335 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170335 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170335 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170335 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170335 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170335 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170335 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170335 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170335 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170335 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170335 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170335 = float3( 0,0,0 );
				float4 Out_VertexData15_g170335 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170335 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170335 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170335 = float4( 0,0,0,0 );
				Out_Dummy15_g170335 = Data15_g170335.Dummy;
				Out_PositionOS15_g170335 = Data15_g170335.PositionOS;
				Out_PositionWS15_g170335 = Data15_g170335.PositionWS;
				Out_PositionWO15_g170335 = Data15_g170335.PositionWO;
				Out_PositionRawOS15_g170335 = Data15_g170335.PositionRawOS;
				Out_PositionAddOS15_g170335 = Data15_g170335.PositionAddOS;
				Out_PivotOS15_g170335 = Data15_g170335.PivotOS;
				Out_PivotWS15_g170335 = Data15_g170335.PivotWS;
				Out_PivotWO15_g170335 = Data15_g170335.PivotWO;
				Out_NormalOS15_g170335 = Data15_g170335.NormalOS;
				Out_NormalWS15_g170335 = Data15_g170335.NormalWS;
				Out_NormalRawOS15_g170335 = Data15_g170335.NormalRawOS;
				Out_NormalRawWS15_g170335 = Data15_g170335.NormalRawWS;
				Out_TangentOS15_g170335 = Data15_g170335.TangentOS;
				Out_ViewDirWS15_g170335 = Data15_g170335.ViewDirWS;
				Out_VertexData15_g170335 = Data15_g170335.VertexData;
				Out_MotionData15_g170335 = Data15_g170335.MotionData;
				Out_BoundsData15_g170335 = Data15_g170335.BoundsData;
				Out_RotationData15_g170335 = Data15_g170335.RotationData;
				half3 Model_PositionWO222_g170334 = Out_PositionWO15_g170335;
				float3 temp_output_279_0_g170345 = Model_PositionWO222_g170334;
				half3 WorldPosition238_g170345 = temp_output_279_0_g170345;
				half4 localSamplePlanar2D238_g170345 = SamplePlanar2D( Texture238_g170345 , Sampler238_g170345 , Coords238_g170345 , WorldPosition238_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170345) = _MainAlbedoTex;
				SamplerState Sampler246_g170345 = SS19_g170348;
				half4 Coords246_g170345 = temp_output_37_0_g170345;
				half3 WorldPosition246_g170345 = temp_output_279_0_g170345;
				half3 Model_NormalWS226_g170334 = Out_NormalWS15_g170335;
				float3 temp_output_280_0_g170345 = Model_NormalWS226_g170334;
				half3 WorldNormal246_g170345 = temp_output_280_0_g170345;
				half4 localSamplePlanar3D246_g170345 = SamplePlanar3D( Texture246_g170345 , Sampler246_g170345 , Coords246_g170345 , WorldPosition246_g170345 , WorldNormal246_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170345) = _MainAlbedoTex;
				SamplerState Sampler234_g170345 = SS19_g170348;
				float4 Coords234_g170345 = temp_output_37_0_g170345;
				float3 WorldPosition234_g170345 = temp_output_279_0_g170345;
				float4 localSampleStochastic2D234_g170345 = SampleStochastic2D( Texture234_g170345 , Sampler234_g170345 , Coords234_g170345 , WorldPosition234_g170345 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170345) = _MainAlbedoTex;
				SamplerState Sampler263_g170345 = SS19_g170348;
				half4 Coords263_g170345 = temp_output_37_0_g170345;
				half3 WorldPosition263_g170345 = temp_output_279_0_g170345;
				half3 WorldNormal263_g170345 = temp_output_280_0_g170345;
				half4 localSampleStochastic3D263_g170345 = SampleStochastic3D( Texture263_g170345 , Sampler263_g170345 , Coords263_g170345 , WorldPosition263_g170345 , WorldNormal263_g170345 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170334 = localSampleMain276_g170345;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170334 = localSampleExtra275_g170345;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170334 = localSamplePlanar2D238_g170345;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170334 = localSamplePlanar3D246_g170345;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170334 = localSampleStochastic2D234_g170345;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170334 = localSampleStochastic3D263_g170345;
				#else
				float4 staticSwitch184_g170334 = localSampleMain276_g170345;
				#endif
				half4 Local_AlbedoTex185_g170334 = staticSwitch184_g170334;
				float3 lerpResult53_g170334 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170334).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170334 = lerpResult53_g170334;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170347) = _MainShaderTex;
				float localFilterTexture30_g170350 = ( 0.0 );
				SamplerState SamplerDefault30_g170350 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170350 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170350 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170350 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170350 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170350 = SamplerDefault30_g170350;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170350 = SamplerDefault30_g170350;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170350 = SamplerPoint30_g170350;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170350 = SamplerLow30_g170350;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170350 = SamplerMedium30_g170350;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170350 = SamplerHigh30_g170350;
				#endif
				SamplerState Sampler276_g170347 = SS30_g170350;
				float4 temp_output_37_0_g170347 = Local_Coords180_g170334;
				half4 Coords276_g170347 = temp_output_37_0_g170347;
				half2 TexCoord276_g170347 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170347 = SampleMain( Texture276_g170347 , Sampler276_g170347 , Coords276_g170347 , TexCoord276_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170347) = _MainShaderTex;
				SamplerState Sampler275_g170347 = SS30_g170350;
				half4 Coords275_g170347 = temp_output_37_0_g170347;
				half2 TexCoord275_g170347 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170347 = SampleExtra( Texture275_g170347 , Sampler275_g170347 , Coords275_g170347 , TexCoord275_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170347) = _MainShaderTex;
				SamplerState Sampler238_g170347 = SS30_g170350;
				half4 Coords238_g170347 = temp_output_37_0_g170347;
				float3 temp_output_279_0_g170347 = Model_PositionWO222_g170334;
				half3 WorldPosition238_g170347 = temp_output_279_0_g170347;
				half4 localSamplePlanar2D238_g170347 = SamplePlanar2D( Texture238_g170347 , Sampler238_g170347 , Coords238_g170347 , WorldPosition238_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170347) = _MainShaderTex;
				SamplerState Sampler246_g170347 = SS30_g170350;
				half4 Coords246_g170347 = temp_output_37_0_g170347;
				half3 WorldPosition246_g170347 = temp_output_279_0_g170347;
				float3 temp_output_280_0_g170347 = Model_NormalWS226_g170334;
				half3 WorldNormal246_g170347 = temp_output_280_0_g170347;
				half4 localSamplePlanar3D246_g170347 = SamplePlanar3D( Texture246_g170347 , Sampler246_g170347 , Coords246_g170347 , WorldPosition246_g170347 , WorldNormal246_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170347) = _MainShaderTex;
				SamplerState Sampler234_g170347 = SS30_g170350;
				float4 Coords234_g170347 = temp_output_37_0_g170347;
				float3 WorldPosition234_g170347 = temp_output_279_0_g170347;
				float4 localSampleStochastic2D234_g170347 = SampleStochastic2D( Texture234_g170347 , Sampler234_g170347 , Coords234_g170347 , WorldPosition234_g170347 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170347) = _MainShaderTex;
				SamplerState Sampler263_g170347 = SS30_g170350;
				half4 Coords263_g170347 = temp_output_37_0_g170347;
				half3 WorldPosition263_g170347 = temp_output_279_0_g170347;
				half3 WorldNormal263_g170347 = temp_output_280_0_g170347;
				half4 localSampleStochastic3D263_g170347 = SampleStochastic3D( Texture263_g170347 , Sampler263_g170347 , Coords263_g170347 , WorldPosition263_g170347 , WorldNormal263_g170347 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170334 = localSampleMain276_g170347;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170334 = localSampleExtra275_g170347;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170334 = localSamplePlanar2D238_g170347;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170334 = localSamplePlanar3D246_g170347;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170334 = localSampleStochastic2D234_g170347;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170334 = localSampleStochastic3D263_g170347;
				#else
				float4 staticSwitch198_g170334 = localSampleMain276_g170347;
				#endif
				half4 Local_MasksTex199_g170334 = staticSwitch198_g170334;
				float lerpResult23_g170334 = lerp( 1.0 , (Local_MasksTex199_g170334).y , _MainOcclusionValue);
				float4 appendResult73_g170334 = (float4(( (Local_MasksTex199_g170334).x * _MainMetallicValue ) , lerpResult23_g170334 , (Local_MasksTex199_g170334).z , ( (Local_MasksTex199_g170334).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170334 = appendResult73_g170334;
				float clampResult17_g170340 = clamp( (Local_Masks109_g170334).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170341 = _MainMultiRemap.x;
				float temp_output_10_0_g170341 = ( _MainMultiRemap.y - temp_output_7_0_g170341 );
				half Local_MultiMask78_g170334 = saturate( ( ( clampResult17_g170340 - temp_output_7_0_g170341 ) / ( temp_output_10_0_g170341 + 0.0001 ) ) );
				float lerpResult58_g170334 = lerp( 1.0 , Local_MultiMask78_g170334 , _MainColorMode);
				float4 lerpResult62_g170334 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170334);
				half3 Local_ColorRGB93_g170334 = (lerpResult62_g170334).rgb;
				half3 Local_Albedo139_g170334 = ( Local_AlbedoRGB107_g170334 * Local_ColorRGB93_g170334 );
				float3 In_Albedo3_g170344 = Local_Albedo139_g170334;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170346) = _MainNormalTex;
				float localFilterTexture29_g170349 = ( 0.0 );
				SamplerState SamplerDefault29_g170349 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170349 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170349 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170349 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170349 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170349 = SamplerDefault29_g170349;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170349 = SamplerDefault29_g170349;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170349 = SamplerPoint29_g170349;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170349 = SamplerLow29_g170349;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170349 = SamplerMedium29_g170349;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170349 = SamplerHigh29_g170349;
				#endif
				SamplerState Sampler276_g170346 = SS29_g170349;
				float4 temp_output_37_0_g170346 = Local_Coords180_g170334;
				half4 Coords276_g170346 = temp_output_37_0_g170346;
				half2 TexCoord276_g170346 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170346 = SampleMain( Texture276_g170346 , Sampler276_g170346 , Coords276_g170346 , TexCoord276_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170346) = _MainNormalTex;
				SamplerState Sampler275_g170346 = SS29_g170349;
				half4 Coords275_g170346 = temp_output_37_0_g170346;
				half2 TexCoord275_g170346 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170346 = SampleExtra( Texture275_g170346 , Sampler275_g170346 , Coords275_g170346 , TexCoord275_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170346) = _MainNormalTex;
				SamplerState Sampler238_g170346 = SS29_g170349;
				half4 Coords238_g170346 = temp_output_37_0_g170346;
				float3 temp_output_279_0_g170346 = Model_PositionWO222_g170334;
				half3 WorldPosition238_g170346 = temp_output_279_0_g170346;
				half4 localSamplePlanar2D238_g170346 = SamplePlanar2D( Texture238_g170346 , Sampler238_g170346 , Coords238_g170346 , WorldPosition238_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170346) = _MainNormalTex;
				SamplerState Sampler246_g170346 = SS29_g170349;
				half4 Coords246_g170346 = temp_output_37_0_g170346;
				half3 WorldPosition246_g170346 = temp_output_279_0_g170346;
				float3 temp_output_280_0_g170346 = Model_NormalWS226_g170334;
				half3 WorldNormal246_g170346 = temp_output_280_0_g170346;
				half4 localSamplePlanar3D246_g170346 = SamplePlanar3D( Texture246_g170346 , Sampler246_g170346 , Coords246_g170346 , WorldPosition246_g170346 , WorldNormal246_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170346) = _MainNormalTex;
				SamplerState Sampler234_g170346 = SS29_g170349;
				float4 Coords234_g170346 = temp_output_37_0_g170346;
				float3 WorldPosition234_g170346 = temp_output_279_0_g170346;
				float4 localSampleStochastic2D234_g170346 = SampleStochastic2D( Texture234_g170346 , Sampler234_g170346 , Coords234_g170346 , WorldPosition234_g170346 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170346) = _MainNormalTex;
				SamplerState Sampler263_g170346 = SS29_g170349;
				half4 Coords263_g170346 = temp_output_37_0_g170346;
				half3 WorldPosition263_g170346 = temp_output_279_0_g170346;
				half3 WorldNormal263_g170346 = temp_output_280_0_g170346;
				half4 localSampleStochastic3D263_g170346 = SampleStochastic3D( Texture263_g170346 , Sampler263_g170346 , Coords263_g170346 , WorldPosition263_g170346 , WorldNormal263_g170346 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170334 = localSampleMain276_g170346;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170334 = localSampleExtra275_g170346;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170334 = localSamplePlanar2D238_g170346;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170334 = localSamplePlanar3D246_g170346;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170334 = localSampleStochastic2D234_g170346;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170334 = localSampleStochastic3D263_g170346;
				#else
				float4 staticSwitch193_g170334 = localSampleMain276_g170346;
				#endif
				half4 Local_NormaTex191_g170334 = staticSwitch193_g170334;
				half4 Normal_Packed45_g170336 = Local_NormaTex191_g170334;
				float2 appendResult58_g170336 = (float2(( (Normal_Packed45_g170336).x * (Normal_Packed45_g170336).w ) , (Normal_Packed45_g170336).y));
				half2 Normal_Default50_g170336 = appendResult58_g170336;
				half2 Normal_ASTC41_g170336 = (Normal_Packed45_g170336).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170336 = Normal_ASTC41_g170336;
				#else
				float2 staticSwitch38_g170336 = Normal_Default50_g170336;
				#endif
				half2 Normal_NO_DTX544_g170336 = (Normal_Packed45_g170336).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170336 = Normal_NO_DTX544_g170336;
				#else
				float2 staticSwitch37_g170336 = staticSwitch38_g170336;
				#endif
				float2 temp_output_26_0_g170334 = ( (staticSwitch37_g170336*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = IN.ase_texcoord7.xyz;
				float3 ase_worldBitangent = IN.ase_texcoord8.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g170337 = temp_output_26_0_g170334;
				float2 break71_g170337 = Normal_Planar45_g170337;
				float3 appendResult72_g170337 = (float3(break71_g170337.x , 0.0 , break71_g170337.y));
				float2 temp_output_205_0_g170334 = (mul( ase_worldToTangent, appendResult72_g170337 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170334 = temp_output_26_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170334 = temp_output_26_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170334 = temp_output_205_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170334 = temp_output_205_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170334 = temp_output_205_0_g170334;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170334 = temp_output_205_0_g170334;
				#else
				float2 staticSwitch204_g170334 = temp_output_26_0_g170334;
				#endif
				half2 Local_NormalTS108_g170334 = staticSwitch204_g170334;
				float2 In_NormalTS3_g170344 = Local_NormalTS108_g170334;
				float3 appendResult68_g170338 = (float3(Local_NormalTS108_g170334 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g170338 = appendResult68_g170338;
				float3 worldNormal74_g170338 = normalize( float3(dot(tanToWorld0,tanNormal74_g170338), dot(tanToWorld1,tanNormal74_g170338), dot(tanToWorld2,tanNormal74_g170338)) );
				half3 Local_NormalWS250_g170334 = worldNormal74_g170338;
				float3 In_NormalWS3_g170344 = Local_NormalWS250_g170334;
				float4 In_Shader3_g170344 = Local_Masks109_g170334;
				float4 In_Emissive3_g170344 = half4(1,1,1,1);
				float3 temp_output_3_0_g170339 = Local_Albedo139_g170334;
				float dotResult20_g170339 = dot( temp_output_3_0_g170339 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170334 = dotResult20_g170339;
				float In_Grayscale3_g170344 = Local_Grayscale110_g170334;
				float clampResult144_g170334 = clamp( saturate( ( Local_Grayscale110_g170334 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170334 = clampResult144_g170334;
				float In_Luminosity3_g170344 = Local_Luminosity145_g170334;
				float In_MultiMask3_g170344 = Local_MultiMask78_g170334;
				float temp_output_187_0_g170334 = (Local_AlbedoTex185_g170334).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170334 = ( temp_output_187_0_g170334 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170334 = temp_output_187_0_g170334;
				#endif
				half Local_AlphaClip111_g170334 = staticSwitch236_g170334;
				float In_AlphaClip3_g170344 = Local_AlphaClip111_g170334;
				half Local_AlphaFade246_g170334 = (lerpResult62_g170334).a;
				float In_AlphaFade3_g170344 = Local_AlphaFade246_g170334;
				float3 temp_cast_5 = (1.0).xxx;
				float3 In_Translucency3_g170344 = temp_cast_5;
				float In_Transmission3_g170344 = 1.0;
				float In_Thickness3_g170344 = 0.0;
				float In_Diffusion3_g170344 = 0.0;
				Data3_g170344.Dummy = In_Dummy3_g170344;
				Data3_g170344.Albedo = In_Albedo3_g170344;
				Data3_g170344.NormalTS = In_NormalTS3_g170344;
				Data3_g170344.NormalWS = In_NormalWS3_g170344;
				Data3_g170344.Shader = In_Shader3_g170344;
				Data3_g170344.Emissive= In_Emissive3_g170344;
				Data3_g170344.MultiMask = In_MultiMask3_g170344;
				Data3_g170344.Grayscale = In_Grayscale3_g170344;
				Data3_g170344.Luminosity = In_Luminosity3_g170344;
				Data3_g170344.AlphaClip = In_AlphaClip3_g170344;
				Data3_g170344.AlphaFade = In_AlphaFade3_g170344;
				Data3_g170344.Translucency = In_Translucency3_g170344;
				Data3_g170344.Transmission = In_Transmission3_g170344;
				Data3_g170344.Thickness = In_Thickness3_g170344;
				Data3_g170344.Diffusion = In_Diffusion3_g170344;
				TVEVisualData Data4_g170366 = Data3_g170344;
				float Out_Dummy4_g170366 = 0;
				float3 Out_Albedo4_g170366 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170366 = float2( 0,0 );
				float3 Out_NormalWS4_g170366 = float3( 0,0,0 );
				float4 Out_Shader4_g170366 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170366 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170366 = 0;
				float Out_Grayscale4_g170366 = 0;
				float Out_Luminosity4_g170366 = 0;
				float Out_AlphaClip4_g170366 = 0;
				float Out_AlphaFade4_g170366 = 0;
				float3 Out_Translucency4_g170366 = float3( 0,0,0 );
				float Out_Transmission4_g170366 = 0;
				float Out_Thickness4_g170366 = 0;
				float Out_Diffusion4_g170366 = 0;
				Out_Dummy4_g170366 = Data4_g170366.Dummy;
				Out_Albedo4_g170366 = Data4_g170366.Albedo;
				Out_NormalTS4_g170366 = Data4_g170366.NormalTS;
				Out_NormalWS4_g170366 = Data4_g170366.NormalWS;
				Out_Shader4_g170366 = Data4_g170366.Shader;
				Out_Emissive4_g170366= Data4_g170366.Emissive;
				Out_MultiMask4_g170366 = Data4_g170366.MultiMask;
				Out_Grayscale4_g170366 = Data4_g170366.Grayscale;
				Out_Luminosity4_g170366= Data4_g170366.Luminosity;
				Out_AlphaClip4_g170366 = Data4_g170366.AlphaClip;
				Out_AlphaFade4_g170366 = Data4_g170366.AlphaFade;
				Out_Translucency4_g170366 = Data4_g170366.Translucency;
				Out_Transmission4_g170366 = Data4_g170366.Transmission;
				Out_Thickness4_g170366 = Data4_g170366.Thickness;
				Out_Diffusion4_g170366 = Data4_g170366.Diffusion;
				half3 Visual_Albedo527_g170352 = Out_Albedo4_g170366;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170353) = _SecondAlbedoTex;
				float localFilterTexture19_g170383 = ( 0.0 );
				SamplerState SamplerDefault19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170383 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170383 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170383 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170383 = SamplerDefault19_g170383;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170383 = SamplerDefault19_g170383;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170383 = SamplerPoint19_g170383;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170383 = SamplerLow19_g170383;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170383 = SamplerMedium19_g170383;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170383 = SamplerHigh19_g170383;
				#endif
				SamplerState Sampler276_g170353 = SS19_g170383;
				half4 Local_LayerCoords790_g170352 = _second_coord_value;
				float4 temp_output_37_0_g170353 = Local_LayerCoords790_g170352;
				half4 Coords276_g170353 = temp_output_37_0_g170353;
				half2 TexCoord276_g170353 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170353 = SampleMain( Texture276_g170353 , Sampler276_g170353 , Coords276_g170353 , TexCoord276_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170353) = _SecondAlbedoTex;
				SamplerState Sampler275_g170353 = SS19_g170383;
				half4 Coords275_g170353 = temp_output_37_0_g170353;
				half2 TexCoord275_g170353 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170353 = SampleExtra( Texture275_g170353 , Sampler275_g170353 , Coords275_g170353 , TexCoord275_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170353) = _SecondAlbedoTex;
				SamplerState Sampler238_g170353 = SS19_g170383;
				half4 Coords238_g170353 = temp_output_37_0_g170353;
				TVEModelData Data15_g170364 = Data16_g170157;
				float Out_Dummy15_g170364 = 0;
				float3 Out_PositionOS15_g170364 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170364 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170364 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170364 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170364 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170364 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170364 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170364 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170364 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170364 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170364 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170364 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170364 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170364 = float3( 0,0,0 );
				float4 Out_VertexData15_g170364 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170364 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170364 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170364 = float4( 0,0,0,0 );
				Out_Dummy15_g170364 = Data15_g170364.Dummy;
				Out_PositionOS15_g170364 = Data15_g170364.PositionOS;
				Out_PositionWS15_g170364 = Data15_g170364.PositionWS;
				Out_PositionWO15_g170364 = Data15_g170364.PositionWO;
				Out_PositionRawOS15_g170364 = Data15_g170364.PositionRawOS;
				Out_PositionAddOS15_g170364 = Data15_g170364.PositionAddOS;
				Out_PivotOS15_g170364 = Data15_g170364.PivotOS;
				Out_PivotWS15_g170364 = Data15_g170364.PivotWS;
				Out_PivotWO15_g170364 = Data15_g170364.PivotWO;
				Out_NormalOS15_g170364 = Data15_g170364.NormalOS;
				Out_NormalWS15_g170364 = Data15_g170364.NormalWS;
				Out_NormalRawOS15_g170364 = Data15_g170364.NormalRawOS;
				Out_NormalRawWS15_g170364 = Data15_g170364.NormalRawWS;
				Out_TangentOS15_g170364 = Data15_g170364.TangentOS;
				Out_ViewDirWS15_g170364 = Data15_g170364.ViewDirWS;
				Out_VertexData15_g170364 = Data15_g170364.VertexData;
				Out_MotionData15_g170364 = Data15_g170364.MotionData;
				Out_BoundsData15_g170364 = Data15_g170364.BoundsData;
				Out_RotationData15_g170364 = Data15_g170364.RotationData;
				half3 Model_PositionWO636_g170352 = Out_PositionWO15_g170364;
				float3 temp_output_279_0_g170353 = Model_PositionWO636_g170352;
				half3 WorldPosition238_g170353 = temp_output_279_0_g170353;
				half4 localSamplePlanar2D238_g170353 = SamplePlanar2D( Texture238_g170353 , Sampler238_g170353 , Coords238_g170353 , WorldPosition238_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170353) = _SecondAlbedoTex;
				SamplerState Sampler246_g170353 = SS19_g170383;
				half4 Coords246_g170353 = temp_output_37_0_g170353;
				half3 WorldPosition246_g170353 = temp_output_279_0_g170353;
				half3 Model_NormalWS869_g170352 = Out_NormalWS15_g170364;
				float3 temp_output_280_0_g170353 = Model_NormalWS869_g170352;
				half3 WorldNormal246_g170353 = temp_output_280_0_g170353;
				half4 localSamplePlanar3D246_g170353 = SamplePlanar3D( Texture246_g170353 , Sampler246_g170353 , Coords246_g170353 , WorldPosition246_g170353 , WorldNormal246_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170353) = _SecondAlbedoTex;
				SamplerState Sampler234_g170353 = SS19_g170383;
				float4 Coords234_g170353 = temp_output_37_0_g170353;
				float3 WorldPosition234_g170353 = temp_output_279_0_g170353;
				float4 localSampleStochastic2D234_g170353 = SampleStochastic2D( Texture234_g170353 , Sampler234_g170353 , Coords234_g170353 , WorldPosition234_g170353 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170353) = _SecondAlbedoTex;
				SamplerState Sampler263_g170353 = SS19_g170383;
				half4 Coords263_g170353 = temp_output_37_0_g170353;
				half3 WorldPosition263_g170353 = temp_output_279_0_g170353;
				half3 WorldNormal263_g170353 = temp_output_280_0_g170353;
				half4 localSampleStochastic3D263_g170353 = SampleStochastic3D( Texture263_g170353 , Sampler263_g170353 , Coords263_g170353 , WorldPosition263_g170353 , WorldNormal263_g170353 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170352 = localSampleMain276_g170353;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170352 = localSampleExtra275_g170353;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170352 = localSamplePlanar2D238_g170353;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170352 = localSamplePlanar3D246_g170353;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170352 = localSampleStochastic2D234_g170353;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170352 = localSampleStochastic3D263_g170353;
				#else
				float4 staticSwitch693_g170352 = localSampleMain276_g170353;
				#endif
				half4 Local_AlbedoTex777_g170352 = staticSwitch693_g170352;
				float3 lerpResult716_g170352 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170352).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170352 = lerpResult716_g170352;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170355) = _SecondShaderTex;
				float localFilterTexture30_g170385 = ( 0.0 );
				SamplerState SamplerDefault30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170385 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170385 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170385 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170385 = SamplerDefault30_g170385;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170385 = SamplerDefault30_g170385;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170385 = SamplerPoint30_g170385;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170385 = SamplerLow30_g170385;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170385 = SamplerMedium30_g170385;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170385 = SamplerHigh30_g170385;
				#endif
				SamplerState Sampler276_g170355 = SS30_g170385;
				float4 temp_output_37_0_g170355 = Local_LayerCoords790_g170352;
				half4 Coords276_g170355 = temp_output_37_0_g170355;
				half2 TexCoord276_g170355 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170355 = SampleMain( Texture276_g170355 , Sampler276_g170355 , Coords276_g170355 , TexCoord276_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170355) = _SecondShaderTex;
				SamplerState Sampler275_g170355 = SS30_g170385;
				half4 Coords275_g170355 = temp_output_37_0_g170355;
				half2 TexCoord275_g170355 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170355 = SampleExtra( Texture275_g170355 , Sampler275_g170355 , Coords275_g170355 , TexCoord275_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170355) = _SecondShaderTex;
				SamplerState Sampler238_g170355 = SS30_g170385;
				half4 Coords238_g170355 = temp_output_37_0_g170355;
				float3 temp_output_279_0_g170355 = Model_PositionWO636_g170352;
				half3 WorldPosition238_g170355 = temp_output_279_0_g170355;
				half4 localSamplePlanar2D238_g170355 = SamplePlanar2D( Texture238_g170355 , Sampler238_g170355 , Coords238_g170355 , WorldPosition238_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170355) = _SecondShaderTex;
				SamplerState Sampler246_g170355 = SS30_g170385;
				half4 Coords246_g170355 = temp_output_37_0_g170355;
				half3 WorldPosition246_g170355 = temp_output_279_0_g170355;
				float3 temp_output_280_0_g170355 = Model_NormalWS869_g170352;
				half3 WorldNormal246_g170355 = temp_output_280_0_g170355;
				half4 localSamplePlanar3D246_g170355 = SamplePlanar3D( Texture246_g170355 , Sampler246_g170355 , Coords246_g170355 , WorldPosition246_g170355 , WorldNormal246_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170355) = _SecondShaderTex;
				SamplerState Sampler234_g170355 = SS30_g170385;
				float4 Coords234_g170355 = temp_output_37_0_g170355;
				float3 WorldPosition234_g170355 = temp_output_279_0_g170355;
				float4 localSampleStochastic2D234_g170355 = SampleStochastic2D( Texture234_g170355 , Sampler234_g170355 , Coords234_g170355 , WorldPosition234_g170355 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170355) = _SecondShaderTex;
				SamplerState Sampler263_g170355 = SS30_g170385;
				half4 Coords263_g170355 = temp_output_37_0_g170355;
				half3 WorldPosition263_g170355 = temp_output_279_0_g170355;
				half3 WorldNormal263_g170355 = temp_output_280_0_g170355;
				half4 localSampleStochastic3D263_g170355 = SampleStochastic3D( Texture263_g170355 , Sampler263_g170355 , Coords263_g170355 , WorldPosition263_g170355 , WorldNormal263_g170355 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170352 = localSampleMain276_g170355;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170352 = localSampleExtra275_g170355;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170352 = localSamplePlanar2D238_g170355;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170352 = localSamplePlanar3D246_g170355;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170352 = localSampleStochastic2D234_g170355;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170352 = localSampleStochastic3D263_g170355;
				#else
				float4 staticSwitch722_g170352 = localSampleMain276_g170355;
				#endif
				half4 Local_ShaderTex775_g170352 = staticSwitch722_g170352;
				float lerpResult739_g170352 = lerp( 1.0 , (Local_ShaderTex775_g170352).y , _SecondOcclusionValue);
				float4 appendResult749_g170352 = (float4(( (Local_ShaderTex775_g170352).x * _SecondMetallicValue ) , lerpResult739_g170352 , (Local_ShaderTex775_g170352).z , ( (Local_ShaderTex775_g170352).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170352 = appendResult749_g170352;
				float clampResult17_g170359 = clamp( (Local_Masks750_g170352).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170360 = _SecondMultiRemap.x;
				float temp_output_10_0_g170360 = ( _SecondMultiRemap.y - temp_output_7_0_g170360 );
				float temp_output_765_0_g170352 = saturate( ( ( clampResult17_g170359 - temp_output_7_0_g170360 ) / ( temp_output_10_0_g170360 + 0.0001 ) ) );
				half Local_MultiMask767_g170352 = temp_output_765_0_g170352;
				float lerpResult705_g170352 = lerp( 1.0 , Local_MultiMask767_g170352 , _SecondColorMode);
				float4 lerpResult706_g170352 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170352);
				half3 Local_ColorRGB774_g170352 = (lerpResult706_g170352).rgb;
				half3 Local_Albedo768_g170352 = ( Local_AlbedoRGB771_g170352 * Local_ColorRGB774_g170352 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170379 = 2.0;
				#else
				float staticSwitch1_g170379 = 4.594794;
				#endif
				float3 lerpResult985_g170352 = lerp( Local_Albedo768_g170352 , ( Visual_Albedo527_g170352 * Local_Albedo768_g170352 * staticSwitch1_g170379 ) , _SecondBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170356) = _SecondMaskTex;
				SamplerState Sampler276_g170356 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170352 = _second_mask_coord_value;
				float4 temp_output_37_0_g170356 = Local_BlendCoords813_g170352;
				half4 Coords276_g170356 = temp_output_37_0_g170356;
				half2 TexCoord276_g170356 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170356 = SampleMain( Texture276_g170356 , Sampler276_g170356 , Coords276_g170356 , TexCoord276_g170356 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170356) = _SecondMaskTex;
				SamplerState Sampler275_g170356 = sampler_Linear_Repeat;
				half4 Coords275_g170356 = temp_output_37_0_g170356;
				half2 TexCoord275_g170356 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170356 = SampleExtra( Texture275_g170356 , Sampler275_g170356 , Coords275_g170356 , TexCoord275_g170356 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170356) = _SecondMaskTex;
				SamplerState Sampler238_g170356 = sampler_Linear_Repeat;
				half4 Coords238_g170356 = temp_output_37_0_g170356;
				float3 temp_output_279_0_g170356 = Model_PositionWO636_g170352;
				half3 WorldPosition238_g170356 = temp_output_279_0_g170356;
				half4 localSamplePlanar2D238_g170356 = SamplePlanar2D( Texture238_g170356 , Sampler238_g170356 , Coords238_g170356 , WorldPosition238_g170356 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170356) = _SecondMaskTex;
				SamplerState Sampler246_g170356 = sampler_Linear_Repeat;
				half4 Coords246_g170356 = temp_output_37_0_g170356;
				half3 WorldPosition246_g170356 = temp_output_279_0_g170356;
				float3 temp_output_280_0_g170356 = Model_NormalWS869_g170352;
				half3 WorldNormal246_g170356 = temp_output_280_0_g170356;
				half4 localSamplePlanar3D246_g170356 = SamplePlanar3D( Texture246_g170356 , Sampler246_g170356 , Coords246_g170356 , WorldPosition246_g170356 , WorldNormal246_g170356 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170352 = localSampleMain276_g170356;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170352 = localSampleExtra275_g170356;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170352 = localSamplePlanar2D238_g170356;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170352 = localSamplePlanar3D246_g170356;
				#else
				float4 staticSwitch817_g170352 = localSampleMain276_g170356;
				#endif
				half4 Local_MaskTex861_g170352 = staticSwitch817_g170352;
				float clampResult17_g170370 = clamp( (Local_MaskTex861_g170352).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170369 = _SecondMaskRemap.x;
				float temp_output_10_0_g170369 = ( _SecondMaskRemap.y - temp_output_7_0_g170369 );
				float lerpResult1015_g170352 = lerp( 1.0 , saturate( ( ( clampResult17_g170370 - temp_output_7_0_g170369 ) / ( temp_output_10_0_g170369 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170352 = lerpResult1015_g170352;
				half3 Visual_NormalWS951_g170352 = Out_NormalWS4_g170366;
				float clampResult17_g170371 = clamp( saturate( (Visual_NormalWS951_g170352).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170372 = _SecondProjRemap.x;
				float temp_output_10_0_g170372 = ( _SecondProjRemap.y - temp_output_7_0_g170372 );
				float lerpResult996_g170352 = lerp( 1.0 , saturate( ( ( clampResult17_g170371 - temp_output_7_0_g170372 ) / ( temp_output_10_0_g170372 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170352 = lerpResult996_g170352;
				half4 Model_VertexMasks964_g170352 = Out_VertexData15_g170364;
				float4 break965_g170352 = Model_VertexMasks964_g170352;
				float4 break33_g170373 = _second_vert_mode;
				float temp_output_30_0_g170373 = ( break965_g170352.x * break33_g170373.x );
				float temp_output_29_0_g170373 = ( break965_g170352.y * break33_g170373.y );
				float temp_output_31_0_g170373 = ( break965_g170352.z * break33_g170373.z );
				float temp_output_28_0_g170373 = ( temp_output_30_0_g170373 + temp_output_29_0_g170373 + temp_output_31_0_g170373 + ( break965_g170352.w * break33_g170373.w ) );
				float clampResult17_g170367 = clamp( temp_output_28_0_g170373 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170368 = _SecondMeshRemap.x;
				float temp_output_10_0_g170368 = ( _SecondMeshRemap.y - temp_output_7_0_g170368 );
				float lerpResult1017_g170352 = lerp( 1.0 , saturate( ( ( clampResult17_g170367 - temp_output_7_0_g170368 ) / ( temp_output_10_0_g170368 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170381 = lerpResult1017_g170352;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170381 = ( temp_output_6_0_g170381 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170381 = temp_output_6_0_g170381;
				#endif
				float temp_output_987_0_g170352 = staticSwitch14_g170381;
				half Blend_VertMask918_g170352 = temp_output_987_0_g170352;
				float localBuildGlobalData204_g170159 = ( 0.0 );
				TVEGlobalData Data204_g170159 = (TVEGlobalData)0;
				half Dummy211_g170159 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g170159 = Dummy211_g170159;
				float4 temp_output_362_164_g170159 = TVE_CoatParams;
				half4 Coat_Params302_g170159 = temp_output_362_164_g170159;
				float4 In_CoatParams204_g170159 = Coat_Params302_g170159;
				float4 temp_output_361_164_g170159 = TVE_PaintParams;
				half4 Paint_Params71_g170159 = temp_output_361_164_g170159;
				float4 In_PaintParams204_g170159 = Paint_Params71_g170159;
				float4 temp_output_365_163_g170159 = TVE_GlowParams;
				half4 Glow_Params248_g170159 = temp_output_365_163_g170159;
				float4 In_GlowParams204_g170159 = Glow_Params248_g170159;
				float4 temp_output_363_141_g170159 = TVE_AtmoParams;
				half4 Atmo_Params80_g170159 = temp_output_363_141_g170159;
				float4 In_AtmoParams204_g170159 = Atmo_Params80_g170159;
				float4 temp_output_364_139_g170159 = TVE_FormParams;
				half4 Form_Params112_g170159 = temp_output_364_139_g170159;
				float4 In_FormParams204_g170159 = Form_Params112_g170159;
				float4 temp_output_366_145_g170159 = TVE_WindParams;
				half4 Wind_Params88_g170159 = temp_output_366_145_g170159;
				float4 In_WindParams204_g170159 = Wind_Params88_g170159;
				float4 temp_output_367_145_g170159 = TVE_PushParams;
				half4 Push_Params335_g170159 = temp_output_367_145_g170159;
				float4 In_PushParams204_g170159 = Push_Params335_g170159;
				Data204_g170159.Dummy = In_Dummy204_g170159;
				Data204_g170159.CoatParams = In_CoatParams204_g170159;
				Data204_g170159.PaintParams = In_PaintParams204_g170159;
				Data204_g170159.GlowParams = In_GlowParams204_g170159;
				Data204_g170159.AtmoParams = In_AtmoParams204_g170159;
				Data204_g170159.FormParams= In_FormParams204_g170159;
				Data204_g170159.WindParams = In_WindParams204_g170159;
				Data204_g170159.PushParams = In_PushParams204_g170159;
				TVEGlobalData Data15_g170365 = Data204_g170159;
				float Out_Dummy15_g170365 = 0;
				float4 Out_CoatParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170365 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170365 = float4( 0,0,0,0 );
				Out_Dummy15_g170365 = Data15_g170365.Dummy;
				Out_CoatParams15_g170365 = Data15_g170365.CoatParams;
				Out_PaintParams15_g170365 = Data15_g170365.PaintParams;
				Out_GlowParams15_g170365 = Data15_g170365.GlowParams;
				Out_AtmoParams15_g170365= Data15_g170365.AtmoParams;
				Out_FadeParams15_g170365= Data15_g170365.FadeParams;
				Out_FormParams15_g170365 = Data15_g170365.FormParams;
				Out_LandParams15_g170365 = Data15_g170365.LandParams;
				Out_WindParams15_g170365 = Data15_g170365.WindParams;
				Out_PushParams15_g170365 = Data15_g170365.PushParams;
				half4 Global_CoatParams975_g170352 = Out_CoatParams15_g170365;
				float lerpResult1013_g170352 = lerp( 1.0 , (Global_CoatParams975_g170352).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170352 = lerpResult1013_g170352;
				#else
				float staticSwitch971_g170352 = 1.0;
				#endif
				half Blend_GlobalMask972_g170352 = staticSwitch971_g170352;
				float temp_output_432_0_g170352 = ( _SecondIntensityValue * Blend_TexMask429_g170352 * Blend_ProjMask434_g170352 * Blend_VertMask918_g170352 * Blend_GlobalMask972_g170352 );
				float clampResult17_g170375 = clamp( temp_output_432_0_g170352 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170374 = _SecondBlendRemap.x;
				float temp_output_10_0_g170374 = ( _SecondBlendRemap.y - temp_output_7_0_g170374 );
				half Blend_Mask412_g170352 = ( saturate( ( ( clampResult17_g170375 - temp_output_7_0_g170374 ) / ( temp_output_10_0_g170374 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170352 = lerp( Visual_Albedo527_g170352 , lerpResult985_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170352 = lerpResult403_g170352;
				#else
				float3 staticSwitch415_g170352 = Visual_Albedo527_g170352;
				#endif
				half3 Final_Albedo601_g170352 = staticSwitch415_g170352;
				float3 In_Albedo3_g170363 = Final_Albedo601_g170352;
				half2 Visual_NormalTS529_g170352 = Out_NormalTS4_g170366;
				float2 lerpResult40_g170377 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170352 , _SecondBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170354) = _SecondNormalTex;
				float localFilterTexture29_g170384 = ( 0.0 );
				SamplerState SamplerDefault29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170384 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170384 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170384 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170384 = SamplerDefault29_g170384;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170384 = SamplerDefault29_g170384;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170384 = SamplerPoint29_g170384;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170384 = SamplerLow29_g170384;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170384 = SamplerMedium29_g170384;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170384 = SamplerHigh29_g170384;
				#endif
				SamplerState Sampler276_g170354 = SS29_g170384;
				float4 temp_output_37_0_g170354 = Local_LayerCoords790_g170352;
				half4 Coords276_g170354 = temp_output_37_0_g170354;
				half2 TexCoord276_g170354 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170354 = SampleMain( Texture276_g170354 , Sampler276_g170354 , Coords276_g170354 , TexCoord276_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170354) = _SecondNormalTex;
				SamplerState Sampler275_g170354 = SS29_g170384;
				half4 Coords275_g170354 = temp_output_37_0_g170354;
				half2 TexCoord275_g170354 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170354 = SampleExtra( Texture275_g170354 , Sampler275_g170354 , Coords275_g170354 , TexCoord275_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170354) = _SecondNormalTex;
				SamplerState Sampler238_g170354 = SS29_g170384;
				half4 Coords238_g170354 = temp_output_37_0_g170354;
				float3 temp_output_279_0_g170354 = Model_PositionWO636_g170352;
				half3 WorldPosition238_g170354 = temp_output_279_0_g170354;
				half4 localSamplePlanar2D238_g170354 = SamplePlanar2D( Texture238_g170354 , Sampler238_g170354 , Coords238_g170354 , WorldPosition238_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170354) = _SecondNormalTex;
				SamplerState Sampler246_g170354 = SS29_g170384;
				half4 Coords246_g170354 = temp_output_37_0_g170354;
				half3 WorldPosition246_g170354 = temp_output_279_0_g170354;
				float3 temp_output_280_0_g170354 = Model_NormalWS869_g170352;
				half3 WorldNormal246_g170354 = temp_output_280_0_g170354;
				half4 localSamplePlanar3D246_g170354 = SamplePlanar3D( Texture246_g170354 , Sampler246_g170354 , Coords246_g170354 , WorldPosition246_g170354 , WorldNormal246_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170354) = _SecondNormalTex;
				SamplerState Sampler234_g170354 = SS29_g170384;
				float4 Coords234_g170354 = temp_output_37_0_g170354;
				float3 WorldPosition234_g170354 = temp_output_279_0_g170354;
				float4 localSampleStochastic2D234_g170354 = SampleStochastic2D( Texture234_g170354 , Sampler234_g170354 , Coords234_g170354 , WorldPosition234_g170354 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170354) = _SecondNormalTex;
				SamplerState Sampler263_g170354 = SS29_g170384;
				half4 Coords263_g170354 = temp_output_37_0_g170354;
				half3 WorldPosition263_g170354 = temp_output_279_0_g170354;
				half3 WorldNormal263_g170354 = temp_output_280_0_g170354;
				half4 localSampleStochastic3D263_g170354 = SampleStochastic3D( Texture263_g170354 , Sampler263_g170354 , Coords263_g170354 , WorldPosition263_g170354 , WorldNormal263_g170354 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170352 = localSampleMain276_g170354;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170352 = localSampleExtra275_g170354;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170352 = localSamplePlanar2D238_g170354;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170352 = localSamplePlanar3D246_g170354;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170352 = localSampleStochastic2D234_g170354;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170352 = localSampleStochastic3D263_g170354;
				#else
				float4 staticSwitch698_g170352 = localSampleMain276_g170354;
				#endif
				half4 Local_NormalTex776_g170352 = staticSwitch698_g170352;
				half4 Normal_Packed45_g170357 = Local_NormalTex776_g170352;
				float2 appendResult58_g170357 = (float2(( (Normal_Packed45_g170357).x * (Normal_Packed45_g170357).w ) , (Normal_Packed45_g170357).y));
				half2 Normal_Default50_g170357 = appendResult58_g170357;
				half2 Normal_ASTC41_g170357 = (Normal_Packed45_g170357).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170357 = Normal_ASTC41_g170357;
				#else
				float2 staticSwitch38_g170357 = Normal_Default50_g170357;
				#endif
				half2 Normal_NO_DTX544_g170357 = (Normal_Packed45_g170357).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170357 = Normal_NO_DTX544_g170357;
				#else
				float2 staticSwitch37_g170357 = staticSwitch38_g170357;
				#endif
				float2 temp_output_724_0_g170352 = ( (staticSwitch37_g170357*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170358 = temp_output_724_0_g170352;
				float2 break71_g170358 = Normal_Planar45_g170358;
				float3 appendResult72_g170358 = (float3(break71_g170358.x , 0.0 , break71_g170358.y));
				float2 temp_output_858_0_g170352 = (mul( ase_worldToTangent, appendResult72_g170358 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170352 = temp_output_724_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170352 = temp_output_724_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170352 = temp_output_858_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170352 = temp_output_858_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170352 = temp_output_858_0_g170352;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170352 = temp_output_858_0_g170352;
				#else
				float2 staticSwitch727_g170352 = temp_output_724_0_g170352;
				#endif
				half2 Local_NormalTS729_g170352 = staticSwitch727_g170352;
				float2 temp_output_36_0_g170377 = ( lerpResult40_g170377 + Local_NormalTS729_g170352 );
				float2 lerpResult405_g170352 = lerp( Visual_NormalTS529_g170352 , temp_output_36_0_g170377 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170352 = lerpResult405_g170352;
				#else
				float2 staticSwitch418_g170352 = Visual_NormalTS529_g170352;
				#endif
				half2 Final_NormalTS612_g170352 = staticSwitch418_g170352;
				float2 In_NormalTS3_g170363 = Final_NormalTS612_g170352;
				float3 appendResult68_g170378 = (float3(Final_NormalTS612_g170352 , 1.0));
				float3 tanNormal74_g170378 = appendResult68_g170378;
				float3 worldNormal74_g170378 = normalize( float3(dot(tanToWorld0,tanNormal74_g170378), dot(tanToWorld1,tanNormal74_g170378), dot(tanToWorld2,tanNormal74_g170378)) );
				half3 Final_NormalWS950_g170352 = worldNormal74_g170378;
				float3 In_NormalWS3_g170363 = Final_NormalWS950_g170352;
				half4 Visual_Shader531_g170352 = Out_Shader4_g170366;
				float4 lerpResult994_g170352 = lerp( Local_Masks750_g170352 , ( Visual_Shader531_g170352 * Local_Masks750_g170352 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170352 = lerp( Visual_Shader531_g170352 , lerpResult994_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170352 = lerpResult440_g170352;
				#else
				float4 staticSwitch451_g170352 = Visual_Shader531_g170352;
				#endif
				half4 Final_Masks613_g170352 = staticSwitch451_g170352;
				float4 In_Shader3_g170363 = Final_Masks613_g170352;
				float4 In_Emissive3_g170363 = Out_Emissive4_g170366;
				float3 temp_output_3_0_g170380 = Final_Albedo601_g170352;
				float dotResult20_g170380 = dot( temp_output_3_0_g170380 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170352 = dotResult20_g170380;
				float In_Grayscale3_g170363 = Final_Grayscale615_g170352;
				float clampResult651_g170352 = clamp( saturate( ( Final_Grayscale615_g170352 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170352 = clampResult651_g170352;
				float In_Luminosity3_g170363 = Final_Luminosity652_g170352;
				half Visual_MultiMask547_g170352 = Out_MultiMask4_g170366;
				float lerpResult477_g170352 = lerp( Visual_MultiMask547_g170352 , Local_MultiMask767_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float staticSwitch482_g170352 = lerpResult477_g170352;
				#else
				float staticSwitch482_g170352 = Visual_MultiMask547_g170352;
				#endif
				half Final_MultiMask572_g170352 = staticSwitch482_g170352;
				float In_MultiMask3_g170363 = Final_MultiMask572_g170352;
				half Visual_AlphaClip559_g170352 = Out_AlphaClip4_g170366;
				float temp_output_718_0_g170352 = (Local_AlbedoTex777_g170352).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170352 = ( temp_output_718_0_g170352 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170352 = temp_output_718_0_g170352;
				#endif
				half Local_AlphaClip772_g170352 = staticSwitch932_g170352;
				float lerpResult448_g170352 = lerp( Visual_AlphaClip559_g170352 , Local_AlphaClip772_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float staticSwitch564_g170352 = lerpResult448_g170352;
				#else
				float staticSwitch564_g170352 = Visual_AlphaClip559_g170352;
				#endif
				half Final_AlphaClip602_g170352 = staticSwitch564_g170352;
				float In_AlphaClip3_g170363 = Final_AlphaClip602_g170352;
				half Visual_AlphaFade588_g170352 = Out_AlphaFade4_g170366;
				half Local_AlphaFade773_g170352 = (lerpResult706_g170352).a;
				float lerpResult604_g170352 = lerp( Visual_AlphaFade588_g170352 , Local_AlphaFade773_g170352 , Blend_Mask412_g170352);
				#ifdef TVE_SECOND
				float staticSwitch608_g170352 = lerpResult604_g170352;
				#else
				float staticSwitch608_g170352 = Visual_AlphaFade588_g170352;
				#endif
				half Final_AlphaFade611_g170352 = staticSwitch608_g170352;
				float In_AlphaFade3_g170363 = Final_AlphaFade611_g170352;
				float3 In_Translucency3_g170363 = Out_Translucency4_g170366;
				float In_Transmission3_g170363 = Out_Transmission4_g170366;
				float In_Thickness3_g170363 = Out_Thickness4_g170366;
				float In_Diffusion3_g170363 = Out_Diffusion4_g170366;
				Data3_g170363.Dummy = In_Dummy3_g170363;
				Data3_g170363.Albedo = In_Albedo3_g170363;
				Data3_g170363.NormalTS = In_NormalTS3_g170363;
				Data3_g170363.NormalWS = In_NormalWS3_g170363;
				Data3_g170363.Shader = In_Shader3_g170363;
				Data3_g170363.Emissive= In_Emissive3_g170363;
				Data3_g170363.MultiMask = In_MultiMask3_g170363;
				Data3_g170363.Grayscale = In_Grayscale3_g170363;
				Data3_g170363.Luminosity = In_Luminosity3_g170363;
				Data3_g170363.AlphaClip = In_AlphaClip3_g170363;
				Data3_g170363.AlphaFade = In_AlphaFade3_g170363;
				Data3_g170363.Translucency = In_Translucency3_g170363;
				Data3_g170363.Transmission = In_Transmission3_g170363;
				Data3_g170363.Thickness = In_Thickness3_g170363;
				Data3_g170363.Diffusion = In_Diffusion3_g170363;
				TVEVisualData Data4_g170402 = Data3_g170363;
				float Out_Dummy4_g170402 = 0;
				float3 Out_Albedo4_g170402 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170402 = float2( 0,0 );
				float3 Out_NormalWS4_g170402 = float3( 0,0,0 );
				float4 Out_Shader4_g170402 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170402 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170402 = 0;
				float Out_Grayscale4_g170402 = 0;
				float Out_Luminosity4_g170402 = 0;
				float Out_AlphaClip4_g170402 = 0;
				float Out_AlphaFade4_g170402 = 0;
				float3 Out_Translucency4_g170402 = float3( 0,0,0 );
				float Out_Transmission4_g170402 = 0;
				float Out_Thickness4_g170402 = 0;
				float Out_Diffusion4_g170402 = 0;
				Out_Dummy4_g170402 = Data4_g170402.Dummy;
				Out_Albedo4_g170402 = Data4_g170402.Albedo;
				Out_NormalTS4_g170402 = Data4_g170402.NormalTS;
				Out_NormalWS4_g170402 = Data4_g170402.NormalWS;
				Out_Shader4_g170402 = Data4_g170402.Shader;
				Out_Emissive4_g170402= Data4_g170402.Emissive;
				Out_MultiMask4_g170402 = Data4_g170402.MultiMask;
				Out_Grayscale4_g170402 = Data4_g170402.Grayscale;
				Out_Luminosity4_g170402= Data4_g170402.Luminosity;
				Out_AlphaClip4_g170402 = Data4_g170402.AlphaClip;
				Out_AlphaFade4_g170402 = Data4_g170402.AlphaFade;
				Out_Translucency4_g170402 = Data4_g170402.Translucency;
				Out_Transmission4_g170402 = Data4_g170402.Transmission;
				Out_Thickness4_g170402 = Data4_g170402.Thickness;
				Out_Diffusion4_g170402 = Data4_g170402.Diffusion;
				half3 Visual_Albedo527_g170386 = Out_Albedo4_g170402;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170387) = _ThirdAlbedoTex;
				float localFilterTexture19_g170416 = ( 0.0 );
				SamplerState SamplerDefault19_g170416 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170416 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170416 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170416 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170416 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170416 = SamplerDefault19_g170416;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170416 = SamplerDefault19_g170416;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170416 = SamplerPoint19_g170416;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170416 = SamplerLow19_g170416;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170416 = SamplerMedium19_g170416;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170416 = SamplerHigh19_g170416;
				#endif
				SamplerState Sampler276_g170387 = SS19_g170416;
				half4 Local_LayerCoords790_g170386 = _third_coord_value;
				float4 temp_output_37_0_g170387 = Local_LayerCoords790_g170386;
				half4 Coords276_g170387 = temp_output_37_0_g170387;
				half2 TexCoord276_g170387 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170387 = SampleMain( Texture276_g170387 , Sampler276_g170387 , Coords276_g170387 , TexCoord276_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170387 = SS19_g170416;
				half4 Coords275_g170387 = temp_output_37_0_g170387;
				half2 TexCoord275_g170387 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170387 = SampleExtra( Texture275_g170387 , Sampler275_g170387 , Coords275_g170387 , TexCoord275_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170387 = SS19_g170416;
				half4 Coords238_g170387 = temp_output_37_0_g170387;
				TVEModelData Data15_g170414 = Data16_g170157;
				float Out_Dummy15_g170414 = 0;
				float3 Out_PositionOS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170414 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170414 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170414 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170414 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170414 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170414 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170414 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170414 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170414 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170414 = float3( 0,0,0 );
				float4 Out_VertexData15_g170414 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170414 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170414 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170414 = float4( 0,0,0,0 );
				Out_Dummy15_g170414 = Data15_g170414.Dummy;
				Out_PositionOS15_g170414 = Data15_g170414.PositionOS;
				Out_PositionWS15_g170414 = Data15_g170414.PositionWS;
				Out_PositionWO15_g170414 = Data15_g170414.PositionWO;
				Out_PositionRawOS15_g170414 = Data15_g170414.PositionRawOS;
				Out_PositionAddOS15_g170414 = Data15_g170414.PositionAddOS;
				Out_PivotOS15_g170414 = Data15_g170414.PivotOS;
				Out_PivotWS15_g170414 = Data15_g170414.PivotWS;
				Out_PivotWO15_g170414 = Data15_g170414.PivotWO;
				Out_NormalOS15_g170414 = Data15_g170414.NormalOS;
				Out_NormalWS15_g170414 = Data15_g170414.NormalWS;
				Out_NormalRawOS15_g170414 = Data15_g170414.NormalRawOS;
				Out_NormalRawWS15_g170414 = Data15_g170414.NormalRawWS;
				Out_TangentOS15_g170414 = Data15_g170414.TangentOS;
				Out_ViewDirWS15_g170414 = Data15_g170414.ViewDirWS;
				Out_VertexData15_g170414 = Data15_g170414.VertexData;
				Out_MotionData15_g170414 = Data15_g170414.MotionData;
				Out_BoundsData15_g170414 = Data15_g170414.BoundsData;
				Out_RotationData15_g170414 = Data15_g170414.RotationData;
				half3 Model_PositionWO636_g170386 = Out_PositionWO15_g170414;
				float3 temp_output_279_0_g170387 = Model_PositionWO636_g170386;
				half3 WorldPosition238_g170387 = temp_output_279_0_g170387;
				half4 localSamplePlanar2D238_g170387 = SamplePlanar2D( Texture238_g170387 , Sampler238_g170387 , Coords238_g170387 , WorldPosition238_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170387 = SS19_g170416;
				half4 Coords246_g170387 = temp_output_37_0_g170387;
				half3 WorldPosition246_g170387 = temp_output_279_0_g170387;
				half3 Model_NormalWS869_g170386 = Out_NormalWS15_g170414;
				float3 temp_output_280_0_g170387 = Model_NormalWS869_g170386;
				half3 WorldNormal246_g170387 = temp_output_280_0_g170387;
				half4 localSamplePlanar3D246_g170387 = SamplePlanar3D( Texture246_g170387 , Sampler246_g170387 , Coords246_g170387 , WorldPosition246_g170387 , WorldNormal246_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170387 = SS19_g170416;
				float4 Coords234_g170387 = temp_output_37_0_g170387;
				float3 WorldPosition234_g170387 = temp_output_279_0_g170387;
				float4 localSampleStochastic2D234_g170387 = SampleStochastic2D( Texture234_g170387 , Sampler234_g170387 , Coords234_g170387 , WorldPosition234_g170387 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170387) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170387 = SS19_g170416;
				half4 Coords263_g170387 = temp_output_37_0_g170387;
				half3 WorldPosition263_g170387 = temp_output_279_0_g170387;
				half3 WorldNormal263_g170387 = temp_output_280_0_g170387;
				half4 localSampleStochastic3D263_g170387 = SampleStochastic3D( Texture263_g170387 , Sampler263_g170387 , Coords263_g170387 , WorldPosition263_g170387 , WorldNormal263_g170387 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170386 = localSampleMain276_g170387;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170386 = localSampleExtra275_g170387;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170386 = localSamplePlanar2D238_g170387;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170386 = localSamplePlanar3D246_g170387;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170386 = localSampleStochastic2D234_g170387;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170386 = localSampleStochastic3D263_g170387;
				#else
				float4 staticSwitch693_g170386 = localSampleMain276_g170387;
				#endif
				half4 Local_AlbedoTex777_g170386 = staticSwitch693_g170386;
				float3 lerpResult716_g170386 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170386).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170386 = lerpResult716_g170386;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170389) = _ThirdShaderTex;
				float localFilterTexture30_g170418 = ( 0.0 );
				SamplerState SamplerDefault30_g170418 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170418 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170418 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170418 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170418 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170418 = SamplerDefault30_g170418;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170418 = SamplerDefault30_g170418;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170418 = SamplerPoint30_g170418;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170418 = SamplerLow30_g170418;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170418 = SamplerMedium30_g170418;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170418 = SamplerHigh30_g170418;
				#endif
				SamplerState Sampler276_g170389 = SS30_g170418;
				float4 temp_output_37_0_g170389 = Local_LayerCoords790_g170386;
				half4 Coords276_g170389 = temp_output_37_0_g170389;
				half2 TexCoord276_g170389 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170389 = SampleMain( Texture276_g170389 , Sampler276_g170389 , Coords276_g170389 , TexCoord276_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170389) = _ThirdShaderTex;
				SamplerState Sampler275_g170389 = SS30_g170418;
				half4 Coords275_g170389 = temp_output_37_0_g170389;
				half2 TexCoord275_g170389 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170389 = SampleExtra( Texture275_g170389 , Sampler275_g170389 , Coords275_g170389 , TexCoord275_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170389) = _ThirdShaderTex;
				SamplerState Sampler238_g170389 = SS30_g170418;
				half4 Coords238_g170389 = temp_output_37_0_g170389;
				float3 temp_output_279_0_g170389 = Model_PositionWO636_g170386;
				half3 WorldPosition238_g170389 = temp_output_279_0_g170389;
				half4 localSamplePlanar2D238_g170389 = SamplePlanar2D( Texture238_g170389 , Sampler238_g170389 , Coords238_g170389 , WorldPosition238_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170389) = _ThirdShaderTex;
				SamplerState Sampler246_g170389 = SS30_g170418;
				half4 Coords246_g170389 = temp_output_37_0_g170389;
				half3 WorldPosition246_g170389 = temp_output_279_0_g170389;
				float3 temp_output_280_0_g170389 = Model_NormalWS869_g170386;
				half3 WorldNormal246_g170389 = temp_output_280_0_g170389;
				half4 localSamplePlanar3D246_g170389 = SamplePlanar3D( Texture246_g170389 , Sampler246_g170389 , Coords246_g170389 , WorldPosition246_g170389 , WorldNormal246_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170389) = _ThirdShaderTex;
				SamplerState Sampler234_g170389 = SS30_g170418;
				float4 Coords234_g170389 = temp_output_37_0_g170389;
				float3 WorldPosition234_g170389 = temp_output_279_0_g170389;
				float4 localSampleStochastic2D234_g170389 = SampleStochastic2D( Texture234_g170389 , Sampler234_g170389 , Coords234_g170389 , WorldPosition234_g170389 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170389) = _ThirdShaderTex;
				SamplerState Sampler263_g170389 = SS30_g170418;
				half4 Coords263_g170389 = temp_output_37_0_g170389;
				half3 WorldPosition263_g170389 = temp_output_279_0_g170389;
				half3 WorldNormal263_g170389 = temp_output_280_0_g170389;
				half4 localSampleStochastic3D263_g170389 = SampleStochastic3D( Texture263_g170389 , Sampler263_g170389 , Coords263_g170389 , WorldPosition263_g170389 , WorldNormal263_g170389 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170386 = localSampleMain276_g170389;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170386 = localSampleExtra275_g170389;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170386 = localSamplePlanar2D238_g170389;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170386 = localSamplePlanar3D246_g170389;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170386 = localSampleStochastic2D234_g170389;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170386 = localSampleStochastic3D263_g170389;
				#else
				float4 staticSwitch722_g170386 = localSampleMain276_g170389;
				#endif
				half4 Local_ShaderTex775_g170386 = staticSwitch722_g170386;
				float lerpResult739_g170386 = lerp( 1.0 , (Local_ShaderTex775_g170386).y , _ThirdOcclusionValue);
				float4 appendResult749_g170386 = (float4(( (Local_ShaderTex775_g170386).x * _ThirdMetallicValue ) , lerpResult739_g170386 , (Local_ShaderTex775_g170386).z , ( (Local_ShaderTex775_g170386).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170386 = appendResult749_g170386;
				float clampResult17_g170392 = clamp( (Local_Masks750_g170386).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170393 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170393 = ( _ThirdMultiRemap.y - temp_output_7_0_g170393 );
				float temp_output_765_0_g170386 = saturate( ( ( clampResult17_g170392 - temp_output_7_0_g170393 ) / ( temp_output_10_0_g170393 + 0.0001 ) ) );
				half Local_MultiMask767_g170386 = temp_output_765_0_g170386;
				float lerpResult705_g170386 = lerp( 1.0 , Local_MultiMask767_g170386 , _ThirdColorMode);
				float4 lerpResult706_g170386 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170386);
				half3 Local_ColorRGB774_g170386 = (lerpResult706_g170386).rgb;
				half3 Local_Albedo768_g170386 = ( Local_AlbedoRGB771_g170386 * Local_ColorRGB774_g170386 );
				#ifdef UNITY_COLORSPACE_GAMMA
				float staticSwitch1_g170410 = 2.0;
				#else
				float staticSwitch1_g170410 = 4.594794;
				#endif
				float3 lerpResult985_g170386 = lerp( Local_Albedo768_g170386 , ( Visual_Albedo527_g170386 * Local_Albedo768_g170386 * staticSwitch1_g170410 ) , _ThirdBlendAlbedoValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170413) = _ThirdMaskTex;
				SamplerState Sampler276_g170413 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170386 = _third_mask_coord_value;
				float4 temp_output_37_0_g170413 = Local_MaskCoords813_g170386;
				half4 Coords276_g170413 = temp_output_37_0_g170413;
				half2 TexCoord276_g170413 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170413 = SampleMain( Texture276_g170413 , Sampler276_g170413 , Coords276_g170413 , TexCoord276_g170413 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170413) = _ThirdMaskTex;
				SamplerState Sampler275_g170413 = sampler_Linear_Repeat;
				half4 Coords275_g170413 = temp_output_37_0_g170413;
				half2 TexCoord275_g170413 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170413 = SampleExtra( Texture275_g170413 , Sampler275_g170413 , Coords275_g170413 , TexCoord275_g170413 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170413) = _ThirdMaskTex;
				SamplerState Sampler238_g170413 = sampler_Linear_Repeat;
				half4 Coords238_g170413 = temp_output_37_0_g170413;
				float3 temp_output_279_0_g170413 = Model_PositionWO636_g170386;
				half3 WorldPosition238_g170413 = temp_output_279_0_g170413;
				half4 localSamplePlanar2D238_g170413 = SamplePlanar2D( Texture238_g170413 , Sampler238_g170413 , Coords238_g170413 , WorldPosition238_g170413 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170413) = _ThirdMaskTex;
				SamplerState Sampler246_g170413 = sampler_Linear_Repeat;
				half4 Coords246_g170413 = temp_output_37_0_g170413;
				half3 WorldPosition246_g170413 = temp_output_279_0_g170413;
				float3 temp_output_280_0_g170413 = Model_NormalWS869_g170386;
				half3 WorldNormal246_g170413 = temp_output_280_0_g170413;
				half4 localSamplePlanar3D246_g170413 = SamplePlanar3D( Texture246_g170413 , Sampler246_g170413 , Coords246_g170413 , WorldPosition246_g170413 , WorldNormal246_g170413 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170386 = localSampleMain276_g170413;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170386 = localSampleExtra275_g170413;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170386 = localSamplePlanar2D238_g170413;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170386 = localSamplePlanar3D246_g170413;
				#else
				float4 staticSwitch817_g170386 = localSampleMain276_g170413;
				#endif
				half4 Local_MaskTex861_g170386 = staticSwitch817_g170386;
				float clampResult17_g170397 = clamp( (Local_MaskTex861_g170386).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170398 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170398 = ( _ThirdMaskRemap.y - temp_output_7_0_g170398 );
				float lerpResult1028_g170386 = lerp( 1.0 , saturate( ( ( clampResult17_g170397 - temp_output_7_0_g170398 ) / ( temp_output_10_0_g170398 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170386 = lerpResult1028_g170386;
				half4 Model_VertexMasks960_g170386 = Out_VertexData15_g170414;
				float4 break961_g170386 = Model_VertexMasks960_g170386;
				float4 break33_g170401 = _third_vert_mode;
				float temp_output_30_0_g170401 = ( break961_g170386.x * break33_g170401.x );
				float temp_output_29_0_g170401 = ( break961_g170386.y * break33_g170401.y );
				float temp_output_31_0_g170401 = ( break961_g170386.z * break33_g170401.z );
				float temp_output_28_0_g170401 = ( temp_output_30_0_g170401 + temp_output_29_0_g170401 + temp_output_31_0_g170401 + ( break961_g170386.w * break33_g170401.w ) );
				float clampResult17_g170395 = clamp( temp_output_28_0_g170401 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170396 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170396 = ( _ThirdMeshRemap.y - temp_output_7_0_g170396 );
				float lerpResult1026_g170386 = lerp( 1.0 , saturate( ( ( clampResult17_g170395 - temp_output_7_0_g170396 ) / ( temp_output_10_0_g170396 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170412 = lerpResult1026_g170386;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170412 = ( temp_output_6_0_g170412 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170412 = temp_output_6_0_g170412;
				#endif
				float temp_output_992_0_g170386 = staticSwitch14_g170412;
				half Blend_VertMask913_g170386 = temp_output_992_0_g170386;
				half3 Visual_NormalWS953_g170386 = Out_NormalWS4_g170402;
				float clampResult17_g170399 = clamp( saturate( (Visual_NormalWS953_g170386).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170400 = _ThirdProjRemap.x;
				float temp_output_10_0_g170400 = ( _ThirdProjRemap.y - temp_output_7_0_g170400 );
				float lerpResult1004_g170386 = lerp( 1.0 , saturate( ( ( clampResult17_g170399 - temp_output_7_0_g170400 ) / ( temp_output_10_0_g170400 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170386 = lerpResult1004_g170386;
				TVEGlobalData Data15_g170404 = Data204_g170159;
				float Out_Dummy15_g170404 = 0;
				float4 Out_CoatParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170404 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170404 = float4( 0,0,0,0 );
				Out_Dummy15_g170404 = Data15_g170404.Dummy;
				Out_CoatParams15_g170404 = Data15_g170404.CoatParams;
				Out_PaintParams15_g170404 = Data15_g170404.PaintParams;
				Out_GlowParams15_g170404 = Data15_g170404.GlowParams;
				Out_AtmoParams15_g170404= Data15_g170404.AtmoParams;
				Out_FadeParams15_g170404= Data15_g170404.FadeParams;
				Out_FormParams15_g170404 = Data15_g170404.FormParams;
				Out_LandParams15_g170404 = Data15_g170404.LandParams;
				Out_WindParams15_g170404 = Data15_g170404.WindParams;
				Out_PushParams15_g170404 = Data15_g170404.PushParams;
				half4 Global_CoatParams972_g170386 = Out_CoatParams15_g170404;
				float lerpResult1023_g170386 = lerp( 1.0 , (Global_CoatParams972_g170386).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170386 = lerpResult1023_g170386;
				#else
				float staticSwitch965_g170386 = 1.0;
				#endif
				half Blend_GlobalMask968_g170386 = staticSwitch965_g170386;
				float temp_output_432_0_g170386 = ( _ThirdIntensityValue * Detail_TexMask429_g170386 * Blend_VertMask913_g170386 * Blend_ProjMask912_g170386 * Blend_GlobalMask968_g170386 );
				float clampResult17_g170406 = clamp( temp_output_432_0_g170386 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170405 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170405 = ( _ThirdBlendRemap.y - temp_output_7_0_g170405 );
				half Detail_Mask412_g170386 = ( saturate( ( ( clampResult17_g170406 - temp_output_7_0_g170405 ) / ( temp_output_10_0_g170405 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170386 = lerp( Visual_Albedo527_g170386 , lerpResult985_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170386 = lerpResult989_g170386;
				#else
				float3 staticSwitch415_g170386 = Visual_Albedo527_g170386;
				#endif
				half3 Final_Albedo601_g170386 = staticSwitch415_g170386;
				float3 In_Albedo3_g170403 = Final_Albedo601_g170386;
				half2 Visual_NormalTS529_g170386 = Out_NormalTS4_g170402;
				float2 lerpResult40_g170408 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170386 , _ThirdBlendNormalValue);
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170388) = _ThirdNormalTex;
				float localFilterTexture29_g170417 = ( 0.0 );
				SamplerState SamplerDefault29_g170417 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170417 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170417 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170417 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170417 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170417 = SamplerDefault29_g170417;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170417 = SamplerDefault29_g170417;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170417 = SamplerPoint29_g170417;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170417 = SamplerLow29_g170417;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170417 = SamplerMedium29_g170417;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170417 = SamplerHigh29_g170417;
				#endif
				SamplerState Sampler276_g170388 = SS29_g170417;
				float4 temp_output_37_0_g170388 = Local_LayerCoords790_g170386;
				half4 Coords276_g170388 = temp_output_37_0_g170388;
				half2 TexCoord276_g170388 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170388 = SampleMain( Texture276_g170388 , Sampler276_g170388 , Coords276_g170388 , TexCoord276_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170388) = _ThirdNormalTex;
				SamplerState Sampler275_g170388 = SS29_g170417;
				half4 Coords275_g170388 = temp_output_37_0_g170388;
				half2 TexCoord275_g170388 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170388 = SampleExtra( Texture275_g170388 , Sampler275_g170388 , Coords275_g170388 , TexCoord275_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170388) = _ThirdNormalTex;
				SamplerState Sampler238_g170388 = SS29_g170417;
				half4 Coords238_g170388 = temp_output_37_0_g170388;
				float3 temp_output_279_0_g170388 = Model_PositionWO636_g170386;
				half3 WorldPosition238_g170388 = temp_output_279_0_g170388;
				half4 localSamplePlanar2D238_g170388 = SamplePlanar2D( Texture238_g170388 , Sampler238_g170388 , Coords238_g170388 , WorldPosition238_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170388) = _ThirdNormalTex;
				SamplerState Sampler246_g170388 = SS29_g170417;
				half4 Coords246_g170388 = temp_output_37_0_g170388;
				half3 WorldPosition246_g170388 = temp_output_279_0_g170388;
				float3 temp_output_280_0_g170388 = Model_NormalWS869_g170386;
				half3 WorldNormal246_g170388 = temp_output_280_0_g170388;
				half4 localSamplePlanar3D246_g170388 = SamplePlanar3D( Texture246_g170388 , Sampler246_g170388 , Coords246_g170388 , WorldPosition246_g170388 , WorldNormal246_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170388) = _ThirdNormalTex;
				SamplerState Sampler234_g170388 = SS29_g170417;
				float4 Coords234_g170388 = temp_output_37_0_g170388;
				float3 WorldPosition234_g170388 = temp_output_279_0_g170388;
				float4 localSampleStochastic2D234_g170388 = SampleStochastic2D( Texture234_g170388 , Sampler234_g170388 , Coords234_g170388 , WorldPosition234_g170388 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170388) = _ThirdNormalTex;
				SamplerState Sampler263_g170388 = SS29_g170417;
				half4 Coords263_g170388 = temp_output_37_0_g170388;
				half3 WorldPosition263_g170388 = temp_output_279_0_g170388;
				half3 WorldNormal263_g170388 = temp_output_280_0_g170388;
				half4 localSampleStochastic3D263_g170388 = SampleStochastic3D( Texture263_g170388 , Sampler263_g170388 , Coords263_g170388 , WorldPosition263_g170388 , WorldNormal263_g170388 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170386 = localSampleMain276_g170388;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170386 = localSampleExtra275_g170388;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170386 = localSamplePlanar2D238_g170388;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170386 = localSamplePlanar3D246_g170388;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170386 = localSampleStochastic2D234_g170388;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170386 = localSampleStochastic3D263_g170388;
				#else
				float4 staticSwitch698_g170386 = localSampleMain276_g170388;
				#endif
				half4 Local_NormalTex776_g170386 = staticSwitch698_g170386;
				half4 Normal_Packed45_g170390 = Local_NormalTex776_g170386;
				float2 appendResult58_g170390 = (float2(( (Normal_Packed45_g170390).x * (Normal_Packed45_g170390).w ) , (Normal_Packed45_g170390).y));
				half2 Normal_Default50_g170390 = appendResult58_g170390;
				half2 Normal_ASTC41_g170390 = (Normal_Packed45_g170390).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170390 = Normal_ASTC41_g170390;
				#else
				float2 staticSwitch38_g170390 = Normal_Default50_g170390;
				#endif
				half2 Normal_NO_DTX544_g170390 = (Normal_Packed45_g170390).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170390 = Normal_NO_DTX544_g170390;
				#else
				float2 staticSwitch37_g170390 = staticSwitch38_g170390;
				#endif
				float2 temp_output_724_0_g170386 = ( (staticSwitch37_g170390*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170391 = temp_output_724_0_g170386;
				float2 break71_g170391 = Normal_Planar45_g170391;
				float3 appendResult72_g170391 = (float3(break71_g170391.x , 0.0 , break71_g170391.y));
				float2 temp_output_858_0_g170386 = (mul( ase_worldToTangent, appendResult72_g170391 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170386 = temp_output_724_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170386 = temp_output_724_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170386 = temp_output_858_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170386 = temp_output_858_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170386 = temp_output_858_0_g170386;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170386 = temp_output_858_0_g170386;
				#else
				float2 staticSwitch727_g170386 = temp_output_724_0_g170386;
				#endif
				half2 Local_NormalTS729_g170386 = staticSwitch727_g170386;
				float2 temp_output_36_0_g170408 = ( lerpResult40_g170408 + Local_NormalTS729_g170386 );
				float2 lerpResult405_g170386 = lerp( Visual_NormalTS529_g170386 , temp_output_36_0_g170408 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170386 = lerpResult405_g170386;
				#else
				float2 staticSwitch418_g170386 = Visual_NormalTS529_g170386;
				#endif
				half2 Final_NormalTS612_g170386 = staticSwitch418_g170386;
				float2 In_NormalTS3_g170403 = Final_NormalTS612_g170386;
				float3 appendResult68_g170409 = (float3(Final_NormalTS612_g170386 , 1.0));
				float3 tanNormal74_g170409 = appendResult68_g170409;
				float3 worldNormal74_g170409 = normalize( float3(dot(tanToWorld0,tanNormal74_g170409), dot(tanToWorld1,tanNormal74_g170409), dot(tanToWorld2,tanNormal74_g170409)) );
				half3 Final_NormalWS956_g170386 = worldNormal74_g170409;
				float3 In_NormalWS3_g170403 = Final_NormalWS956_g170386;
				half4 Visual_Shader531_g170386 = Out_Shader4_g170402;
				float4 lerpResult1000_g170386 = lerp( Local_Masks750_g170386 , ( Visual_Shader531_g170386 * Local_Masks750_g170386 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170386 = lerp( Visual_Shader531_g170386 , lerpResult1000_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170386 = lerpResult998_g170386;
				#else
				float4 staticSwitch451_g170386 = Visual_Shader531_g170386;
				#endif
				half4 Final_Masks613_g170386 = staticSwitch451_g170386;
				float4 In_Shader3_g170403 = Final_Masks613_g170386;
				float4 In_Emissive3_g170403 = Out_Emissive4_g170402;
				float3 temp_output_3_0_g170411 = Final_Albedo601_g170386;
				float dotResult20_g170411 = dot( temp_output_3_0_g170411 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170386 = dotResult20_g170411;
				float In_Grayscale3_g170403 = Final_Grayscale615_g170386;
				float clampResult651_g170386 = clamp( saturate( ( Final_Grayscale615_g170386 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170386 = clampResult651_g170386;
				float In_Luminosity3_g170403 = Final_Luminosity652_g170386;
				half Visual_MultiMask547_g170386 = Out_MultiMask4_g170402;
				float lerpResult477_g170386 = lerp( Visual_MultiMask547_g170386 , Local_MultiMask767_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float staticSwitch482_g170386 = lerpResult477_g170386;
				#else
				float staticSwitch482_g170386 = Visual_MultiMask547_g170386;
				#endif
				half Final_MultiMask572_g170386 = staticSwitch482_g170386;
				float In_MultiMask3_g170403 = Final_MultiMask572_g170386;
				half Visual_AlphaClip559_g170386 = Out_AlphaClip4_g170402;
				float temp_output_718_0_g170386 = (Local_AlbedoTex777_g170386).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170386 = ( temp_output_718_0_g170386 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170386 = temp_output_718_0_g170386;
				#endif
				half Local_AlphaClip772_g170386 = staticSwitch924_g170386;
				float lerpResult448_g170386 = lerp( Visual_AlphaClip559_g170386 , Local_AlphaClip772_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float staticSwitch564_g170386 = lerpResult448_g170386;
				#else
				float staticSwitch564_g170386 = Visual_AlphaClip559_g170386;
				#endif
				half Final_AlphaClip602_g170386 = staticSwitch564_g170386;
				float In_AlphaClip3_g170403 = Final_AlphaClip602_g170386;
				half Visual_AlphaFade588_g170386 = Out_AlphaFade4_g170402;
				half Local_AlphaFade773_g170386 = (lerpResult706_g170386).a;
				float lerpResult604_g170386 = lerp( Visual_AlphaFade588_g170386 , Local_AlphaFade773_g170386 , Detail_Mask412_g170386);
				#ifdef TVE_THIRD
				float staticSwitch608_g170386 = lerpResult604_g170386;
				#else
				float staticSwitch608_g170386 = Visual_AlphaFade588_g170386;
				#endif
				half Final_AlphaFade611_g170386 = staticSwitch608_g170386;
				float In_AlphaFade3_g170403 = Final_AlphaFade611_g170386;
				float3 In_Translucency3_g170403 = Out_Translucency4_g170402;
				float In_Transmission3_g170403 = Out_Transmission4_g170402;
				float In_Thickness3_g170403 = Out_Thickness4_g170402;
				float In_Diffusion3_g170403 = Out_Diffusion4_g170402;
				Data3_g170403.Dummy = In_Dummy3_g170403;
				Data3_g170403.Albedo = In_Albedo3_g170403;
				Data3_g170403.NormalTS = In_NormalTS3_g170403;
				Data3_g170403.NormalWS = In_NormalWS3_g170403;
				Data3_g170403.Shader = In_Shader3_g170403;
				Data3_g170403.Emissive= In_Emissive3_g170403;
				Data3_g170403.MultiMask = In_MultiMask3_g170403;
				Data3_g170403.Grayscale = In_Grayscale3_g170403;
				Data3_g170403.Luminosity = In_Luminosity3_g170403;
				Data3_g170403.AlphaClip = In_AlphaClip3_g170403;
				Data3_g170403.AlphaFade = In_AlphaFade3_g170403;
				Data3_g170403.Translucency = In_Translucency3_g170403;
				Data3_g170403.Transmission = In_Transmission3_g170403;
				Data3_g170403.Thickness = In_Thickness3_g170403;
				Data3_g170403.Diffusion = In_Diffusion3_g170403;
				TVEVisualData Data4_g170421 = Data3_g170403;
				float Out_Dummy4_g170421 = 0;
				float3 Out_Albedo4_g170421 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170421 = float2( 0,0 );
				float3 Out_NormalWS4_g170421 = float3( 0,0,0 );
				float4 Out_Shader4_g170421 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170421 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170421 = 0;
				float Out_Grayscale4_g170421 = 0;
				float Out_Luminosity4_g170421 = 0;
				float Out_AlphaClip4_g170421 = 0;
				float Out_AlphaFade4_g170421 = 0;
				float3 Out_Translucency4_g170421 = float3( 0,0,0 );
				float Out_Transmission4_g170421 = 0;
				float Out_Thickness4_g170421 = 0;
				float Out_Diffusion4_g170421 = 0;
				Out_Dummy4_g170421 = Data4_g170421.Dummy;
				Out_Albedo4_g170421 = Data4_g170421.Albedo;
				Out_NormalTS4_g170421 = Data4_g170421.NormalTS;
				Out_NormalWS4_g170421 = Data4_g170421.NormalWS;
				Out_Shader4_g170421 = Data4_g170421.Shader;
				Out_Emissive4_g170421= Data4_g170421.Emissive;
				Out_MultiMask4_g170421 = Data4_g170421.MultiMask;
				Out_Grayscale4_g170421 = Data4_g170421.Grayscale;
				Out_Luminosity4_g170421= Data4_g170421.Luminosity;
				Out_AlphaClip4_g170421 = Data4_g170421.AlphaClip;
				Out_AlphaFade4_g170421 = Data4_g170421.AlphaFade;
				Out_Translucency4_g170421 = Data4_g170421.Translucency;
				Out_Transmission4_g170421 = Data4_g170421.Transmission;
				Out_Thickness4_g170421 = Data4_g170421.Thickness;
				Out_Diffusion4_g170421 = Data4_g170421.Diffusion;
				half3 Visual_Albedo127_g170420 = Out_Albedo4_g170421;
				TVEModelData Data15_g170423 = Data16_g170157;
				float Out_Dummy15_g170423 = 0;
				float3 Out_PositionOS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170423 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170423 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170423 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170423 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170423 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170423 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170423 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170423 = float3( 0,0,0 );
				float4 Out_VertexData15_g170423 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170423 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170423 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170423 = float4( 0,0,0,0 );
				Out_Dummy15_g170423 = Data15_g170423.Dummy;
				Out_PositionOS15_g170423 = Data15_g170423.PositionOS;
				Out_PositionWS15_g170423 = Data15_g170423.PositionWS;
				Out_PositionWO15_g170423 = Data15_g170423.PositionWO;
				Out_PositionRawOS15_g170423 = Data15_g170423.PositionRawOS;
				Out_PositionAddOS15_g170423 = Data15_g170423.PositionAddOS;
				Out_PivotOS15_g170423 = Data15_g170423.PivotOS;
				Out_PivotWS15_g170423 = Data15_g170423.PivotWS;
				Out_PivotWO15_g170423 = Data15_g170423.PivotWO;
				Out_NormalOS15_g170423 = Data15_g170423.NormalOS;
				Out_NormalWS15_g170423 = Data15_g170423.NormalWS;
				Out_NormalRawOS15_g170423 = Data15_g170423.NormalRawOS;
				Out_NormalRawWS15_g170423 = Data15_g170423.NormalRawWS;
				Out_TangentOS15_g170423 = Data15_g170423.TangentOS;
				Out_ViewDirWS15_g170423 = Data15_g170423.ViewDirWS;
				Out_VertexData15_g170423 = Data15_g170423.VertexData;
				Out_MotionData15_g170423 = Data15_g170423.MotionData;
				Out_BoundsData15_g170423 = Data15_g170423.BoundsData;
				Out_RotationData15_g170423 = Data15_g170423.RotationData;
				half4 Model_VertexData206_g170420 = Out_VertexData15_g170423;
				float4 break208_g170420 = Model_VertexData206_g170420;
				float4 break33_g170428 = _occlusion_vert_mode;
				float temp_output_30_0_g170428 = ( break208_g170420.x * break33_g170428.x );
				float temp_output_29_0_g170428 = ( break208_g170420.y * break33_g170428.y );
				float temp_output_31_0_g170428 = ( break208_g170420.z * break33_g170428.z );
				float temp_output_28_0_g170428 = ( temp_output_30_0_g170428 + temp_output_29_0_g170428 + temp_output_31_0_g170428 + ( break208_g170420.w * break33_g170428.w ) );
				float temp_output_194_0_g170420 = temp_output_28_0_g170428;
				float clampResult17_g170426 = clamp( temp_output_194_0_g170420 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170425 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170425 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170425 );
				float temp_output_6_0_g170427 = saturate( ( ( clampResult17_g170426 - temp_output_7_0_g170425 ) / ( temp_output_10_0_g170425 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170427 = ( temp_output_6_0_g170427 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170427 = temp_output_6_0_g170427;
				#endif
				half Occlusion_Mask82_g170420 = staticSwitch14_g170427;
				float3 lerpResult75_g170420 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170420);
				float3 lerpResult186_g170420 = lerp( Visual_Albedo127_g170420 , ( Visual_Albedo127_g170420 * lerpResult75_g170420 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170420 = lerpResult186_g170420;
				#else
				float3 staticSwitch171_g170420 = Visual_Albedo127_g170420;
				#endif
				half3 Final_Albedo160_g170420 = staticSwitch171_g170420;
				float3 In_Albedo3_g170422 = Final_Albedo160_g170420;
				float2 In_NormalTS3_g170422 = Out_NormalTS4_g170421;
				float3 In_NormalWS3_g170422 = Out_NormalWS4_g170421;
				float4 In_Shader3_g170422 = Out_Shader4_g170421;
				float4 In_Emissive3_g170422 = Out_Emissive4_g170421;
				float3 temp_output_3_0_g170424 = Final_Albedo160_g170420;
				float dotResult20_g170424 = dot( temp_output_3_0_g170424 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170420 = dotResult20_g170424;
				float In_Grayscale3_g170422 = Final_Grayscale164_g170420;
				float clampResult180_g170420 = clamp( saturate( ( Final_Grayscale164_g170420 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170420 = clampResult180_g170420;
				float In_Luminosity3_g170422 = Final_Shading181_g170420;
				float In_MultiMask3_g170422 = Out_MultiMask4_g170421;
				float In_AlphaClip3_g170422 = Out_AlphaClip4_g170421;
				float In_AlphaFade3_g170422 = Out_AlphaFade4_g170421;
				float3 In_Translucency3_g170422 = Out_Translucency4_g170421;
				float In_Transmission3_g170422 = Out_Transmission4_g170421;
				float In_Thickness3_g170422 = Out_Thickness4_g170421;
				float In_Diffusion3_g170422 = Out_Diffusion4_g170421;
				Data3_g170422.Dummy = In_Dummy3_g170422;
				Data3_g170422.Albedo = In_Albedo3_g170422;
				Data3_g170422.NormalTS = In_NormalTS3_g170422;
				Data3_g170422.NormalWS = In_NormalWS3_g170422;
				Data3_g170422.Shader = In_Shader3_g170422;
				Data3_g170422.Emissive= In_Emissive3_g170422;
				Data3_g170422.MultiMask = In_MultiMask3_g170422;
				Data3_g170422.Grayscale = In_Grayscale3_g170422;
				Data3_g170422.Luminosity = In_Luminosity3_g170422;
				Data3_g170422.AlphaClip = In_AlphaClip3_g170422;
				Data3_g170422.AlphaFade = In_AlphaFade3_g170422;
				Data3_g170422.Translucency = In_Translucency3_g170422;
				Data3_g170422.Transmission = In_Transmission3_g170422;
				Data3_g170422.Thickness = In_Thickness3_g170422;
				Data3_g170422.Diffusion = In_Diffusion3_g170422;
				TVEVisualData Data4_g170433 = Data3_g170422;
				float Out_Dummy4_g170433 = 0;
				float3 Out_Albedo4_g170433 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170433 = float2( 0,0 );
				float3 Out_NormalWS4_g170433 = float3( 0,0,0 );
				float4 Out_Shader4_g170433 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170433 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170433 = 0;
				float Out_Grayscale4_g170433 = 0;
				float Out_Luminosity4_g170433 = 0;
				float Out_AlphaClip4_g170433 = 0;
				float Out_AlphaFade4_g170433 = 0;
				float3 Out_Translucency4_g170433 = float3( 0,0,0 );
				float Out_Transmission4_g170433 = 0;
				float Out_Thickness4_g170433 = 0;
				float Out_Diffusion4_g170433 = 0;
				Out_Dummy4_g170433 = Data4_g170433.Dummy;
				Out_Albedo4_g170433 = Data4_g170433.Albedo;
				Out_NormalTS4_g170433 = Data4_g170433.NormalTS;
				Out_NormalWS4_g170433 = Data4_g170433.NormalWS;
				Out_Shader4_g170433 = Data4_g170433.Shader;
				Out_Emissive4_g170433= Data4_g170433.Emissive;
				Out_MultiMask4_g170433 = Data4_g170433.MultiMask;
				Out_Grayscale4_g170433 = Data4_g170433.Grayscale;
				Out_Luminosity4_g170433= Data4_g170433.Luminosity;
				Out_AlphaClip4_g170433 = Data4_g170433.AlphaClip;
				Out_AlphaFade4_g170433 = Data4_g170433.AlphaFade;
				Out_Translucency4_g170433 = Data4_g170433.Translucency;
				Out_Transmission4_g170433 = Data4_g170433.Transmission;
				Out_Thickness4_g170433 = Data4_g170433.Thickness;
				Out_Diffusion4_g170433 = Data4_g170433.Diffusion;
				half3 Visual_Albedo127_g170430 = Out_Albedo4_g170433;
				TVEModelData Data15_g170431 = Data16_g170157;
				float Out_Dummy15_g170431 = 0;
				float3 Out_PositionOS15_g170431 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170431 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170431 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170431 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170431 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170431 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170431 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170431 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170431 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170431 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170431 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170431 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170431 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170431 = float3( 0,0,0 );
				float4 Out_VertexData15_g170431 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170431 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170431 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170431 = float4( 0,0,0,0 );
				Out_Dummy15_g170431 = Data15_g170431.Dummy;
				Out_PositionOS15_g170431 = Data15_g170431.PositionOS;
				Out_PositionWS15_g170431 = Data15_g170431.PositionWS;
				Out_PositionWO15_g170431 = Data15_g170431.PositionWO;
				Out_PositionRawOS15_g170431 = Data15_g170431.PositionRawOS;
				Out_PositionAddOS15_g170431 = Data15_g170431.PositionAddOS;
				Out_PivotOS15_g170431 = Data15_g170431.PivotOS;
				Out_PivotWS15_g170431 = Data15_g170431.PivotWS;
				Out_PivotWO15_g170431 = Data15_g170431.PivotWO;
				Out_NormalOS15_g170431 = Data15_g170431.NormalOS;
				Out_NormalWS15_g170431 = Data15_g170431.NormalWS;
				Out_NormalRawOS15_g170431 = Data15_g170431.NormalRawOS;
				Out_NormalRawWS15_g170431 = Data15_g170431.NormalRawWS;
				Out_TangentOS15_g170431 = Data15_g170431.TangentOS;
				Out_ViewDirWS15_g170431 = Data15_g170431.ViewDirWS;
				Out_VertexData15_g170431 = Data15_g170431.VertexData;
				Out_MotionData15_g170431 = Data15_g170431.MotionData;
				Out_BoundsData15_g170431 = Data15_g170431.BoundsData;
				Out_RotationData15_g170431 = Data15_g170431.RotationData;
				half4 Model_VertexData224_g170430 = Out_VertexData15_g170431;
				float4 break226_g170430 = Model_VertexData224_g170430;
				float4 break33_g170432 = _gradient_vert_mode;
				float temp_output_30_0_g170432 = ( break226_g170430.x * break33_g170432.x );
				float temp_output_29_0_g170432 = ( break226_g170430.y * break33_g170432.y );
				float temp_output_31_0_g170432 = ( break226_g170430.z * break33_g170432.z );
				float temp_output_28_0_g170432 = ( temp_output_30_0_g170432 + temp_output_29_0_g170432 + temp_output_31_0_g170432 + ( break226_g170430.w * break33_g170432.w ) );
				float temp_output_211_0_g170430 = temp_output_28_0_g170432;
				float clampResult17_g170437 = clamp( temp_output_211_0_g170430 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _GradientMeshRemap.x;
				float temp_output_10_0_g170438 = ( _GradientMeshRemap.y - temp_output_7_0_g170438 );
				float temp_output_6_0_g170439 = saturate( ( ( clampResult17_g170437 - temp_output_7_0_g170438 ) / ( temp_output_10_0_g170438 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170439 = ( temp_output_6_0_g170439 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170439 = temp_output_6_0_g170439;
				#endif
				half Gradient_VertMask82_g170430 = staticSwitch14_g170439;
				half Gradient_Mask200_g170430 = Gradient_VertMask82_g170430;
				float3 lerpResult75_g170430 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170430);
				float temp_output_162_11_g170430 = Out_MultiMask4_g170433;
				half Visual_MultiMask196_g170430 = temp_output_162_11_g170430;
				float lerpResult190_g170430 = lerp( 1.0 , Visual_MultiMask196_g170430 , _GradientMultiValue);
				half Gradient_MultiMask194_g170430 = lerpResult190_g170430;
				float3 lerpResult186_g170430 = lerp( Visual_Albedo127_g170430 , ( Visual_Albedo127_g170430 * lerpResult75_g170430 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170430 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170430 = lerpResult186_g170430;
				#else
				float3 staticSwitch171_g170430 = Visual_Albedo127_g170430;
				#endif
				half3 Final_Albedo160_g170430 = staticSwitch171_g170430;
				float3 In_Albedo3_g170434 = Final_Albedo160_g170430;
				float2 In_NormalTS3_g170434 = Out_NormalTS4_g170433;
				float3 In_NormalWS3_g170434 = Out_NormalWS4_g170433;
				float4 In_Shader3_g170434 = Out_Shader4_g170433;
				float4 In_Emissive3_g170434 = Out_Emissive4_g170433;
				float3 temp_output_3_0_g170435 = Final_Albedo160_g170430;
				float dotResult20_g170435 = dot( temp_output_3_0_g170435 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170430 = dotResult20_g170435;
				float In_Grayscale3_g170434 = Final_Grayscale164_g170430;
				float clampResult180_g170430 = clamp( saturate( ( Final_Grayscale164_g170430 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170430 = clampResult180_g170430;
				float In_Luminosity3_g170434 = Final_Luminosity181_g170430;
				float In_MultiMask3_g170434 = temp_output_162_11_g170430;
				float In_AlphaClip3_g170434 = Out_AlphaClip4_g170433;
				float In_AlphaFade3_g170434 = Out_AlphaFade4_g170433;
				float3 In_Translucency3_g170434 = Out_Translucency4_g170433;
				float In_Transmission3_g170434 = Out_Transmission4_g170433;
				float In_Thickness3_g170434 = Out_Thickness4_g170433;
				float In_Diffusion3_g170434 = Out_Diffusion4_g170433;
				Data3_g170434.Dummy = In_Dummy3_g170434;
				Data3_g170434.Albedo = In_Albedo3_g170434;
				Data3_g170434.NormalTS = In_NormalTS3_g170434;
				Data3_g170434.NormalWS = In_NormalWS3_g170434;
				Data3_g170434.Shader = In_Shader3_g170434;
				Data3_g170434.Emissive= In_Emissive3_g170434;
				Data3_g170434.MultiMask = In_MultiMask3_g170434;
				Data3_g170434.Grayscale = In_Grayscale3_g170434;
				Data3_g170434.Luminosity = In_Luminosity3_g170434;
				Data3_g170434.AlphaClip = In_AlphaClip3_g170434;
				Data3_g170434.AlphaFade = In_AlphaFade3_g170434;
				Data3_g170434.Translucency = In_Translucency3_g170434;
				Data3_g170434.Transmission = In_Transmission3_g170434;
				Data3_g170434.Thickness = In_Thickness3_g170434;
				Data3_g170434.Diffusion = In_Diffusion3_g170434;
				TVEVisualData Data4_g170441 = Data3_g170434;
				float Out_Dummy4_g170441 = 0;
				float3 Out_Albedo4_g170441 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170441 = float2( 0,0 );
				float3 Out_NormalWS4_g170441 = float3( 0,0,0 );
				float4 Out_Shader4_g170441 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170441 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170441 = 0;
				float Out_Grayscale4_g170441 = 0;
				float Out_Luminosity4_g170441 = 0;
				float Out_AlphaClip4_g170441 = 0;
				float Out_AlphaFade4_g170441 = 0;
				float3 Out_Translucency4_g170441 = float3( 0,0,0 );
				float Out_Transmission4_g170441 = 0;
				float Out_Thickness4_g170441 = 0;
				float Out_Diffusion4_g170441 = 0;
				Out_Dummy4_g170441 = Data4_g170441.Dummy;
				Out_Albedo4_g170441 = Data4_g170441.Albedo;
				Out_NormalTS4_g170441 = Data4_g170441.NormalTS;
				Out_NormalWS4_g170441 = Data4_g170441.NormalWS;
				Out_Shader4_g170441 = Data4_g170441.Shader;
				Out_Emissive4_g170441= Data4_g170441.Emissive;
				Out_MultiMask4_g170441 = Data4_g170441.MultiMask;
				Out_Grayscale4_g170441 = Data4_g170441.Grayscale;
				Out_Luminosity4_g170441= Data4_g170441.Luminosity;
				Out_AlphaClip4_g170441 = Data4_g170441.AlphaClip;
				Out_AlphaFade4_g170441 = Data4_g170441.AlphaFade;
				Out_Translucency4_g170441 = Data4_g170441.Translucency;
				Out_Transmission4_g170441 = Data4_g170441.Transmission;
				Out_Thickness4_g170441 = Data4_g170441.Thickness;
				Out_Diffusion4_g170441 = Data4_g170441.Diffusion;
				half3 Visual_Albedo127_g170440 = Out_Albedo4_g170441;
				float4 vertexToFrag24_g170419 = IN.ase_texcoord9;
				half4 Interp_Data2469 = vertexToFrag24_g170419;
				float clampResult208_g170440 = clamp( (Interp_Data2469).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170440 = ( Visual_Albedo127_g170440 + ( ( Visual_Albedo127_g170440 * Visual_Albedo127_g170440 * 200.0 * _motion_highlight_color ) * clampResult208_g170440 ) );
				#else
				float3 staticSwitch214_g170440 = Visual_Albedo127_g170440;
				#endif
				half3 Final_Albedo160_g170440 = staticSwitch214_g170440;
				float3 In_Albedo3_g170442 = Final_Albedo160_g170440;
				float2 In_NormalTS3_g170442 = Out_NormalTS4_g170441;
				float3 In_NormalWS3_g170442 = Out_NormalWS4_g170441;
				float4 In_Shader3_g170442 = Out_Shader4_g170441;
				float4 In_Emissive3_g170442 = Out_Emissive4_g170441;
				float In_Grayscale3_g170442 = Out_Grayscale4_g170441;
				float In_Luminosity3_g170442 = Out_Luminosity4_g170441;
				float In_MultiMask3_g170442 = Out_MultiMask4_g170441;
				float In_AlphaClip3_g170442 = Out_AlphaClip4_g170441;
				float In_AlphaFade3_g170442 = Out_AlphaFade4_g170441;
				float3 In_Translucency3_g170442 = Out_Translucency4_g170441;
				float In_Transmission3_g170442 = Out_Transmission4_g170441;
				float In_Thickness3_g170442 = Out_Thickness4_g170441;
				float In_Diffusion3_g170442 = Out_Diffusion4_g170441;
				Data3_g170442.Dummy = In_Dummy3_g170442;
				Data3_g170442.Albedo = In_Albedo3_g170442;
				Data3_g170442.NormalTS = In_NormalTS3_g170442;
				Data3_g170442.NormalWS = In_NormalWS3_g170442;
				Data3_g170442.Shader = In_Shader3_g170442;
				Data3_g170442.Emissive= In_Emissive3_g170442;
				Data3_g170442.MultiMask = In_MultiMask3_g170442;
				Data3_g170442.Grayscale = In_Grayscale3_g170442;
				Data3_g170442.Luminosity = In_Luminosity3_g170442;
				Data3_g170442.AlphaClip = In_AlphaClip3_g170442;
				Data3_g170442.AlphaFade = In_AlphaFade3_g170442;
				Data3_g170442.Translucency = In_Translucency3_g170442;
				Data3_g170442.Transmission = In_Transmission3_g170442;
				Data3_g170442.Thickness = In_Thickness3_g170442;
				Data3_g170442.Diffusion = In_Diffusion3_g170442;
				TVEVisualData Data4_g170444 = Data3_g170442;
				float Out_Dummy4_g170444 = 0;
				float3 Out_Albedo4_g170444 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170444 = float2( 0,0 );
				float3 Out_NormalWS4_g170444 = float3( 0,0,0 );
				float4 Out_Shader4_g170444 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170444 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170444 = 0;
				float Out_Grayscale4_g170444 = 0;
				float Out_Luminosity4_g170444 = 0;
				float Out_AlphaClip4_g170444 = 0;
				float Out_AlphaFade4_g170444 = 0;
				float3 Out_Translucency4_g170444 = float3( 0,0,0 );
				float Out_Transmission4_g170444 = 0;
				float Out_Thickness4_g170444 = 0;
				float Out_Diffusion4_g170444 = 0;
				Out_Dummy4_g170444 = Data4_g170444.Dummy;
				Out_Albedo4_g170444 = Data4_g170444.Albedo;
				Out_NormalTS4_g170444 = Data4_g170444.NormalTS;
				Out_NormalWS4_g170444 = Data4_g170444.NormalWS;
				Out_Shader4_g170444 = Data4_g170444.Shader;
				Out_Emissive4_g170444= Data4_g170444.Emissive;
				Out_MultiMask4_g170444 = Data4_g170444.MultiMask;
				Out_Grayscale4_g170444 = Data4_g170444.Grayscale;
				Out_Luminosity4_g170444= Data4_g170444.Luminosity;
				Out_AlphaClip4_g170444 = Data4_g170444.AlphaClip;
				Out_AlphaFade4_g170444 = Data4_g170444.AlphaFade;
				Out_Translucency4_g170444 = Data4_g170444.Translucency;
				Out_Transmission4_g170444 = Data4_g170444.Transmission;
				Out_Thickness4_g170444 = Data4_g170444.Thickness;
				Out_Diffusion4_g170444 = Data4_g170444.Diffusion;
				half3 Visual_Albedo127_g170443 = Out_Albedo4_g170444;
				float3 temp_output_622_0_g170443 = (_OverlayColor).rgb;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170447) = _OverlayAlbedoTex;
				float localFilterTexture19_g170472 = ( 0.0 );
				SamplerState SamplerDefault19_g170472 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170472 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170472 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170472 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170472 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170472 = SamplerDefault19_g170472;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170472 = SamplerDefault19_g170472;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170472 = SamplerPoint19_g170472;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170472 = SamplerLow19_g170472;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170472 = SamplerMedium19_g170472;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170472 = SamplerHigh19_g170472;
				#endif
				SamplerState Sampler238_g170447 = SS19_g170472;
				float4 temp_output_6_0_g170450 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170450 = ( temp_output_6_0_g170450 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170450 = temp_output_6_0_g170450;
				#endif
				half4 Overlay_Coords639_g170443 = staticSwitch14_g170450;
				float4 temp_output_37_0_g170447 = Overlay_Coords639_g170443;
				half4 Coords238_g170447 = temp_output_37_0_g170447;
				TVEModelData Data15_g170451 = Data16_g170157;
				float Out_Dummy15_g170451 = 0;
				float3 Out_PositionOS15_g170451 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170451 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170451 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170451 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170451 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170451 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170451 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170451 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170451 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170451 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170451 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170451 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170451 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170451 = float3( 0,0,0 );
				float4 Out_VertexData15_g170451 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170451 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170451 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170451 = float4( 0,0,0,0 );
				Out_Dummy15_g170451 = Data15_g170451.Dummy;
				Out_PositionOS15_g170451 = Data15_g170451.PositionOS;
				Out_PositionWS15_g170451 = Data15_g170451.PositionWS;
				Out_PositionWO15_g170451 = Data15_g170451.PositionWO;
				Out_PositionRawOS15_g170451 = Data15_g170451.PositionRawOS;
				Out_PositionAddOS15_g170451 = Data15_g170451.PositionAddOS;
				Out_PivotOS15_g170451 = Data15_g170451.PivotOS;
				Out_PivotWS15_g170451 = Data15_g170451.PivotWS;
				Out_PivotWO15_g170451 = Data15_g170451.PivotWO;
				Out_NormalOS15_g170451 = Data15_g170451.NormalOS;
				Out_NormalWS15_g170451 = Data15_g170451.NormalWS;
				Out_NormalRawOS15_g170451 = Data15_g170451.NormalRawOS;
				Out_NormalRawWS15_g170451 = Data15_g170451.NormalRawWS;
				Out_TangentOS15_g170451 = Data15_g170451.TangentOS;
				Out_ViewDirWS15_g170451 = Data15_g170451.ViewDirWS;
				Out_VertexData15_g170451 = Data15_g170451.VertexData;
				Out_MotionData15_g170451 = Data15_g170451.MotionData;
				Out_BoundsData15_g170451 = Data15_g170451.BoundsData;
				Out_RotationData15_g170451 = Data15_g170451.RotationData;
				half3 Model_PositionWO602_g170443 = Out_PositionWO15_g170451;
				float3 temp_output_279_0_g170447 = Model_PositionWO602_g170443;
				half3 WorldPosition238_g170447 = temp_output_279_0_g170447;
				half4 localSamplePlanar2D238_g170447 = SamplePlanar2D( Texture238_g170447 , Sampler238_g170447 , Coords238_g170447 , WorldPosition238_g170447 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170447) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170447 = SS19_g170472;
				half4 Coords246_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition246_g170447 = temp_output_279_0_g170447;
				half3 Model_NormalWS712_g170443 = Out_NormalWS15_g170451;
				float3 temp_output_280_0_g170447 = Model_NormalWS712_g170443;
				half3 WorldNormal246_g170447 = temp_output_280_0_g170447;
				half4 localSamplePlanar3D246_g170447 = SamplePlanar3D( Texture246_g170447 , Sampler246_g170447 , Coords246_g170447 , WorldPosition246_g170447 , WorldNormal246_g170447 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170447) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170447 = SS19_g170472;
				float4 Coords234_g170447 = temp_output_37_0_g170447;
				float3 WorldPosition234_g170447 = temp_output_279_0_g170447;
				float4 localSampleStochastic2D234_g170447 = SampleStochastic2D( Texture234_g170447 , Sampler234_g170447 , Coords234_g170447 , WorldPosition234_g170447 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170447) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170447 = SS19_g170472;
				half4 Coords263_g170447 = temp_output_37_0_g170447;
				half3 WorldPosition263_g170447 = temp_output_279_0_g170447;
				half3 WorldNormal263_g170447 = temp_output_280_0_g170447;
				half4 localSampleStochastic3D263_g170447 = SampleStochastic3D( Texture263_g170447 , Sampler263_g170447 , Coords263_g170447 , WorldPosition263_g170447 , WorldNormal263_g170447 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170443 = localSamplePlanar2D238_g170447;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170443 = localSamplePlanar3D246_g170447;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170443 = localSampleStochastic2D234_g170447;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170443 = localSampleStochastic3D263_g170447;
				#else
				float4 staticSwitch676_g170443 = localSamplePlanar2D238_g170447;
				#endif
				half3 Overlay_Albedo526_g170443 = (staticSwitch676_g170443).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170443 = ( temp_output_622_0_g170443 * Overlay_Albedo526_g170443 );
				#else
				float3 staticSwitch578_g170443 = temp_output_622_0_g170443;
				#endif
				float3 temp_output_6_0_g170466 = staticSwitch578_g170443;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170466 = ( temp_output_6_0_g170466 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170466 = temp_output_6_0_g170466;
				#endif
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170453) = _OverlayMaskTex;
				SamplerState Sampler276_g170453 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170454 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170454 = ( temp_output_6_0_g170454 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170454 = temp_output_6_0_g170454;
				#endif
				half4 Local_MaskCoords886_g170443 = staticSwitch14_g170454;
				float4 temp_output_37_0_g170453 = Local_MaskCoords886_g170443;
				half4 Coords276_g170453 = temp_output_37_0_g170453;
				half2 TexCoord276_g170453 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170453 = SampleMain( Texture276_g170453 , Sampler276_g170453 , Coords276_g170453 , TexCoord276_g170453 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170453) = _OverlayMaskTex;
				SamplerState Sampler275_g170453 = sampler_Linear_Repeat;
				half4 Coords275_g170453 = temp_output_37_0_g170453;
				half2 TexCoord275_g170453 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170453 = SampleExtra( Texture275_g170453 , Sampler275_g170453 , Coords275_g170453 , TexCoord275_g170453 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170443 = localSampleMain276_g170453;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170443 = localSampleExtra275_g170453;
				#else
				float4 staticSwitch894_g170443 = localSampleMain276_g170453;
				#endif
				half4 Local_MaskTex885_g170443 = staticSwitch894_g170443;
				float clampResult17_g170468 = clamp( (Local_MaskTex885_g170443).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170469 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170469 = ( _OverlayMaskRemap.y - temp_output_7_0_g170469 );
				float lerpResult898_g170443 = lerp( 1.0 , saturate( ( ( clampResult17_g170468 - temp_output_7_0_g170469 ) / ( temp_output_10_0_g170469 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask906_g170443 = lerpResult898_g170443;
				float3 temp_output_739_21_g170443 = Out_NormalWS4_g170444;
				half3 Visual_NormalWS749_g170443 = temp_output_739_21_g170443;
				float clampResult17_g170463 = clamp( saturate( (Visual_NormalWS749_g170443).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170462 = _OverlayProjRemap.x;
				float temp_output_10_0_g170462 = ( _OverlayProjRemap.y - temp_output_7_0_g170462 );
				float lerpResult842_g170443 = lerp( 1.0 , saturate( ( ( clampResult17_g170463 - temp_output_7_0_g170462 ) / ( temp_output_10_0_g170462 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170443 = lerpResult842_g170443;
				float temp_output_739_15_g170443 = Out_Luminosity4_g170444;
				half Visual_Luminosity654_g170443 = temp_output_739_15_g170443;
				float clampResult17_g170465 = clamp( Visual_Luminosity654_g170443 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170464 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170464 = ( _OverlayLumaRemap.y - temp_output_7_0_g170464 );
				float lerpResult587_g170443 = lerp( 1.0 , saturate( ( ( clampResult17_g170465 - temp_output_7_0_g170464 ) / ( temp_output_10_0_g170464 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170443 = lerpResult587_g170443;
				half4 Model_VertexMasks791_g170443 = Out_VertexData15_g170451;
				float4 break792_g170443 = Model_VertexMasks791_g170443;
				float4 break33_g170455 = _overlay_vert_mode;
				float temp_output_30_0_g170455 = ( break792_g170443.x * break33_g170455.x );
				float temp_output_29_0_g170455 = ( break792_g170443.y * break33_g170455.y );
				float temp_output_31_0_g170455 = ( break792_g170443.z * break33_g170455.z );
				float temp_output_28_0_g170455 = ( temp_output_30_0_g170455 + temp_output_29_0_g170455 + temp_output_31_0_g170455 + ( break792_g170443.w * break33_g170455.w ) );
				float clampResult17_g170456 = clamp( temp_output_28_0_g170455 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170459 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170459 = ( _OverlayMeshRemap.y - temp_output_7_0_g170459 );
				float lerpResult879_g170443 = lerp( 1.0 , saturate( ( ( clampResult17_g170456 - temp_output_7_0_g170459 ) / ( temp_output_10_0_g170459 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170467 = lerpResult879_g170443;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170467 = ( temp_output_6_0_g170467 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170467 = temp_output_6_0_g170467;
				#endif
				float temp_output_831_0_g170443 = staticSwitch14_g170467;
				half Overlay_VertMask801_g170443 = temp_output_831_0_g170443;
				half Overlay_MaskNoise427_g170443 = 1.0;
				TVEGlobalData Data15_g170445 = Data204_g170159;
				float Out_Dummy15_g170445 = 0;
				float4 Out_CoatParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170445 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170445 = float4( 0,0,0,0 );
				Out_Dummy15_g170445 = Data15_g170445.Dummy;
				Out_CoatParams15_g170445 = Data15_g170445.CoatParams;
				Out_PaintParams15_g170445 = Data15_g170445.PaintParams;
				Out_GlowParams15_g170445 = Data15_g170445.GlowParams;
				Out_AtmoParams15_g170445= Data15_g170445.AtmoParams;
				Out_FadeParams15_g170445= Data15_g170445.FadeParams;
				Out_FormParams15_g170445 = Data15_g170445.FormParams;
				Out_LandParams15_g170445 = Data15_g170445.LandParams;
				Out_WindParams15_g170445 = Data15_g170445.WindParams;
				Out_PushParams15_g170445 = Data15_g170445.PushParams;
				half4 Global_AtmoParams516_g170443 = Out_AtmoParams15_g170445;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170443 = (Global_AtmoParams516_g170443).z;
				#else
				float staticSwitch705_g170443 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170443 = staticSwitch705_g170443;
				half Custom_Mask646_g170443 = 1.0;
				float temp_output_7_0_g170470 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170470 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170470 );
				half Overlay_Mask494_g170443 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g170443 * Overlay_MaskProj457_g170443 * Overlay_MaskLuma438_g170443 * Overlay_VertMask801_g170443 * Overlay_MaskNoise427_g170443 * Overlay_MaskGlobal429_g170443 * Custom_Mask646_g170443 ) - temp_output_7_0_g170470 ) / ( temp_output_10_0_g170470 + 0.0001 ) ) );
				float3 lerpResult467_g170443 = lerp( Visual_Albedo127_g170443 , staticSwitch14_g170466 , Overlay_Mask494_g170443);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170443 = lerpResult467_g170443;
				#else
				float3 staticSwitch577_g170443 = Visual_Albedo127_g170443;
				#endif
				half3 Final_Albedo493_g170443 = staticSwitch577_g170443;
				float3 In_Albedo3_g170446 = Final_Albedo493_g170443;
				half2 Visual_NormalTS535_g170443 = Out_NormalTS4_g170444;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture238_g170452) = _OverlayNormalTex;
				float localFilterTexture29_g170471 = ( 0.0 );
				SamplerState SamplerDefault29_g170471 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170471 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170471 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170471 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170471 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170471 = SamplerDefault29_g170471;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170471 = SamplerDefault29_g170471;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170471 = SamplerPoint29_g170471;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170471 = SamplerLow29_g170471;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170471 = SamplerMedium29_g170471;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170471 = SamplerHigh29_g170471;
				#endif
				SamplerState Sampler238_g170452 = SS29_g170471;
				float4 temp_output_37_0_g170452 = Overlay_Coords639_g170443;
				half4 Coords238_g170452 = temp_output_37_0_g170452;
				float3 temp_output_279_0_g170452 = Model_PositionWO602_g170443;
				half3 WorldPosition238_g170452 = temp_output_279_0_g170452;
				half4 localSamplePlanar2D238_g170452 = SamplePlanar2D( Texture238_g170452 , Sampler238_g170452 , Coords238_g170452 , WorldPosition238_g170452 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture246_g170452) = _OverlayNormalTex;
				SamplerState Sampler246_g170452 = SS29_g170471;
				half4 Coords246_g170452 = temp_output_37_0_g170452;
				half3 WorldPosition246_g170452 = temp_output_279_0_g170452;
				float3 temp_output_280_0_g170452 = Model_NormalWS712_g170443;
				half3 WorldNormal246_g170452 = temp_output_280_0_g170452;
				half4 localSamplePlanar3D246_g170452 = SamplePlanar3D( Texture246_g170452 , Sampler246_g170452 , Coords246_g170452 , WorldPosition246_g170452 , WorldNormal246_g170452 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture234_g170452) = _OverlayNormalTex;
				SamplerState Sampler234_g170452 = SS29_g170471;
				float4 Coords234_g170452 = temp_output_37_0_g170452;
				float3 WorldPosition234_g170452 = temp_output_279_0_g170452;
				float4 localSampleStochastic2D234_g170452 = SampleStochastic2D( Texture234_g170452 , Sampler234_g170452 , Coords234_g170452 , WorldPosition234_g170452 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture263_g170452) = _OverlayNormalTex;
				SamplerState Sampler263_g170452 = SS29_g170471;
				half4 Coords263_g170452 = temp_output_37_0_g170452;
				half3 WorldPosition263_g170452 = temp_output_279_0_g170452;
				half3 WorldNormal263_g170452 = temp_output_280_0_g170452;
				half4 localSampleStochastic3D263_g170452 = SampleStochastic3D( Texture263_g170452 , Sampler263_g170452 , Coords263_g170452 , WorldPosition263_g170452 , WorldNormal263_g170452 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170443 = localSamplePlanar2D238_g170452;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170443 = localSamplePlanar3D246_g170452;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170443 = localSampleStochastic2D234_g170452;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170443 = localSampleStochastic3D263_g170452;
				#else
				float4 staticSwitch686_g170443 = localSamplePlanar2D238_g170452;
				#endif
				half4 Normal_Packed45_g170449 = staticSwitch686_g170443;
				float2 appendResult58_g170449 = (float2(( (Normal_Packed45_g170449).x * (Normal_Packed45_g170449).w ) , (Normal_Packed45_g170449).y));
				half2 Normal_Default50_g170449 = appendResult58_g170449;
				half2 Normal_ASTC41_g170449 = (Normal_Packed45_g170449).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170449 = Normal_ASTC41_g170449;
				#else
				float2 staticSwitch38_g170449 = Normal_Default50_g170449;
				#endif
				half2 Normal_NO_DTX544_g170449 = (Normal_Packed45_g170449).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170449 = Normal_NO_DTX544_g170449;
				#else
				float2 staticSwitch37_g170449 = staticSwitch38_g170449;
				#endif
				half2 Normal_Planar45_g170448 = (staticSwitch37_g170449*2.0 + -1.0);
				float2 break71_g170448 = Normal_Planar45_g170448;
				float3 appendResult72_g170448 = (float3(break71_g170448.x , 0.0 , break71_g170448.y));
				half2 Overlay_Normal528_g170443 = (mul( ase_worldToTangent, appendResult72_g170448 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170443 = Overlay_Normal528_g170443;
				#else
				float2 staticSwitch579_g170443 = Visual_NormalTS535_g170443;
				#endif
				float2 lerpResult551_g170443 = lerp( Visual_NormalTS535_g170443 , ( staticSwitch579_g170443 * _OverlayNormalValue ) , Overlay_Mask494_g170443);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170443 = lerpResult551_g170443;
				#else
				float2 staticSwitch583_g170443 = Visual_NormalTS535_g170443;
				#endif
				half2 Final_NormalTS499_g170443 = staticSwitch583_g170443;
				float2 In_NormalTS3_g170446 = Final_NormalTS499_g170443;
				float3 In_NormalWS3_g170446 = temp_output_739_21_g170443;
				half4 Visual_Masks536_g170443 = Out_Shader4_g170444;
				float4 appendResult585_g170443 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170443 = lerp( Visual_Masks536_g170443 , appendResult585_g170443 , Overlay_Mask494_g170443);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170443 = lerpResult584_g170443;
				#else
				float4 staticSwitch586_g170443 = Visual_Masks536_g170443;
				#endif
				half4 Final_Masks482_g170443 = staticSwitch586_g170443;
				float4 In_Shader3_g170446 = Final_Masks482_g170443;
				float4 In_Emissive3_g170446 = Out_Emissive4_g170444;
				float temp_output_739_12_g170443 = Out_Grayscale4_g170444;
				float In_Grayscale3_g170446 = temp_output_739_12_g170443;
				float In_Luminosity3_g170446 = temp_output_739_15_g170443;
				float In_MultiMask3_g170446 = Out_MultiMask4_g170444;
				float In_AlphaClip3_g170446 = Out_AlphaClip4_g170444;
				float In_AlphaFade3_g170446 = Out_AlphaFade4_g170444;
				float3 In_Translucency3_g170446 = Out_Translucency4_g170444;
				half Visual_Transmission699_g170443 = Out_Transmission4_g170444;
				float lerpResult746_g170443 = lerp( Visual_Transmission699_g170443 , ( Visual_Transmission699_g170443 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170443 * Overlay_MaskNoise427_g170443 * Overlay_MaskGlobal429_g170443 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170443 = lerpResult746_g170443;
				#else
				float staticSwitch703_g170443 = Visual_Transmission699_g170443;
				#endif
				half Final_Transmission702_g170443 = staticSwitch703_g170443;
				float In_Transmission3_g170446 = Final_Transmission702_g170443;
				float In_Thickness3_g170446 = Out_Thickness4_g170444;
				float In_Diffusion3_g170446 = Out_Diffusion4_g170444;
				Data3_g170446.Dummy = In_Dummy3_g170446;
				Data3_g170446.Albedo = In_Albedo3_g170446;
				Data3_g170446.NormalTS = In_NormalTS3_g170446;
				Data3_g170446.NormalWS = In_NormalWS3_g170446;
				Data3_g170446.Shader = In_Shader3_g170446;
				Data3_g170446.Emissive= In_Emissive3_g170446;
				Data3_g170446.MultiMask = In_MultiMask3_g170446;
				Data3_g170446.Grayscale = In_Grayscale3_g170446;
				Data3_g170446.Luminosity = In_Luminosity3_g170446;
				Data3_g170446.AlphaClip = In_AlphaClip3_g170446;
				Data3_g170446.AlphaFade = In_AlphaFade3_g170446;
				Data3_g170446.Translucency = In_Translucency3_g170446;
				Data3_g170446.Transmission = In_Transmission3_g170446;
				Data3_g170446.Thickness = In_Thickness3_g170446;
				Data3_g170446.Diffusion = In_Diffusion3_g170446;
				TVEVisualData Data4_g170492 = Data3_g170446;
				float Out_Dummy4_g170492 = 0;
				float3 Out_Albedo4_g170492 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170492 = float2( 0,0 );
				float3 Out_NormalWS4_g170492 = float3( 0,0,0 );
				float4 Out_Shader4_g170492 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170492 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170492 = 0;
				float Out_Grayscale4_g170492 = 0;
				float Out_Luminosity4_g170492 = 0;
				float Out_AlphaClip4_g170492 = 0;
				float Out_AlphaFade4_g170492 = 0;
				float3 Out_Translucency4_g170492 = float3( 0,0,0 );
				float Out_Transmission4_g170492 = 0;
				float Out_Thickness4_g170492 = 0;
				float Out_Diffusion4_g170492 = 0;
				Out_Dummy4_g170492 = Data4_g170492.Dummy;
				Out_Albedo4_g170492 = Data4_g170492.Albedo;
				Out_NormalTS4_g170492 = Data4_g170492.NormalTS;
				Out_NormalWS4_g170492 = Data4_g170492.NormalWS;
				Out_Shader4_g170492 = Data4_g170492.Shader;
				Out_Emissive4_g170492= Data4_g170492.Emissive;
				Out_MultiMask4_g170492 = Data4_g170492.MultiMask;
				Out_Grayscale4_g170492 = Data4_g170492.Grayscale;
				Out_Luminosity4_g170492= Data4_g170492.Luminosity;
				Out_AlphaClip4_g170492 = Data4_g170492.AlphaClip;
				Out_AlphaFade4_g170492 = Data4_g170492.AlphaFade;
				Out_Translucency4_g170492 = Data4_g170492.Translucency;
				Out_Transmission4_g170492 = Data4_g170492.Transmission;
				Out_Thickness4_g170492 = Data4_g170492.Thickness;
				Out_Diffusion4_g170492 = Data4_g170492.Diffusion;
				float3 temp_output_297_0_g170481 = Out_Albedo4_g170492;
				float3 In_Albedo3_g170493 = temp_output_297_0_g170481;
				float2 In_NormalTS3_g170493 = Out_NormalTS4_g170492;
				float3 In_NormalWS3_g170493 = Out_NormalWS4_g170492;
				float4 In_Shader3_g170493 = Out_Shader4_g170492;
				float4 temp_cast_6 = (0.0).xxxx;
				half4 Visual_Emissive255_g170481 = Out_Emissive4_g170492;
				TVEModelData Data15_g170482 = Data16_g170157;
				float Out_Dummy15_g170482 = 0;
				float3 Out_PositionOS15_g170482 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170482 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170482 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170482 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170482 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170482 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170482 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170482 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170482 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170482 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170482 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170482 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170482 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170482 = float3( 0,0,0 );
				float4 Out_VertexData15_g170482 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170482 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170482 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170482 = float4( 0,0,0,0 );
				Out_Dummy15_g170482 = Data15_g170482.Dummy;
				Out_PositionOS15_g170482 = Data15_g170482.PositionOS;
				Out_PositionWS15_g170482 = Data15_g170482.PositionWS;
				Out_PositionWO15_g170482 = Data15_g170482.PositionWO;
				Out_PositionRawOS15_g170482 = Data15_g170482.PositionRawOS;
				Out_PositionAddOS15_g170482 = Data15_g170482.PositionAddOS;
				Out_PivotOS15_g170482 = Data15_g170482.PivotOS;
				Out_PivotWS15_g170482 = Data15_g170482.PivotWS;
				Out_PivotWO15_g170482 = Data15_g170482.PivotWO;
				Out_NormalOS15_g170482 = Data15_g170482.NormalOS;
				Out_NormalWS15_g170482 = Data15_g170482.NormalWS;
				Out_NormalRawOS15_g170482 = Data15_g170482.NormalRawOS;
				Out_NormalRawWS15_g170482 = Data15_g170482.NormalRawWS;
				Out_TangentOS15_g170482 = Data15_g170482.TangentOS;
				Out_ViewDirWS15_g170482 = Data15_g170482.ViewDirWS;
				Out_VertexData15_g170482 = Data15_g170482.VertexData;
				Out_MotionData15_g170482 = Data15_g170482.MotionData;
				Out_BoundsData15_g170482 = Data15_g170482.BoundsData;
				Out_RotationData15_g170482 = Data15_g170482.RotationData;
				half4 Model_VertexMasks216_g170481 = Out_VertexData15_g170482;
				float4 break251_g170481 = Model_VertexMasks216_g170481;
				float4 break33_g170486 = _emissive_vert_mode;
				float temp_output_30_0_g170486 = ( break251_g170481.x * break33_g170486.x );
				float temp_output_29_0_g170486 = ( break251_g170481.y * break33_g170486.y );
				float temp_output_31_0_g170486 = ( break251_g170481.z * break33_g170486.z );
				float temp_output_28_0_g170486 = ( temp_output_30_0_g170486 + temp_output_29_0_g170486 + temp_output_31_0_g170486 + ( break251_g170481.w * break33_g170486.w ) );
				float clampResult17_g170485 = clamp( temp_output_28_0_g170486 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170489 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170489 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170489 );
				float lerpResult303_g170481 = lerp( 1.0 , saturate( ( ( clampResult17_g170485 - temp_output_7_0_g170489 ) / ( temp_output_10_0_g170489 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170495 = lerpResult303_g170481;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170495 = ( temp_output_6_0_g170495 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170495 = temp_output_6_0_g170495;
				#endif
				float temp_output_263_0_g170481 = staticSwitch14_g170495;
				half Emissive_MeshMask221_g170481 = temp_output_263_0_g170481;
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture276_g170484) = _EmissiveMaskTex;
				SamplerState Sampler276_g170484 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170490 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170490 = ( temp_output_6_0_g170490 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170490 = temp_output_6_0_g170490;
				#endif
				half4 Emissive_Coords167_g170481 = staticSwitch14_g170490;
				float4 temp_output_37_0_g170484 = Emissive_Coords167_g170481;
				half4 Coords276_g170484 = temp_output_37_0_g170484;
				half2 TexCoord276_g170484 = IN.ase_texcoord2.xy;
				half4 localSampleMain276_g170484 = SampleMain( Texture276_g170484 , Sampler276_g170484 , Coords276_g170484 , TexCoord276_g170484 );
				UNITY_DECLARE_TEX2D_NOSAMPLER(Texture275_g170484) = _EmissiveMaskTex;
				SamplerState Sampler275_g170484 = sampler_Linear_Repeat;
				half4 Coords275_g170484 = temp_output_37_0_g170484;
				half2 TexCoord275_g170484 = IN.ase_texcoord3.xy;
				half4 localSampleExtra275_g170484 = SampleExtra( Texture275_g170484 , Sampler275_g170484 , Coords275_g170484 , TexCoord275_g170484 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170481 = localSampleMain276_g170484;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170481 = localSampleExtra275_g170484;
				#else
				float4 staticSwitch176_g170481 = localSampleMain276_g170484;
				#endif
				half4 Emissive_MaskTex201_g170481 = staticSwitch176_g170481;
				float clampResult17_g170488 = clamp( (Emissive_MaskTex201_g170481).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170487 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170487 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170487 );
				float lerpResult302_g170481 = lerp( 1.0 , saturate( ( ( clampResult17_g170488 - temp_output_7_0_g170487 ) / ( temp_output_10_0_g170487 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170481 = lerpResult302_g170481;
				float temp_output_279_0_g170481 = ( Emissive_MeshMask221_g170481 * Emissive_Mask103_g170481 );
				float3 appendResult293_g170481 = (float3(temp_output_279_0_g170481 , temp_output_279_0_g170481 , temp_output_279_0_g170481));
				half3 Local_EmissiveColor278_g170481 = appendResult293_g170481;
				float3 temp_cast_7 = (1.0).xxx;
				TVEGlobalData Data15_g170483 = Data204_g170159;
				float Out_Dummy15_g170483 = 0;
				float4 Out_CoatParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170483 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170483 = float4( 0,0,0,0 );
				Out_Dummy15_g170483 = Data15_g170483.Dummy;
				Out_CoatParams15_g170483 = Data15_g170483.CoatParams;
				Out_PaintParams15_g170483 = Data15_g170483.PaintParams;
				Out_GlowParams15_g170483 = Data15_g170483.GlowParams;
				Out_AtmoParams15_g170483= Data15_g170483.AtmoParams;
				Out_FadeParams15_g170483= Data15_g170483.FadeParams;
				Out_FormParams15_g170483 = Data15_g170483.FormParams;
				Out_LandParams15_g170483 = Data15_g170483.LandParams;
				Out_WindParams15_g170483 = Data15_g170483.WindParams;
				Out_PushParams15_g170483 = Data15_g170483.PushParams;
				half4 Global_GlowParams179_g170481 = Out_GlowParams15_g170483;
				float3 lerpResult299_g170481 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170481).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170481 = lerpResult299_g170481;
				#else
				float3 staticSwitch228_g170481 = temp_cast_7;
				#endif
				half3 Emissive_GlobalMask248_g170481 = staticSwitch228_g170481;
				half3 Local_EmissiveValue88_g170481 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170481 );
				half3 Emissive_Blend260_g170481 = ( ( (Visual_Emissive255_g170481).xyz * Local_EmissiveColor278_g170481 ) * Local_EmissiveValue88_g170481 );
				float3 temp_output_3_0_g170491 = Emissive_Blend260_g170481;
				float temp_output_15_0_g170491 = _emissive_power_value;
				float3 temp_output_23_0_g170491 = ( temp_output_3_0_g170491 * temp_output_15_0_g170491 );
				float4 appendResult295_g170481 = (float4(temp_output_23_0_g170491 , Emissive_Mask103_g170481));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170481 = appendResult295_g170481;
				#else
				float4 staticSwitch129_g170481 = temp_cast_6;
				#endif
				half4 Final_Emissive184_g170481 = staticSwitch129_g170481;
				float4 In_Emissive3_g170493 = Final_Emissive184_g170481;
				float In_Grayscale3_g170493 = Out_Grayscale4_g170492;
				float In_Luminosity3_g170493 = Out_Luminosity4_g170492;
				float temp_output_297_11_g170481 = Out_MultiMask4_g170492;
				float In_MultiMask3_g170493 = temp_output_297_11_g170481;
				float In_AlphaClip3_g170493 = Out_AlphaClip4_g170492;
				float In_AlphaFade3_g170493 = Out_AlphaFade4_g170492;
				float3 In_Translucency3_g170493 = Out_Translucency4_g170492;
				float In_Transmission3_g170493 = Out_Transmission4_g170492;
				float In_Thickness3_g170493 = Out_Thickness4_g170492;
				float In_Diffusion3_g170493 = Out_Diffusion4_g170492;
				Data3_g170493.Dummy = In_Dummy3_g170493;
				Data3_g170493.Albedo = In_Albedo3_g170493;
				Data3_g170493.NormalTS = In_NormalTS3_g170493;
				Data3_g170493.NormalWS = In_NormalWS3_g170493;
				Data3_g170493.Shader = In_Shader3_g170493;
				Data3_g170493.Emissive= In_Emissive3_g170493;
				Data3_g170493.MultiMask = In_MultiMask3_g170493;
				Data3_g170493.Grayscale = In_Grayscale3_g170493;
				Data3_g170493.Luminosity = In_Luminosity3_g170493;
				Data3_g170493.AlphaClip = In_AlphaClip3_g170493;
				Data3_g170493.AlphaFade = In_AlphaFade3_g170493;
				Data3_g170493.Translucency = In_Translucency3_g170493;
				Data3_g170493.Transmission = In_Transmission3_g170493;
				Data3_g170493.Thickness = In_Thickness3_g170493;
				Data3_g170493.Diffusion = In_Diffusion3_g170493;
				TVEVisualData Data4_g170517 = Data3_g170493;
				float Out_Dummy4_g170517 = 0;
				float3 Out_Albedo4_g170517 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170517 = float2( 0,0 );
				float3 Out_NormalWS4_g170517 = float3( 0,0,0 );
				float4 Out_Shader4_g170517 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170517 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170517 = 0;
				float Out_Grayscale4_g170517 = 0;
				float Out_Luminosity4_g170517 = 0;
				float Out_AlphaClip4_g170517 = 0;
				float Out_AlphaFade4_g170517 = 0;
				float3 Out_Translucency4_g170517 = float3( 0,0,0 );
				float Out_Transmission4_g170517 = 0;
				float Out_Thickness4_g170517 = 0;
				float Out_Diffusion4_g170517 = 0;
				Out_Dummy4_g170517 = Data4_g170517.Dummy;
				Out_Albedo4_g170517 = Data4_g170517.Albedo;
				Out_NormalTS4_g170517 = Data4_g170517.NormalTS;
				Out_NormalWS4_g170517 = Data4_g170517.NormalWS;
				Out_Shader4_g170517 = Data4_g170517.Shader;
				Out_Emissive4_g170517= Data4_g170517.Emissive;
				Out_MultiMask4_g170517 = Data4_g170517.MultiMask;
				Out_Grayscale4_g170517 = Data4_g170517.Grayscale;
				Out_Luminosity4_g170517= Data4_g170517.Luminosity;
				Out_AlphaClip4_g170517 = Data4_g170517.AlphaClip;
				Out_AlphaFade4_g170517 = Data4_g170517.AlphaFade;
				Out_Translucency4_g170517 = Data4_g170517.Translucency;
				Out_Transmission4_g170517 = Data4_g170517.Transmission;
				Out_Thickness4_g170517 = Data4_g170517.Thickness;
				Out_Diffusion4_g170517 = Data4_g170517.Diffusion;
				half3 Visual_Albedo199_g170516 = Out_Albedo4_g170517;
				half3 Final_Albedo312_g170516 = Visual_Albedo199_g170516;
				float3 In_Albedo3_g170518 = Final_Albedo312_g170516;
				float2 In_NormalTS3_g170518 = Out_NormalTS4_g170517;
				float3 In_NormalWS3_g170518 = Out_NormalWS4_g170517;
				float4 In_Shader3_g170518 = Out_Shader4_g170517;
				float4 In_Emissive3_g170518 = Out_Emissive4_g170517;
				float In_Grayscale3_g170518 = Out_Grayscale4_g170517;
				float In_Luminosity3_g170518 = Out_Luminosity4_g170517;
				float temp_output_301_11_g170516 = Out_MultiMask4_g170517;
				float In_MultiMask3_g170518 = temp_output_301_11_g170516;
				float In_AlphaClip3_g170518 = Out_AlphaClip4_g170517;
				float In_AlphaFade3_g170518 = Out_AlphaFade4_g170517;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170516 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170516 );
				half Visual_Transmission138_g170516 = Out_Transmission4_g170517;
				half Subsurface_Value268_g170516 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170520 = Data204_g170159;
				float Out_Dummy15_g170520 = 0;
				float4 Out_CoatParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170520 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170520 = float4( 0,0,0,0 );
				Out_Dummy15_g170520 = Data15_g170520.Dummy;
				Out_CoatParams15_g170520 = Data15_g170520.CoatParams;
				Out_PaintParams15_g170520 = Data15_g170520.PaintParams;
				Out_GlowParams15_g170520 = Data15_g170520.GlowParams;
				Out_AtmoParams15_g170520= Data15_g170520.AtmoParams;
				Out_FadeParams15_g170520= Data15_g170520.FadeParams;
				Out_FormParams15_g170520 = Data15_g170520.FormParams;
				Out_LandParams15_g170520 = Data15_g170520.LandParams;
				Out_WindParams15_g170520 = Data15_g170520.WindParams;
				Out_PushParams15_g170520 = Data15_g170520.PushParams;
				half4 Global_GlowParams373_g170516 = Out_GlowParams15_g170520;
				float lerpResult403_g170516 = lerp( 1.0 , saturate( (Global_GlowParams373_g170516).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170516 = lerpResult403_g170516;
				#else
				float staticSwitch367_g170516 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170516 = staticSwitch367_g170516;
				half Visual_MultiMask292_g170516 = temp_output_301_11_g170516;
				float lerpResult293_g170516 = lerp( 1.0 , Visual_MultiMask292_g170516 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170516 = lerpResult293_g170516;
				half Custom_Mask363_g170516 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170516 = ( Visual_Transmission138_g170516 * Subsurface_Value268_g170516 * Subsurface_GlobalMask369_g170516 * Subsurface_MultiMask296_g170516 * Custom_Mask363_g170516 );
				#else
				float staticSwitch345_g170516 = 0.0;
				#endif
				half Final_Transmission269_g170516 = staticSwitch345_g170516;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170516 = ( Subsurface_Color264_g170516 * Final_Transmission269_g170516 * 10.0 );
				#else
				float3 staticSwitch348_g170516 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170516 = staticSwitch348_g170516;
				float3 In_Translucency3_g170518 = Final_Translucency254_g170516;
				float In_Transmission3_g170518 = Final_Transmission269_g170516;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170516 = 0.0;
				#else
				float staticSwitch351_g170516 = 1.0;
				#endif
				half Final_Thickness275_g170516 = staticSwitch351_g170516;
				float In_Thickness3_g170518 = Final_Thickness275_g170516;
				float Final_Diffusion340_g170516 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170518 = Final_Diffusion340_g170516;
				Data3_g170518.Dummy = In_Dummy3_g170518;
				Data3_g170518.Albedo = In_Albedo3_g170518;
				Data3_g170518.NormalTS = In_NormalTS3_g170518;
				Data3_g170518.NormalWS = In_NormalWS3_g170518;
				Data3_g170518.Shader = In_Shader3_g170518;
				Data3_g170518.Emissive= In_Emissive3_g170518;
				Data3_g170518.MultiMask = In_MultiMask3_g170518;
				Data3_g170518.Grayscale = In_Grayscale3_g170518;
				Data3_g170518.Luminosity = In_Luminosity3_g170518;
				Data3_g170518.AlphaClip = In_AlphaClip3_g170518;
				Data3_g170518.AlphaFade = In_AlphaFade3_g170518;
				Data3_g170518.Translucency = In_Translucency3_g170518;
				Data3_g170518.Transmission = In_Transmission3_g170518;
				Data3_g170518.Thickness = In_Thickness3_g170518;
				Data3_g170518.Diffusion = In_Diffusion3_g170518;
				TVEVisualData Data4_g170529 = Data3_g170518;
				float Out_Dummy4_g170529 = 0;
				float3 Out_Albedo4_g170529 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170529 = float2( 0,0 );
				float3 Out_NormalWS4_g170529 = float3( 0,0,0 );
				float4 Out_Shader4_g170529 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170529 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170529 = 0;
				float Out_Grayscale4_g170529 = 0;
				float Out_Luminosity4_g170529 = 0;
				float Out_AlphaClip4_g170529 = 0;
				float Out_AlphaFade4_g170529 = 0;
				float3 Out_Translucency4_g170529 = float3( 0,0,0 );
				float Out_Transmission4_g170529 = 0;
				float Out_Thickness4_g170529 = 0;
				float Out_Diffusion4_g170529 = 0;
				Out_Dummy4_g170529 = Data4_g170529.Dummy;
				Out_Albedo4_g170529 = Data4_g170529.Albedo;
				Out_NormalTS4_g170529 = Data4_g170529.NormalTS;
				Out_NormalWS4_g170529 = Data4_g170529.NormalWS;
				Out_Shader4_g170529 = Data4_g170529.Shader;
				Out_Emissive4_g170529= Data4_g170529.Emissive;
				Out_MultiMask4_g170529 = Data4_g170529.MultiMask;
				Out_Grayscale4_g170529 = Data4_g170529.Grayscale;
				Out_Luminosity4_g170529= Data4_g170529.Luminosity;
				Out_AlphaClip4_g170529 = Data4_g170529.AlphaClip;
				Out_AlphaFade4_g170529 = Data4_g170529.AlphaFade;
				Out_Translucency4_g170529 = Data4_g170529.Translucency;
				Out_Transmission4_g170529 = Data4_g170529.Transmission;
				Out_Thickness4_g170529 = Data4_g170529.Thickness;
				Out_Diffusion4_g170529 = Data4_g170529.Diffusion;
				float temp_output_3_0_g170530 = Out_AlphaClip4_g170529;
				float Alpha19_g170530 = temp_output_3_0_g170530;
				float temp_output_15_0_g170530 = 0.0;
				float Treshold19_g170530 = temp_output_15_0_g170530;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170530 - Treshold19_g170530);
				#endif
				#else
				clip(Alpha19_g170530 - Treshold19_g170530);
				#endif
				#endif
				
				o.Normal = fixed3( 0, 0, 1 );
				#if !defined(ASE_LIGHTING_SIMPLE)
					o.Occlusion = 1;
				#endif
				o.Alpha = saturate( ( Alpha19_g170530 * Out_AlphaFade4_g170529 ) );
				float AlphaClipThreshold = 0.5;
				float AlphaClipThresholdShadow = 0.5;

				#ifdef _ALPHATEST_SHADOW_ON
					if (unity_LightShadowBias.z != 0.0)
						clip(o.Alpha - AlphaClipThresholdShadow);
					#ifdef _ALPHATEST_ON
					else
						clip(o.Alpha - AlphaClipThreshold);
					#endif
				#else
					#ifdef _ALPHATEST_ON
						clip(o.Alpha - AlphaClipThreshold);
					#endif
				#endif

				#if defined( CAN_SKIP_VPOS )
				float2 vpos = IN.pos;
				#endif

				#ifdef UNITY_STANDARD_USE_DITHER_MASK
					half alphaRef = tex3D(_DitherMaskLOD, float3(vpos.xy*0.25,o.Alpha*0.9375)).a;
					clip(alphaRef - 0.01);
				#endif

				#ifdef _DEPTHOFFSET_ON
					outputDepth = IN.pos.z;
				#endif

				SHADOW_CASTER_FRAGMENT(IN)
			}
			ENDCG
		}
		
	}
	CustomEditor "TVEShaderGUILite"
	
	Fallback Off
}
/*ASEBEGIN
Version=19603
Node;AmplifyShaderEditor.FunctionNode;2470;-11392,-256;Inherit;False;Block Model;46;;170143;7ad7765e793a6714babedee0033c36e9;14,289,1,240,1,290,1,291,1,181,0,183,0,185,0,188,0,190,0,184,0,192,0,189,0,300,0,193,0;10;102;FLOAT3;0,0,0;False;163;FLOAT3;0,0,0;False;186;FLOAT3;0,0,0;False;187;FLOAT3;0,0,0;False;166;FLOAT3;0,0,0;False;164;FLOAT3;0,0,0;False;301;FLOAT3;0,0,0;False;167;FLOAT4;0,0,0,0;False;172;FLOAT4;0,0,0,0;False;175;FLOAT4;0,0,0,0;False;2;OBJECT;128;OBJECT;314
Node;AmplifyShaderEditor.RegisterLocalVarNode;2471;-11072,-256;Half;False;Model Vert;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2472;-10624,-256;Inherit;False;2471;Model Vert;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2476;-9600,-256;Inherit;False;2471;Model Vert;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2473;-10368,-256;Inherit;False;Block Lite Global;55;;170159;3cde0aa66f3d8ec4a9b80a215a26f02b;16,315,0,311,0,317,0,321,0,319,0,323,0,337,1,283,0,285,0,282,0,308,0,276,0,349,0,287,0,289,1,348,1;1;206;OBJECT;0,0,0,0;False;1;OBJECT;151
Node;AmplifyShaderEditor.RegisterLocalVarNode;2474;-11072,-192;Half;False;Model Frag;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2477;-9344,-256;Inherit;False;Block Pivots Sub;-1;;170224;186f08b1bbe15894d9c677d50398679b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;2444;-6016,-256;Inherit;False;2474;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;2475;-10048,-256;Half;False;Global Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2485;-8960,-256;Inherit;False;Block Lite Motion;467;;170277;d8687cf5f6a8faa449e82fd2b678fe12;0;2;146;OBJECT;0,0,0,0;False;212;OBJECT;0,0,0,0;False;2;OBJECT;128;FLOAT;1862
Node;AmplifyShaderEditor.GetLocalVarNode;2445;-5760,-128;Inherit;False;2474;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2446;-5760,-64;Inherit;False;2475;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2447;-5760,-256;Inherit;False;Block Main;96;;170334;b04cfed9a7b4c0841afdb49a38c282c5;5,65,1,136,1,41,1,133,1,40,1;1;225;OBJECT;0,0,0,0;False;1;OBJECT;106
Node;AmplifyShaderEditor.RegisterLocalVarNode;2479;-8512,-128;Half;False;Wave Mask;-1;True;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2448;-5376,-128;Inherit;False;2474;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2449;-5376,-64;Inherit;False;2475;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2450;-5376,-256;Inherit;False;Block Layer;122;;170352;5f6a6b9e0b5515744bf8e48a9ccead1b;7,986,1,1008,0,709,1,726,1,748,1,747,1,746,1;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;974;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.GetLocalVarNode;2467;-7040,-256;Inherit;False;2479;Wave Mask;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2451;-4992,-128;Inherit;False;2474;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2452;-4992,-256;Inherit;False;Block Detail;169;;170386;a5b52fdec7b855a4fba859a90e837892;7,990,1,1013,0,709,1,726,1,748,1,747,1,746,1;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;971;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.FunctionNode;2468;-6784,-256;Inherit;False;Block Interp;-1;;170419;e2b225f9519c0194eaa2c47b94bb1bbc;0;4;19;FLOAT;0;False;20;FLOAT;0;False;21;FLOAT;0;False;22;FLOAT;0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;2453;-4608,-128;Inherit;False;2474;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2454;-4608,-256;Inherit;False;Block Occlusion;214;;170420;ec16733ec52362048954a75640fbe560;1,210,1;2;144;OBJECT;0,0,0,0;False;204;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.RegisterLocalVarNode;2469;-6464,-256;Half;False;Interp Data;-1;True;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.FunctionNode;2455;-4224,-256;Inherit;False;Block Gradient;226;;170430;1f0cb348753541648acbe7a6adce694e;1,228,1;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;2484;-4224,-128;Inherit;False;2469;Interp Data;1;0;OBJECT;;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;2456;-3840,-64;Inherit;False;2475;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2457;-3840,-256;Inherit;False;Block Highlight;0;;170440;20f1f2e205564b848b07c7637cbf0686;0;2;144;OBJECT;0,0,0,0;False;212;FLOAT4;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;2458;-3840,-128;Inherit;False;2474;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2459;-3456,-64;Inherit;False;2475;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2460;-3456,-128;Inherit;False;2474;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2461;-3456,-256;Inherit;False;Block Lite Overlay;306;;170443;df6d6bbf01172a34387d93d862d3d156;9,821,1,819,1,813,1,908,1,826,1,823,1,828,1,844,0,447,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;445;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.FunctionNode;2480;-8576,-256;Inherit;False;Block Transform;-1;;170473;5ac6202bdddd8b34a85c261af6b8de8b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;2462;-3072,-64;Inherit;False;2475;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2464;-3072,-256;Inherit;False;Block Emissive;406;;170481;64497f287b9096b43b688b52b4a0bf20;5,282,0,273,1,275,1,264,1,267,1;3;146;OBJECT;0,0,0,0;False;148;OBJECT;0,0,0,0;False;178;OBJECT;0,0,0,0;False;1;OBJECT;183
Node;AmplifyShaderEditor.FunctionNode;2481;-8192,-256;Inherit;False;Block Lite Normal;529;;170496;d07450326a8fd9045b27c2ea55f72353;1,1681,1;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;2349;-1920,192;Inherit;False;Block Lite Size Fade;456;;170505;828b7cb552f180f4193fb67dbaaae0ce;0;0;1;COLOR;128
Node;AmplifyShaderEditor.FunctionNode;2342;-1920,-256;Inherit;False;Block Lite Variation;239;;170506;3df1ad26aa7a397488e4d172ec7355ef;0;0;1;COLOR;116
Node;AmplifyShaderEditor.FunctionNode;2389;-1920,-192;Inherit;False;Block Lite Tinting;251;;170507;c2bee839afbcbb7499ebde2af2a2b317;3,352,1,377,0,375,1;0;1;COLOR;204
Node;AmplifyShaderEditor.FunctionNode;2390;-1920,-128;Inherit;False;Block Lite Dryness;277;;170508;d0ad841a44e589843b633cc1b97af190;3,398,1,440,0,438,1;0;1;COLOR;346
Node;AmplifyShaderEditor.FunctionNode;2391;-1920,0;Inherit;False;Block Lite Cutout;373;;170509;0780bee94024ab547ae8bb1fac250cb1;2,775,1,824,1;0;1;COLOR;566
Node;AmplifyShaderEditor.FunctionNode;2392;-1920,128;Inherit;False;Block Lite Perspective;449;;170510;d4a92d6e6eef32d4f945d10292650e0c;0;0;1;COLOR;128
Node;AmplifyShaderEditor.FunctionNode;2393;-1920,64;Inherit;False;Block Lite Dithering;390;;170511;6e52cef07120daa408f9658182b29574;3,847,1,848,1,855,1;0;1;COLOR;566
Node;AmplifyShaderEditor.FunctionNode;2405;-1920,-64;Inherit;False;Block Lite Wetness;353;;170512;30361f2d9d7742e4db0b62746ed1affc;3,850,1,877,1,873,1;0;1;COLOR;566
Node;AmplifyShaderEditor.FunctionNode;2482;-7808,-256;Inherit;False;Block Pivots Add;-1;;170513;016babe9e3e643242aa4d123a988150c;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;2465;-2688,-256;Inherit;False;Block Subsurface;430;;170516;d738d295ada6b1f409db6776b5efe789;3,315,0,359,1,362,0;4;146;OBJECT;0,0,0,0;False;385;OBJECT;0,0,0,0;False;371;OBJECT;0,0,0,0;False;361;FLOAT;1;False;1;OBJECT;183
Node;AmplifyShaderEditor.SimpleAddOpNode;2261;-1536,-256;Inherit;False;8;8;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;2;COLOR;0,0,0,0;False;3;COLOR;0,0,0,0;False;4;COLOR;0,0,0,0;False;5;COLOR;0,0,0,0;False;6;COLOR;0,0,0,0;False;7;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;2466;-2368,-256;Half;False;Visual Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;2483;-7488,-256;Half;False;Model Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;2262;-1344,-256;Half;False;Dummy Data;-1;True;1;0;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode;2234;-640,-256;Inherit;False;2466;Visual Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2233;-640,-192;Inherit;False;2483;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2265;-384,320;Inherit;False;2262;Dummy Data;1;0;OBJECT;;False;1;COLOR;0
Node;AmplifyShaderEditor.FunctionNode;2383;-384,-256;Inherit;False;Block Render;2;;170523;a46c8f81ec84cc34b8c5bbba7c174e1d;0;2;17;OBJECT;;False;19;OBJECT;;False;20;FLOAT3;21;FLOAT3;22;FLOAT3;34;FLOAT3;77;FLOAT;26;FLOAT;27;FLOAT;108;FLOAT;109;FLOAT;72;FLOAT;28;FLOAT;71;FLOAT3;65;FLOAT;66;FLOAT;67;FLOAT;68;FLOAT;73;FLOAT3;37;FLOAT3;30;FLOAT3;32;FLOAT4;33
Node;AmplifyShaderEditor.FunctionNode;2264;0,288;Inherit;False;Register;-1;;170538;673534ff3248b7442a6471d786096f1f;0;2;6;FLOAT4;0,0,0,0;False;7;COLOR;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.RangedFloatNode;2235;-464,-640;Half;False;Property;_render_src;_render_src;546;1;[HideInInspector];Create;True;0;0;0;True;0;False;5;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2236;-640,-640;Half;False;Property;_render_cull;_render_cull;545;1;[HideInInspector];Create;True;0;3;Both;0;Back;1;Front;2;0;True;0;False;0;2;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2237;-288,-640;Half;False;Property;_render_dst;_render_dst;547;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;10;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2238;-112,-640;Half;False;Property;_render_zw;_render_zw;548;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2239;64,-640;Half;False;Property;_render_coverage;_render_coverage;549;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2241;-192,-768;Half;False;Property;_IsLiteShader;_IsLiteShader;550;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2384;-416,-768;Half;False;Property;_IsSubsurfaceShader;_IsSubsurfaceShader;552;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2386;-640,-768;Half;False;Property;_IsGeneralShader;_IsGeneralShader;551;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;2240;384,-640;Inherit;False;Base Compile;-1;;170539;e67c8238031dbf04ab79a5d4d63d1b4f;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2463;-3072,-128;Inherit;False;2474;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2174;128,-256;Float;False;False;-1;2;ASEMaterialInspector;0;12;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ExtraPrePass;0;0;ExtraPrePass;6;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;True;True;0;False;;0;False;;True;1;LightMode=ForwardBase;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2176;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;12;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ForwardAdd;0;2;ForwardAdd;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;True;4;1;False;;1;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;True;1;LightMode=ForwardAdd;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2177;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;12;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Deferred;0;3;Deferred;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Deferred;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2178;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;12;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Meta;0;4;Meta;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Meta;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2179;-1152,-256;Float;False;False;-1;2;ASEMaterialInspector;0;12;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ShadowCaster;0;5;ShadowCaster;0;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;False;True;0;False;;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;False;True;1;False;;True;3;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;2;False;0;False;False;False;False;False;False;False;False;False;False;False;False;True;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;1;LightMode=ShadowCaster;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2175;384,-256;Float;False;True;-1;2;TVEShaderGUILite;0;17;BOXOPHOBIC/The Visual Engine/Geometry/General Subsurface Lit (Lite);28cd5599e02859647ae1798e4fcaef6c;True;ForwardBase;0;1;ForwardBase;20;False;True;0;1;False;;0;False;;0;1;False;;0;False;;True;0;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;False;;True;True;2;True;_render_cull;False;True;True;True;True;True;0;False;;False;False;False;False;False;False;False;True;False;0;False;;255;False;;255;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;0;False;;True;True;1;True;_render_zw;True;0;False;;False;True;3;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;DisableBatching=False=DisableBatching;True;5;False;0;True;True;1;1;True;_render_src;0;True;_render_dst;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=ForwardBase;False;False;0;;0;0;Standard;42;Category;0;0;Workflow;0;638375640342140968;Surface;0;0;  Blend;0;0;  Refraction Model;0;0;  Dither Shadows;1;0;Two Sided;0;638375639859340986;Deferred Pass;0;0;Transmission;0;0;  Transmission Shadow;0.5,False,;0;Translucency;1;638375639879434880;  Translucency Strength;1,False,;0;  Normal Distortion;0.5,False,;0;  Scattering;2,False,;0;  Direct;0.9,False,;0;  Ambient;0.1,False,;0;  Shadow;0.5,False,;0;Cast Shadows;1;0;  Use Shadow Threshold;0;0;Receive Shadows;1;0;Receive Specular;1;0;GPU Instancing;1;0;LOD CrossFade;1;0;Built-in Fog;1;0;Ambient Light;1;0;Meta Pass;1;0;Add Pass;1;0;Override Baked GI;0;0;Extra Pre Pass;0;0;Tessellation;0;0;  Phong;0;0;  Strength;0.5,False,;0;  Type;0;0;  Tess;16,False,;0;  Min;10,False,;0;  Max;25,False,;0;  Edge Length;16,False,;0;  Max Displacement;25,False,;0;Fwd Specular Highlights Toggle;0;0;Fwd Reflections Toggle;0;0;Disable Batching;0;0;Vertex Position,InvertActionOnDeselection;0;638375639915106055;0;6;False;True;True;False;True;True;False;;True;0
WireConnection;2471;0;2470;128
WireConnection;2473;206;2472;0
WireConnection;2474;0;2470;314
WireConnection;2477;146;2476;0
WireConnection;2475;0;2473;151
WireConnection;2485;146;2477;128
WireConnection;2447;225;2444;0
WireConnection;2479;0;2485;1862
WireConnection;2450;585;2447;106
WireConnection;2450;633;2445;0
WireConnection;2450;974;2446;0
WireConnection;2452;585;2450;552
WireConnection;2452;633;2448;0
WireConnection;2452;971;2449;0
WireConnection;2468;22;2467;0
WireConnection;2454;144;2452;552
WireConnection;2454;204;2451;0
WireConnection;2469;0;2468;0
WireConnection;2455;144;2454;116
WireConnection;2455;222;2453;0
WireConnection;2457;144;2455;116
WireConnection;2457;212;2484;0
WireConnection;2461;572;2457;116
WireConnection;2461;596;2458;0
WireConnection;2461;600;2456;0
WireConnection;2480;146;2485;128
WireConnection;2464;146;2461;566
WireConnection;2464;148;2460;0
WireConnection;2464;178;2459;0
WireConnection;2481;146;2480;128
WireConnection;2482;146;2481;128
WireConnection;2465;146;2464;183
WireConnection;2465;371;2462;0
WireConnection;2261;0;2342;116
WireConnection;2261;1;2389;204
WireConnection;2261;2;2390;346
WireConnection;2261;3;2405;566
WireConnection;2261;4;2391;566
WireConnection;2261;5;2393;566
WireConnection;2261;6;2392;128
WireConnection;2261;7;2349;128
WireConnection;2466;0;2465;183
WireConnection;2483;0;2482;128
WireConnection;2262;0;2261;0
WireConnection;2383;17;2234;0
WireConnection;2383;19;2233;0
WireConnection;2264;6;2383;33
WireConnection;2264;7;2265;0
WireConnection;2175;0;2383;21
WireConnection;2175;1;2383;22
WireConnection;2175;2;2383;34
WireConnection;2175;3;2383;77
WireConnection;2175;6;2383;26
WireConnection;2175;5;2383;27
WireConnection;2175;7;2383;28
WireConnection;2175;14;2383;65
WireConnection;2175;15;2383;30
WireConnection;2175;16;2383;32
WireConnection;2175;17;2264;0
ASEEND*/
//CHKSM=C04EF0D2857B39077B2B3B39C121C2402A881590